var languageJs = (function(){
	return {
		vi:{
			MESSAGE: 'Thông báo!',
			MESSAGE_REQUIRE_LOGIN: 'Bạn chưa đăng nhập.',
			MESSAGE_LOGIN_FACEBOOK: 'Bạn chưa đăng nhập facebook.',
			MESSAGE_REQUIRE_ROLE: 'Bạn không có quyền đề truy cập trang này.',
			EVENT_STOP: 'Thời gian tham gia chương trình đã hết, cảm ơn bạn đã quan tâm.',

			MENU_HOME: 'Trang chủ',
			MENU_ABOUT: 'Giới thiệu',
			MENU_CONTACT: 'Liên hệ',
			MENU_LANGUAGE: 'Ngôn ngữ',

			DT_SUNDAY: 'Cn',
			DT_MONDAY: 'Hai',
			DT_TUESDAY: 'Ba',
			DT_WEDNESDAY: 'Tư',
			DT_THURSDAY: 'Năm',
			DT_FRIDAY: 'Sáu',
			DT_SATURDAY: 'Bảy',

			DT_JANUARY: 'Tháng 1',
			DT_FEBRUARY: 'Tháng 2',
			DT_MARCH: 'Tháng 3',
			DT_APRIL: 'Tháng 4',
			DT_MAY: 'Tháng 5',
			DT_JUNE: 'Tháng 6',
			DT_JULY: 'Tháng 7',
			DT_AUGUST: 'Tháng 8',
			DT_SEPTEMBER: 'Tháng 9',
			DT_OCTOBER: 'Tháng 10',
			DT_NOVEMBER: 'Tháng 11',
			DT_DECEMBER: 'Tháng 12'
		},
		en:{
			MESSAGE: 'Infomation!',
			MESSAGE_REQUIRE_LOGIN: 'Bạn chưa đăng nhập.',
			MESSAGE_LOGIN_FACEBOOK: 'Bạn chưa đăng nhập facebook.',
			MESSAGE_REQUIRE_ROLE: 'Bạn không có quyền đề truy cập trang này.',
			EVENT_STOP: 'Thời gian tham gia chương trình đã hết, cảm ơn bạn đã quan tâm EN.',

			MENU_HOME: 'Home',
			MENU_ABOUT: 'About',
			MENU_CONTACT: 'Contact',
			MENU_LANGUAGE: 'Languages',

			DT_SUNDAY: 'Sun',
			DT_MONDAY: 'Mon',
			DT_TUESDAY: 'Tue',
			DT_WEDNESDAY: 'Wed',
			DT_THURSDAY: 'Thu',
			DT_FRIDAY: 'Fri',
			DT_SATURDAY: 'Sat',

			DT_JANUARY: 'Jan',
			DT_FEBRUARY: 'Feb',
			DT_MARCH: 'Mar',
			DT_APRIL: 'Apr',
			DT_MAY: 'May',
			DT_JUNE: 'Jun',
			DT_JULY: 'Jul',
			DT_AUGUST: 'Aug',
			DT_SEPTEMBER: 'Sep',
			DT_OCTOBER: 'Otc',
			DT_NOVEMBER: 'Nov',
			DT_DECEMBER: 'Dec'
		}
	};
})();
/***************************************************
Description: Site configs
****************************************************/
var settingJs = (function(){
	'use strict';

	var currentDate = new Date(),
	// endDate = new Date(2017,0,1,23,59,59),
	host = window.location.host,
	configs = {
		appPrefix: 'Antoree',
		webUrl: settings.services.webUrl,
		socketUrl: settings.services.socketApi,
		adminUrl: settings.services.admin,
		userApiUrl: settings.services.userApi,
		logApiUrl: settings.services.logApi,
		uploadApiUrl: settings.services.uploadApi,
	};

	switch(host){
		case 'live':
		// configs.appPrefix = 'bzSkeLive';
		// configs.baseUrl = 'http://live.com/';
		// configs.baseUrlDb = 'http://live.com/';
		// configs.googleAnalyticIds = [''];
		// configs.googleApiKey = '';
		// configs.googleApiClientId = '';
		// configs.facebookAppId = '';
		break;
		default:
		// configs.appPrefix = 'bzSkeLocal';
		// configs.baseUrl = 'http://localhost:9999/';
		// configs.baseUrlDb = 'http://localhost:5555/';
		// configs.googleAnalyticIds = [''];
		// configs.googleApiKey = 'AIzaSyCSuVSxj5XPG_DHxp5CnPfxOs4txoC9Oh8';
		// configs.googleApiClientId = '437113297903-qliicro81m3d987ka8lpa8vd5k6ab1mg.apps.googleusercontent.com';
		// configs.facebookAppId = '870470899727751';
		break;
	}

	return {
		configs: configs,
		appPrefix: configs.appPrefix,
		storageExpireTime: undefined,
		// baseUrl: configs.baseUrl,
		// baseUrlDb: configs.baseUrlDb,
		// hostSubFolder: '/',
		// apiVersion: '',
		// language: 'vi',
		// routers: [],
		// reloadPageOnStateChange: false,
		// enabledHtml5Mode: false,
		// animationDelay: 0,
		// pageTransitionSequence: [
		// {stateName:'home', transition:'0,0'},
		// {stateName:'about', transition:'0,0'},
		// {stateName:'contact', transition:'0,0'}
		// ],
		// pageTransitionLoop: true,
		// pageTransitionDelay: 1500,
		// pageVisibleCount: 5,
		// preloadResource: [
		// ],
		// stopCampaign: currentDate > endDate,
		// facebook: {
		// 	appId: configs.facebookAppId,
		// 	version: 'v2.5',
		// 	permissions: 'email',
		// 	cookie: true,
		// 	xfbml: true,
		// 	language: 'vi_VN',
		// 	redirect: configs.baseUrl
		// },
		// google: {
		// 	api:{
		// 		apiKey: configs.googleApiKey,
		// 		clientId: configs.googleApiClientId,
		// 		scope: [
		// 		'https://www.googleapis.com/auth/plus.login'
		// 		]
		// 	},
		// 	ga: {
		// 		ids: configs.googleAnalyticIds
		// 	}
		// },
		// admin: {
		// 	itemPerPage: '20',
		// 	routers: []
		// },
		// roles: {
		// 	ALL: '*',
		// 	ADMIN: 'admin',
		// 	EDITOR: 'editor',
		// 	REGISTER: 'register',
		// 	GUEST: 'guest'
		// }
	}
})();
var DateTime = (function(){
	'use strict';

	return {
		dayCount: dayCount,                                 // Đếm số ngày giữa 2 mốc thời gian
        monthCount: monthCount,                             // Đếm số tháng giữa 2 mốc thời gian
        dateBetween: dateBetween,                           // Kiểm tra ngày có thuộc giữ 2 mốc thời gian
        dateContain: dateContain,                           // Kiểm tra ngày có nằm trong mảng ngày
        // dateInfo: dateInfo,                                 // Lấy thông tin ngày (Thứ, ngày, tháng, năm...)
        // timestampToDate: timestampToDate,                   // Chuyển đổi timestamp sang Date()
        dateToTimestamp: dateToTimestamp,                   // Chuyển đổi Date() sang timestamp
        isoDateToDate: isoDateToDate,                       // Chuyển đổi ISODate sang Date()
        daysInMonth: daysInMonth,                           // Lấy số ngày của tháng
        getAge: getAge                                      // Lấy số tuổi
    };

    function dayCount(date1, date2) {
    	var oneDay = 1000 * 60 * 60 * 24;
    	return Math.round((date2.getTime() - date1.getTime()) / oneDay);
    }

    function monthCount(date1, date2) {
    	return (date1.getMonth()) - (date2.getMonth()) + (12 * (date1.getFullYear() - date2.getFullYear())) + 1;
    }

    function dateBetween(date, startDate, endDate) {
    	return date >= startDate && date <= endDate;
    }

    function dateContain(date, dateArray) {
    	var result = dateArray.filter(function(value){
    		return new Date(value).toDateString() === date.toDateString();
    	});
    	return result.length !== 0;
    }

    // function dateInfo(date, lang) {
    //     var lang = lang || 'en';
    //     var dateNameArr = [
    //     languageJs[lang].DT_SUNDAY,
    //     languageJs[lang].DT_MONDAY,
    //     languageJs[lang].DT_TUESDAY,
    //     languageJs[lang].DT_WEDNESDAY,
    //     languageJs[lang].DT_THURSDAY,
    //     languageJs[lang].DT_FRIDAY,
    //     languageJs[lang].DT_SATURDAY
    //     ];
    //     var monthNameArr = [
    //     languageJs[lang].DT_JAN,
    //     languageJs[lang].DT_JANUARY,
    //     languageJs[lang].DT_FEBRUARY,
    //     languageJs[lang].DT_MARCH,
    //     languageJs[lang].DT_APRIL,
    //     languageJs[lang].DT_MAY,
    //     languageJs[lang].DT_JUNE,
    //     languageJs[lang].DT_JULY,
    //     languageJs[lang].DT_AUGUST,
    //     languageJs[lang].DT_SEPTEMBER,
    //     languageJs[lang].DT_OCTOBER,
    //     languageJs[lang].DT_NOVEMBER,
    //     languageJs[lang].DT_DECEMBER
    //     ];
    //     var dayOfWeek = date.getDay();
    //     var day = date.getDate();
    //     var month = date.getMonth();
    //     var year = date.getFullYear();
    //     var hours = date.getHours();
    //     var minutes = date.getMinutes();
    //     var seconds = date.getSeconds();
    //     var dayName = dateNameArr[dayOfWeek];
    //     var monthName = monthNameArr[month];

    //     return {
    //         day: day,
    //         month: parseInt(month + 1),
    //         year: year,
    //         hours: hours,
    //         minutes: minutes,
    //         seconds: seconds,
    //         dateString: (day < 10 ? '0' + day : day) + '/' + (parseInt(month + 1) < 10 ? '0' + parseInt(month + 1) : parseInt(month + 1)) + '/' + year,
    //         timeString: (hours < 10 ? '0' + hours : hours) + ':' + (minutes < 10 ? '0' + minutes : minutes),
    //         dayName: dayName,
    //         monthName: monthName,
    //         dayCount: dayCount(date, new Date())
    //     }
    // }

    // function timestampToDate(timestamp){
    //     var date = new Date(timestamp * 1000);
    //     return dateInfo(date);
    // }

    function dateToTimestamp(date){
        return date.getTime() / 1000;
    }

    function isoDateToDate(isoString){
    	var dtstr = isoString;
    	dtstr = dtstr.replace(/\D/g,' ');
    	var arr = dtstr.split(' ');
    	arr[1]--;
    	var result = new Date(Date.UTC(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5]));
    	return result;
    }

    function daysInMonth(month){
    	var date = new Date();
    	return new Date(date.getFullYear(), month, 0).getDate();
    }

    function getAge(birthday) {
    	var today = new Date();
    	var thisYear = 0;
    	if (today.getMonth() < birthday.getMonth()) {
    		thisYear = 1;
    	} else if ((today.getMonth() == birthday.getMonth()) && today.getDate() < birthday.getDate()) {
    		thisYear = 1;
    	}
    	var age = today.getFullYear() - birthday.getFullYear() - thisYear;
    	return age;
    }
})();
/***************************************************
Description: Excel
****************************************************/
var ExcelJs = (function() {
    'use strict';
    return {
        exportExcel: exportExcel,       // Xuất Excel
        testExcel: testExcel,       // Xuất Excel test
    };

    function testExcel(){
        /* original data */
        var data = [
        [1,2,3,0.5,7],
        [true, false, null, "sheetjs"],
        ["foo","bar",new Date("2014-02-19T14:30Z"), "0.3"], 
        ["baz", null, "qux"]
        ];

        var options = {
            type: 'xlsx',
            sheetName: 'SheetJS1',
            fileName: 'dl',
        };
        exportExcel(data, options);
    }

    function exportExcel(data, options){
        options = {
            type: options.type || "xlsx",
            sheetName: options.sheetName || "SheetJS",
            fileName: options.fileName || "test",
        };

        var ws_name = options.sheetName;
        var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
        /* add worksheet to workbook */
        wb.SheetNames.push(ws_name);
        wb.Sheets[ws_name] = ws;
        var wopts = { bookType:options.type, bookSST:false, type:'binary' };
        /* write file */
        var wbout = XLSX.write(wb, wopts);

        /* the saveAs call downloads a file on the local machine */
        saveAs(new Blob([s2ab(wbout)],{type:""}), options.fileName+'.'+options.type)
    }

    function datenum(v, date1904) {
        if(date1904) v+=1462;
        var epoch = Date.parse(v);
        return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
    }

    function sheet_from_array_of_arrays(data, opts) {
        var ws = {};
        var range = {s: {c:10000000, r:10000000}, e: {c:0, r:0 }};
        for(var R = 0; R != data.length; ++R) {
            for(var C = 0; C != data[R].length; ++C) {
                if(range.s.r > R) range.s.r = R;
                if(range.s.c > C) range.s.c = C;
                if(range.e.r < R) range.e.r = R;
                if(range.e.c < C) range.e.c = C;
                var cell = {v: data[R][C] };
                if(cell.v == null) continue;
                var cell_ref = XLSX.utils.encode_cell({c:C,r:R});

                if(typeof cell.v === 'number') cell.t = 'n';
                else if(typeof cell.v === 'boolean') cell.t = 'b';
                else if(cell.v instanceof Date) {
                    cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                    cell.v = datenum(cell.v);
                }
                else cell.t = 's';

                ws[cell_ref] = cell;
            }
        }
        if(range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
        return ws;
    }

    function s2ab(s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
    }

    function Workbook() {
        if(!(this instanceof Workbook)) return new Workbook();
        this.SheetNames = [];
        this.Sheets = {};
    }

})();
/***************************************************
Description: Helpers
****************************************************/
var helperJs = (function() {
    'use strict';
    return {
        detectScrollDirection: detectScrollDirection,       // Bắt sự kiện scroll lên hoặc scroll xuống
        clearFileInput: clearFileInput,                     // Xóa nội dung input["file"]
        isUndefinedNullEmpty: isUndefinedNullEmpty,         // Kiểm tra dữ liệu
        getQueryString: getQueryString,                     // Lấy tham số trên URL
        formatMoney: formatMoney,                           // Định dạng đơn vị tiền tệ
        enterFullScreen: enterFullScreen,                   // Bật chế độ xem toàn màn hình
        exitFullScreen: exitFullScreen,                     // Tắt chế độ xem toàn màn hình
        debounce: debounce,                                 // Trì hoãn thực thi hàm khi hoàn thành thao tác
        throttle: throttle,                                 // Trì hoãn thực thi hàm theo thời gian cố định
        hexToRgb: hexToRgb,                                 // Chuyển đổi màu sắc Hex sang RGBA
        preloader: preloader,                               // Các tài nguyên sẽ được tải trước
        scrollToElement: scrollToElement,                   // Tự động cuộn tới đối tượng chỉ định
        scrollToTop: scrollToTop,                           // Tự động cuộn lên trên
        randomRangeFloat: randomRangeFloat,                 // Tạo số thực ngẫu nhiên
        randomRangeInt: randomRangeInt,                     // Tạo số nguyên ngẫu nhiên
        extend: extend ,                                    // Kế thừa đối tượng
        findObject: findObject ,                            // Tìm đối tượng trong mảng đối tượng
    };

    function findObject(field, value, array){
        function findCherries(fruit) { 
            return fruit[field] === value;
        }

        return array.find(findCherries);
    }

    function detectScrollDirection(){
        var previousScroll = 0;

        $(window).on('scroll', function(event) {
            var currentScroll = $(this).scrollTop();
            if (currentScroll > previousScroll){
                console.log('down');
            } else {
                console.log('up');
            }
            previousScroll = currentScroll;
        });
    }


    function clearFileInput(obj) {
        obj.replaceWith(obj.val('').clone(true));
    }

    function isUndefinedNullEmpty(data) {
        var output = true;
        if(!isNaN(data)){
            output = false;
        } else if(data === null || data === undefined){
            output = true;
        } else {
            for(var key in data) {
                if(data.hasOwnProperty(key)){
                    output = false;
                }
            }
        }
        return output;
    }
    /******************************************************************
    1. Array
    2. Image
    3. Markup
    *******************************************************************/

    function getQueryString(url, name) {
        var a = name.replace(/[\[]/, '\\\[').replace(/[\]]/, '\\\]');
        var regexS = '[\\?&]' + a + '=([^&#]*)';
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        if (results === null) return '';
        else return decodeURIComponent(results[1].replace(/\+/g, ' '));
    }

    function formatMoney(number, places, symbol, thousand, decimal) {
        number = number || 0;
        places = !isNaN(places = Math.abs(places)) ? places : 0;
        symbol = symbol !== undefined ? symbol : '';
        thousand = thousand || '.';
        decimal = decimal || ',';
        var negative = number < 0 ? '-' : '',
        i = parseInt(number = Math.abs(+number || 0).toFixed(places), 10) + '',
        j = (j = i.length) > 3 ? j % 3 : 0;
        return symbol + negative + (j ? i.substr(0, j) + thousand : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + thousand) + (places ? decimal + Math.abs(number - i).toFixed(places).slice(2) : '');
    }

    function enterFullScreen(element) {
        if (element.requestFullscreen) {
            element.requestFullscreen();
        } else if (element.mozRequestFullScreen) {
            element.mozRequestFullScreen();
        } else if (element.webkitRequestFullscreen) {
            element.webkitRequestFullscreen();
        } else if (element.msRequestFullscreen) {
            element.msRequestFullscreen();
        }
    }

    function exitFullScreen() {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
        }
    }

    function debounce(fn, ms) {
        var timer = null;
        return function() {
            var context = this,
            args = arguments;
            clearTimeout(timer);
            timer = setTimeout(function() {
                fn.apply(context, args);
            }, ms);
        };
    }

    function throttle(fn, ms, scope) {
        ms || (ms = 250);
        var last,
        deferTimer;
        return function () {
            var context = scope || this;

            var now = +new Date,
            args = arguments;
            if (last && now < last + ms) {
                clearTimeout(deferTimer);
                deferTimer = setTimeout(function () {
                    last = now;
                    fn.apply(context, args);
                }, ms);
            } else {
                last = now;
                fn.apply(context, args);
            }
        };
    }

    function hexToRgb(hex, opacity){
        var h = hex.replace('#', '');
        h =  h.match(new RegExp('(.{'+h.length/3+'})', 'g'));

        for(var i=0; i<h.length; i++){
            h[i] = parseInt(h[i].length==1? h[i]+h[i]:h[i], 16);
        }

        if (typeof opacity != 'undefined') {
            h.push(opacity);
        }

        return 'rgba('+h.join(',')+')';
    }

    function preloader(fileList, callback){
        var loaded = 0;
        var len = fileList.length;
        if(len){
            for (var i = 0; i < len; i++) {
                var img = new Image();
                img.src = fileList[i];
                img.onload = function(event){
                    check(len);
                    console.info('File loaded: ', event.target.currentSrc);
                };

                img.onerror = function(event){
                    check(len);
                    console.info('Cannot load file: ', event.target.currentSrc);
                };
            };
        } else {
            complete();
        }

        function check(count){
            loaded++;
            if(loaded === count){
                complete();
            }
        }

        function complete(){
            if(typeof callback === 'function'){
                callback();
            }
        }
    }

    function scrollToElement(selector, time, verticalOffset) {
        time = typeof(time) !== 'undefined' ? time : 1000;
        verticalOffset = typeof(verticalOffset) !== 'undefined' ? verticalOffset : 0;
        var offset = $(selector).offset();
        var offsetTop = offset.top + verticalOffset;
        $('html,body').animate({ scrollTop: offsetTop }, time);
    }

    function scrollToTop(time) {
        time = typeof(time) !== 'undefined' ? time : 1000;
        $('html,body').animate({ scrollTop: 0 }, time);
    }

    function randomRangeFloat(min, max) {
        return Math.random() * (max - min + 1) + min;
    }

    function randomRangeInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function extend(a, b){
        for(var key in b){
            if(b.hasOwnProperty(key)){
                a[key] = b[key];
            }
        }
        return a;
    }
})();
(function() {
    'use strict';
    $.fn.bzAccordion = function(autoCollapse, expandFirstItem) {
        var $accord = this.find('.item');
        if (expandFirstItem) {
            $accord.first().find('.question').addClass('expanded');
            $accord.first().find('.answer').show();
        }
        $accord.find('.question').click(function() {
            if ($(this).hasClass('expanded')) {
                $(this).removeClass('expanded');
                $(this).parent().find('.answer').slideUp(200);
            } else {
                if (autoCollapse) {
                    $.each($accord.find('.question'), function(i, o) {
                        $(o).removeClass('expanded');
                        $(o).parent().find('.answer').slideUp(200);
                    });
                }
                $(this).addClass('expanded');
                $(this).parent().find('.answer').slideDown(200);
            }
        });
    };
})();
(function() {
    'use strict';

    /******************************************************************
    Array
    *******************************************************************/
    Array.prototype.getIndexBy = function(name, value) {
        for (var i = 0; i < this.length; i++) {
            if (this[i][name] == value) {
                return i;
            }
        }
        return -1;
    };

    Array.prototype.removeAt = function(index) {
        var b = this.splice(index, 1);
        return b;
    };
    /******************************************************************
    String
    *******************************************************************/
    String.prototype.format = function() {
        var args = arguments;
        return this.replace(/\{\{|\}\}|\{(\d+)\}/g, function(m, n) {
            if (m == '{{') {
                return '{';
            }
            if (m == '}}') {
                return '}';
            }
            return args[n];
        });
    };

    String.prototype.trim = function () {
        return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    };
})();



/***************************************************
Description: Sort algorithms
****************************************************/
var sortJs = (function(){

    return {
        bubble: bubbleSort,
        quick: quickSort,
        merge: mergeSort,
        selection: selectionSort,
        insertion: insertionSort
    };

    function bubbleSort(arr) {
        if (arr.length <= 1) return arr;
        var alen = arr.length;
        for (var i = 0; i < alen; i++) {
            for (var j = 0; j < alen - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    var temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        return arr;
    }

    function quickSort(arr) {
        if (arr.length <= 1) return arr;
        var pivot = Math.floor((arr.length - 1) / 2),
        pivotValue = arr[pivot],
        left = [],
        right = [];
        arr = arr.slice(0, pivot).concat(arr.slice(pivot + 1));
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] < pivotValue) {
                left.push(arr[i]);
            } else {
                right.push(arr[i]);
            }
        }
        return [].concat(quickSort(left), [pivotValue], quickSort(right));
    }

    function mergeSort(arr) {
        if (arr.length <= 1) return arr;
        var mid = Math.floor(arr.length / 2),
        left = arr.slice(0, mid),
        right = arr.slice(mid);

        var merge = function merge(left, right){
            var result = [];
            while (left.length && right.length) {
                if (left[0] < right[0]) {
                    result.push(left.shift());
                } else {
                    result.push(right.shift());
                }
            }
            return result.concat(left).concat(right);
        };
        return merge(mergeSort(left), mergeSort(right));
    }

    function selectionSort(arr) {
        for (var i = 0; i < arr.length; i++) {
            var min = i;
            for (var j = i + 1; j < arr.length; j++) {
                if (arr[j] < arr[min]) {
                    min = j;
                }
            }
            if (min != i) {
                var temp = arr[min];
                arr[min] = arr[i];
                arr[i] = temp;
            }
        }
        return arr;
    }

    function insertionSort(arr) {
        for (var i = 0; i < arr.length; i++) {
            var j = i - 1,
            temp = arr[i];
            while (j >= 0 && arr[j] > temp) {
                arr[j + 1] = arr[j];
                arr[j] = temp;
                j--;
            }
        }
        return arr;
    }
})();
var Storage = (function() {
	'use strict';
	return {
		get: get,
		set: set,
		remove: remove,
		clear: clear
	};

	function get(name) {
		var date = new Date(),
		current = Math.round(+date / 1000),
		storedData = JSON.parse(localStorage.getItem(settingJs.appPrefix + '.' + name)) || {},
		storedTime = storedData.storageExpireTime || 0;

		if (storedTime && storedTime < current) {
			remove(settingJs.appPrefix + '.' + name);
			return undefined;
		} else {
			return storedData.store;
		}
	}

	function set(name, value, seconds) {
		var date = new Date(),
		schedule = Math.round((date.setSeconds(date.getSeconds() + seconds)) / 1000),
		data = JSON.stringify({storageExpireTime: schedule, store: value});
		try {
			localStorage.setItem(settingJs.appPrefix + '.' + name, data);
		} catch (e) {
			if (e == QUOTA_EXCEEDED_ERR) {
				alert('Quota exceeded!');
			}
		}

		return data;
	}

	function remove(name) {
		localStorage.removeItem(settingJs.appPrefix + '.' + name);
	}

	function clear() {
		localStorage.clear();
	}
})();
var Application = (function () {
    'use strict';

    var appName = 'bzApp';
    var appDependencies = [
    'ui.bootstrap',
    'ngSanitize',
    'ngAnimate',
    'ngMessages',
    'ngResource',
    'ui.router',
    'toastr',
    'ngPopup',
    'daterangepicker',
    'angularjs-datetime-picker',
    'ngTable',
    'ngFileUpload'
    ];
    var routers = [];

    angular
    .module(appName, appDependencies)
    .provider('routerHelper', routerHelperProvider)
    .config(config)
    .run(run);

    angular.element(document).ready(function() {
        angular.bootstrap(document, [appName]);
    });

    function registerModule(name) {
        angular.module(appName).requires.push(name);
    }

    function registerRouter(router) {
        routers.push(router);
    }

    function routerHelperProvider($stateProvider, $urlRouterProvider) {
        this.$get = RouterHelper;

        function RouterHelper($state) {
            var hasOtherwise = false;

            return {
                configureStates: configureStates,
                getStates: getStates
            };

            function configureStates(states, otherwisePath) {
                states.forEach(function(state) {
                    state.config.params = state.config.params || {};
                    $stateProvider.state(state.state, state.config);
                });
                if (otherwisePath && !hasOtherwise) {
                    hasOtherwise = true;
                    $urlRouterProvider.otherwise(otherwisePath);
                }
            }

            function getStates() {
                return $state.get();
            }
        }
    }

    function config(
        $qProvider,
        $httpProvider,
        $locationProvider,
        $bzPopupProvider,
        toastrConfig,
        $interpolateProvider,
        $resourceProvider
        ){
        /*fix error (Possibly unhandled rejection) angular > 1.5.5*/
        $qProvider.errorOnUnhandledRejections(false);

        $bzPopupProvider.setMessageTemplate('modules/global-popup/message/view.html');

        angular.extend(toastrConfig, {
            extendedTimeOut: 1000,
            timeOut: 1000,
            newestOnTop: true,
            positionClass: 'toast-bottom-right',
            preventDuplicates: false,
            preventOpenDuplicates: false,
            tapToDismiss: true,
            allowHtml: true,
            closeButton: true,
            target: 'body'
        });

        $interpolateProvider.startSymbol('[[');
        $interpolateProvider.endSymbol(']]');

        // Configs HTML5 API Pushstate
        $locationProvider.html5Mode(false).hashPrefix('!');

        $httpProvider.defaults.withCredentials = true;
        $httpProvider.defaults.headers.post['Content-Type'] = 'application/json; charset=UTF-8';

        // $resourceProvider.defaults.stripTrailingSlashes = false;
    }

    function run(
        routerHelper,
        $rootScope,
        $window,
        $document,
        $state,
        $timeout,
        authSvc,
        notiSvc){
        routerHelper.configureStates(routers, '/');

        angular.element('body').removeClass('hide');

        $rootScope._ = window._;
        $rootScope.socket = io(settingJs.configs.socketUrl);

        // Global variables
        $rootScope.pageData = {};
        $rootScope.noti = {
            dupTotal: 0,
            dupCSale: 0,
            dupCEviction: 0
        };
        
        // Global methods
        $rootScope.pageMethods = {};
        $rootScope.pageMethods.authSvc = authSvc;
        $rootScope.pageMethods.redirect = redirect;

        /*Sự kiện khi muốn update noti*/
        $rootScope.$on('angular-changeNoti', function(data){
            console.log('oopp');
            $rootScope.socket.emit('socket-postNoti',{_sale_usermember: authSvc.getProfile().id});
        });

        /*Khởi tạo socket noti*/
        $rootScope.socket.emit('socket-postNoti',{_sale_usermember: authSvc.getProfile().id});
        $rootScope.socket.on('socket-getNoti', function(data){
            $rootScope.noti = data;
            $rootScope.$apply();
            console.log('ppp',$rootScope.noti);
        });

        /*Sự kiện trạng thái state*/
        $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
            $rootScope.pageData.title = toState.data.title;
            $rootScope.pageData.className = toState.name;
            $rootScope.pageData.menuType = toState.data.menuType;

            /*Update lại thông báo*/
            // $timeout(function(){
            //     notiSvc.getDupContact().then(function(resp){
            //         $rootScope.noti = resp;
            //     });
            // },2000);
        });

        $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
            $window.scrollTop = $document[0].body.scrollTop = $document[0].documentElement.scrollTop = 0;

            $rootScope.pageData.currentState = toState;
            $rootScope.pageData.currentParams = toParams;
        });

        function redirect(state, params, notify){
            $state.go(state, params, notify);
        }
    }

    return {
        registerModule: registerModule,
        registerRouter: registerRouter
    };
})();


;(function(){
	'use strict';

	Application.registerModule('bzUser');

	angular
	.module('bzUser', [])
	.constant('salemanScopes', [
		{name:'Kid', value:'kid'},
		{name:'Work', value:'work'}
		])
	.run(run);

	function run(authSvc){
		
	}
})();
;(function(){
	'use strict';

	Application.registerModule('bzStatistic');

	angular
	.module('bzStatistic', [])
	.run(run);

	function run(authSvc){

	}
})();
;(function(){
	'use strict';

	Application.registerModule('bzSaleContact');

	angular
	.module('bzSaleContact', [])
	.run(run);

	function run(authSvc){

	}
})();
;(function(){
    'use strict';

    Application.registerModule('bzPost');

    angular
    .module('bzPost', []);
})();
;(function(){
	'use strict';

	Application.registerModule('bzDashboard');

	angular
	.module('bzDashboard', [])
	.run(run);

	function run(authSvc){

	}
})();
;(function(){
	'use strict';

	Application.registerModule('bzAuth');

	angular
	.module('bzAuth', [])
	.run(run);

	function run(authSvc){
		
	}
})();
(function(){
	'use strict';

	angular
	.module('bzUser')
	.constant('userRoles', [
		{name: 'Super Admin', value: 'super-admin'},
		{name: 'Admin', value: 'admin'},
		{name: 'User', value: 'user'},
		{name: 'Sale', value: 'sale'}
		]);
})();
(function(){
	'use strict';

	angular
	.module('bzSaleContact')
	.constant('LEANRNER_LEVEL_LIST', [
		{name: "A1",	value: "A1"},
		{name: "A2",	value: "A2"},
		{name: "B1",	value: "B1"},
		{name: "B2",	value: "B2"},
		{name: "C1",	value: "C1"},
		{name: "C2",	value: "C2"},
		])
	.constant('CAREER_LIST', [
		{name: "Hành chính văn phòng", 		value: "Hành chính văn phòng"},
		{name: "Nông lâm nghiệp", 			value: "Nông lâm nghiệp"},
		{name: "Hàng không/Du lịch", 		value: "Hàng không/Du lịch"},
		{name: "Kiến trúc/Xây dựng", 		value: "Kiến trúc/Xây dựng"},
		{name: "Nghệ thuật/Thiết kế", 		value: "Nghệ thuật/Thiết kế"},
		{name: "Ngân hàng", 				value: "Ngân hàng"},
		{name: "Kinh doanh", 				value: "Kinh doanh"},
		{name: "Hóa học/Sinh học", 			value: "Hóa học/Sinh học"},
		{name: "Truyền thông", 				value: "Truyền thông"},
		{name: "Dịch vụ khách hàng", 		value: "Dịch vụ khách hàng"},
		{name: "Giáo dục/Đào tạo", 			value: "Giáo dục/Đào tạo"},
		{name: "Kỹ thuật/Công nghệ", 		value: "Kỹ thuật/Công nghệ"},
		{name: "Môi trường", 				value: "Môi trường"},
		{name: "Xuất nhập khẩu", 			value: "Xuất nhập khẩu"},
		{name: "Tài chính", 				value: "Tài chính"},
		{name: "Ẩm thực", 					value: "Ẩm thực"},
		{name: "Vận tải", 					value: "Vận tải"},
		{name: "Địa chất", 					value: "Địa chất"},
		{name: "Lịch sử", 					value: "Lịch sử"},
		{name: "Khách sạn", 				value: "Khách sạn"},
		{name: "Nhân sự", 					value: "Nhân sự"},
		{name: "Công nghệ thông tin", 		value: "Công nghệ thông tin"},
		{name: "Kế toán/Kiểm toán", 		value: "Kế toán/Kiểm toán"},
		{name: "Marketing", 				value: "Marketing"},
		{name: "Y tế/chăm sóc sức khỏe", 	value: "Y tế/chăm sóc sức khỏe"},
		{name: "Luật", 						value: "Luật"},
		{name: "Vật lý", 					value: "Vật lý"},
		{name: "Bán hàng", 					value: "Bán hàng"},
		{name: "Học sinh", 					value: "Học sinh"},
		{name: "Sinh viên", 				value: "Sinh viên"},
		])
	.constant('BANK_LIST', [
		{name: 'Vietcombank - Ngoại thương Việt Nam', 		value: 'VCB'},
		{name: 'Vietinbank - Công Thương Việt Nam', 		value: 'CTG'},
		{name: 'BIDV - BID - Đầu tư và Phát triển Việt Nam', value: 'BIDV'},
		{name: 'Agribank - Ngân hàng Nông nghiệp và Phát triển Nông thôn VN', value: 'Agribank'},
		{name: 'Techcombank - Kỹ Thương Việt Nam', 			value: 'Techcombank'},
		{name: 'ACB - Ngân hàng Á Châu', 					value: 'ACB'},
		{name: 'Sacombank - Sài Gòn Thương Tín', 			value: 'STB'},
		{name: 'Ngân hàng Chính sách Xã hội Việt Nam', 		value: 'VBSP'},
		{name: 'Ngân hàng Phát triển Việt Nam', 			value: 'VDB'},
		{name: 'Construction Bank - Ngân hàng Xây dựng', 	value: 'CB'},
		{name: 'Ocean Bank - Ngân hàng Đại Dương', 			value: 'Oceanbank'},
		{name: 'Global Petro Bank - Ngân hàng Dầu Khí Toàn Cầu', value: 'GPBank'},
		{name: 'Tien Phong Bank - Ngân hàng Tiên Phong', 	value: 'TPBank'},
		{name: 'DongA Bank - Ngân hàng Đông Á', 			value: 'DAF'},
		{name: 'SeABank - Ngân hàng Đông Nam Á', 			value: 'SeABank'},
		{name: 'An Binh Bank - Ngân hàng An Bình', 			value: 'ABBANK'},
		{name: 'Bac A Bank - Ngân hàng Bắc Á', 				value: 'BacABank'},
		{name: 'Viet Capital Bank - Ngân hàng Bản Việt', 	value: 'VietCapitalBank'},
		{name: 'Maritime Bank - Hàng Hải Việt Nam', 		value: 'MSB'},
		{name: 'KienLongBank - Kiên Long', 					value: 'KienLongBank'},
		{name: 'Nam A Bank - Nam Á', 						value: 'Nam A Bank'},
		{name: 'NCB - Quốc Dân', 							value: 'NCB'},
		{name: 'VPBank - Việt Nam Thịnh Vượng', 			value: 'VPBank'},
		{name: 'HDBank - Phát triển Thành phố Hồ Chí Minh', value: 'HDBank'},
		{name: 'OCB - Phương Đông', 						value: 'OCB'},
		{name: 'Military Bank - Quân đội', 					value: 'MBB'},
		{name: 'PVcom Bank - Đại chúng', 					value: 'PVcom Bank'},
		{name: 'VIBBank - Quốc tế', 						value: 'VIB'},
		{name: 'SCB - Sài Gòn', 							value: 'SCB'},
		{name: 'Saigonbank - Sài Gòn Công Thương', 			value: 'SGB'},
		{name: 'SHB - Sài Gòn-Hà Nội', 						value: 'SHB'},
		{name: 'VietABank - Việt Á', 						value: 'VAB'},
		{name: 'BaoVietBank - Bảo Việt', 					value: 'BVB'},
		{name: 'VietBank - Việt Nam Thương Tín', 			value: 'VietBank'},
		{name: 'PG Bank - Xăng dầu Petrolimex', 			value: 'PG Bank'},
		{name: 'Eximbank - Xuất Nhập khẩu Việt Nam', 		value: 'EIB'},
		{name: 'LienVietPostBank - Bưu điện Liên Việt', 	value: 'LPB'},
		{name: 'Ngân hàng TNHH một thành viên ANZ (Việt Nam)', value: 'Australia And Newzealand Bank'},
		{name: 'Deutsche Bank Việt Nam', 					value: 'ADeutsche Bank AG, Vietnam'},
		{name: 'Ngân hàng Citibank Việt Nam', 				value: 'Citibank'},
		{name: 'HSBC - Ngân hàng TNHH một thành viên HSBC (Việt Nam)', value: 'HSBC'},
		{name: 'Standard Chartered (Việt Nam)', 			value: 'Standard Chartered'},
		{name: 'Ngân hàng TNHH MTV Shinhan Việt Nam', 		value: 'Shinhan Vietnam Bank Limited - SHBVN'},
		{name: 'Ngân hàng Hong Leong Việt Nam', 			value: 'Hong Leong Bank Vietnam Limited - HLBVN'},
		{name: 'BIDC - Ngân hàng Đầu tư và Phát triển Campuchia', value: 'BIDC'},
		{name: 'PBBVN - Public Bank Việt Nam', 				value: 'PBBVN'},
		{name: 'UOB - Ngân hàng United Overseas Bank tại Việt Nam', value: 'UOB'},
		{name: 'IVB - Ngân hàng TNHH Indovina', 			value: 'IVB'},
		{name: 'VRB - Ngân hàng Việt - Nga', 				value: 'VRB'},
		{name: 'VSB - Ngân hàng Việt - Thái', 				value: 'VSB'},
		])
	.constant('LEVEL_LIST', [
		{value: '1_BGLS', 		name: "Bận gọi lại sau", 			group: 'Level 1'},
		{value: '1_KLLD', 		name: "Không liên lạc được", 		group: 'Level 1'},
		{value: '1_KNM', 		name: "Không nhấc máy.", 			group: 'Level 1'},
		{value: '1_SS', 		name: "Sai số.", 					group: 'Level 1'},
		{value: '1_KDDT', 		name: "Không đúng đối tượng.",		group: 'Level 1'},

		{value: '2_DDTLLD', 	name: "Đúng đối tượng, liên lạc được", 					group: 'Level 2'},
		{value: '2_DDTLLDCCNN', name: "Đúng đối tượng, liên lạc đc, nhưng chưa có nhu cầu tại thời điểm hiện tại", 	group: 'Level 2'},
		{value: '2_QT', 		name: "Quan tâm nhưng cần thời gian tham khảo thêm", 	group: 'Level 2'},
		{value: '2_KQT', 		name: "Không quan tâm từ chối tiếp nhận thông tin", 	group: 'Level 2'},

		{value: '3_DYT', 		name: "Đồng ý test", 											group: 'Level 3'},
		{value: '3_QTVCL', 		name: "Quan tâm và có lịch hẹn cụ thể trực tiếp tại VP", 		group: 'Level 3'},
		{value: '3_QTVCLKCT', 	name: "Quan tâm và có lịch hẹn nhưng không cụ thể", 			group: 'Level 3'},
		{value: '3_QTVCLCT', 	name: "Quan tâm và có lịch hẹn cụ thể trực tiếp tại văn phòng", group: 'Level 3'},
		{value: '3_CHNKD', 		name: "Có hẹn nhưng không đến hoặc chưa làm test", 				group: 'Level 3'},

		{value: '4_CBDD', 		name: "Contact biết đầy đủ thông tin",				group: 'Level 4'},
		{value: '4_CDLVP', 		name: "Contact đã lên văn phòng",					group: 'Level 4'},
		{value: '4_CDHT', 		name: "Contact đã hoàn thiện 1 trong 2 bài test",	group: 'Level 4'},

		{value: '5_CDHTT', 		name: "Contact đã hoàn thành bài test phỏng vấn và bài kiểm tra",	group: 'Level 5'},

		{value: '6_DDNLTCB', 	name: "Đồng ý nhận lộ trình từ cơ bản nhất",	group: 'Level 6'},
		{value: '6_DNLTHH', 	name: "Đã nhận lộ trình học tập",				group: 'Level 6'},
		{value: '6_CHCK', 		name: "Có hẹn chuyển khoản",					group: 'Level 6'},

		{value: '7_DDMP', 		name: "Đã đóng một phần học phí",				group: 'Level 7'},

		{value: '8_DNH', 		name: "Đã nhập học",							group: 'Level 8'},
		])
	.constant('CARESTATUS_LIST', [
		{value: '1_UDF', 		name: "Chưa xác định"},
		{value: '2_TTCS', 		name: "Tiếp tục chăm sóc"},
		{value: '3_CSSMTG', 	name: "Chăm sóc sau một thời gian nữa"},
		{value: '4_KNGN', 		name: "Không nên gọi nữa"},
		])
	.constant('QUALITYCALL_LIST', [
		{value: '1_KSS', 		name: "Không sẵn sàng tiếp nhận cuộc gọi"},
		{value: '2_DKNKN', 		name: "Đăng ký nhưng không nhớ"},
		{value: '3_KHHTT', 		name: "Không hiểu học trực tuyến là gì"},
		{value: '4_DLSV', 		name: "Đang là sinh viên"},
		{value: '5_DKCC', 		name: "Đăng ký cho con"},
		{value: '6_NLDCCC', 	name: "Nghĩ là được cấp chứng chỉ"},
		])
	.constant('SOURCE_LIST', [
		{value: 'MTO', 		name: "Marketing online"},
		{value: 'CTC', 		name: "Contact collecter"},
		{value: 'CTH', 		name: "Contact hotline"},
		{value: 'CTT', 		name: "Contact tư vấn tuyển sinh thu thập, học viên khác giới thiệu"},
		]);
})();

(function(){
	'use strict';

	angular
	.module('bzApp')
	/*https://github.com/linhmtran168/vietnam-gis-crawler/edit/master/data.json*/
	.constant('VIETNAM_MAP',[
	{  
		"1":{  
			"name":"Thành phố Cần Thơ",
			"districts":{  
				"66":"Huyện Cờ Đỏ",
				"67":"Huyện Phong Điền",
				"68":"Huyện Thới Lai",
				"69":"Huyện Vĩnh Thạnh",
				"70":"Quận Bình Thủy",
				"71":"Quận Cái Răng",
				"72":"Quận Ninh Kiều",
				"73":"Quận Ô Môn",
				"74":"Quận Thốt Nốt"
			}
		},
		"2":{  
			"name":"Thành phố Đà Nẵng",
			"districts":{  
				"76":"Huyện Hòa Vang",
				"77":"Huyện Hoàng Sa",
				"78":"Quận Cẩm Lệ",
				"79":"Quận Hải Châu",
				"80":"Quận Liên Chiểu",
				"81":"Quận Ngũ Hành Sơn",
				"82":"Quận Sơn Trà",
				"83":"Quận Thanh Khê"
			}
		},
		"3":{  
			"name":"Thành phố Hà Nội",
			"districts":{  
				"85":"Huyện Ba Vì",
				"86":"Huyện Chương Mỹ",
				"87":"Huyện Đan Phượng",
				"88":"Huyện Đông Anh",
				"89":"Huyện Gia Lâm",
				"90":"Huyện Hoài Đức",
				"91":"Huyện Mê Linh",
				"92":"Huyện Mỹ Đức",
				"93":"Huyện Phú Xuyên",
				"94":"Huyện Phúc Thọ",
				"95":"Huyện Quốc Oai",
				"96":"Huyện Sóc Sơn",
				"97":"Huyện Thạch Thất",
				"98":"Huyện Thanh Oai",
				"99":"Huyện Thanh Trì",
				"100":"Huyện Thường Tín",
				"101":"Huyện Từ Liêm",
				"102":"Huyện ứng Hòa",
				"103":"Quận Ba Đình",
				"104":"Quận Cầu Giấy",
				"105":"Quận Đống Đa",
				"106":"Quận Hà Đông",
				"107":"Quận Hai Bà Trưng",
				"108":"Quận Hoàn Kiếm",
				"109":"Quận Hoàng Mai",
				"110":"Quận Long Biên",
				"111":"Quận Tây Hồ",
				"112":"Quận Thanh Xuân",
				"113":"Thị xã Sơn Tây"
			}
		},
		"4":{  
			"name":"Thành phố Hải Phòng",
			"districts":{  
				"115":"Huyện An Dương",
				"116":"Huyện An Lão",
				"117":"Huyện Bạch Long Vĩ",
				"118":"Huyện Cát Hải",
				"119":"Huyện Kiến Thụy",
				"120":"Huyện Thủy Nguyên",
				"121":"Huyện Tiên Lãng",
				"122":"Huyện Vĩnh Bảo",
				"123":"Quận Đồ Sơn",
				"124":"Quận Dương Kinh",
				"125":"Quận Hải An",
				"126":"Quận Hồng Bàng",
				"127":"Quận Kiến An",
				"128":"Quận Lê Chân",
				"129":"Quận Ngô Quyền"
			}
		},
		"5":{  
			"name":"Thành phố Hồ Chí Minh",
			"districts":{  
				"131":"Huyện Bình Chánh",
				"132":"Huyện Cần Giờ",
				"133":"Huyện Củ Chi",
				"134":"Huyện Hóc Môn",
				"135":"Huyện Nhà Bè",
				"136":"Quận 1",
				"137":"Quận 10",
				"138":"Quận 11",
				"139":"Quận 12",
				"140":"Quận 2",
				"141":"Quận 3",
				"142":"Quận 4",
				"143":"Quận 5",
				"144":"Quận 6",
				"145":"Quận 7",
				"146":"Quận 8",
				"147":"Quận 9",
				"148":"Quận Bình Tân",
				"149":"Quận Bình Thạnh",
				"150":"Quận Gò Vấp",
				"151":"Quận Phú Nhuận",
				"152":"Quận Tân Bình",
				"153":"Quận Tân Phú",
				"154":"Quận Thủ Đức"
			}
		},
		"6":{  
			"name":"Tỉnh An Giang",
			"districts":{  
				"155":"Huyện An Phú",
				"156":"Huyện Châu Phú",
				"157":"Huyện Châu Thành",
				"158":"Huyện Chợ Mới",
				"159":"Huyện Phú Tân",
				"160":"Huyện Thoại Sơn",
				"161":"Huyện Tịnh Biên",
				"162":"Huyện Tri Tôn",
				"163":"Thành phố Long Xuyên",
				"164":"Thị xã Châu Đốc",
				"165":"Thị xã Tân Châu"
			}
		},
		"7":{  
			"name":"Tỉnh Bà Rịa-Vũng Tàu",
			"districts":{  
				"166":"Huyện Châu Đức",
				"167":"Huyện Côn Đảo",
				"168":"Huyện Đất Đỏ",
				"169":"Huyện Long Điền",
				"170":"Huyện Tân Thành",
				"171":"Huyện Xuyên Mộc",
				"172":"Thành phố Vũng Tàu",
				"173":"Thị xã Bà Rịa"
			}
		},
		"8":{  
			"name":"Tỉnh Bắc Giang",
			"districts":{  
				"174":"Huyện Hiệp Hòa",
				"175":"Huyện Lạng Giang",
				"176":"Huyện Lục Nam",
				"177":"Huyện Lục Ngạn",
				"178":"Huyện Sơn Động",
				"179":"Huyện Tân Yên",
				"180":"Huyện Việt Yên",
				"181":"Huyện Yên Dũng",
				"182":"Huyện Yên Thế",
				"183":"Thành phố Bắc Giang"
			}
		},
		"9":{  
			"name":"Tỉnh Bắc Kạn",
			"districts":{  
				"184":"Huyện Ba Bể",
				"185":"Huyện Bạch Thông",
				"186":"Huyện Chợ Đồn",
				"187":"Huyện Chợ Mới",
				"188":"Huyện Na Rì",
				"189":"Huyện Ngân Sơn",
				"190":"Huyện Pác Nặm",
				"191":"Thị xã Bắc Kạn"
			}
		},
		"10":{  
			"name":"Tỉnh Bạc Liêu",
			"districts":{  
				"192":"Huyện Đông Hải",
				"193":"Huyện Giá Rai",
				"194":"Huyện Hòa Bình",
				"195":"Huyện Hồng Dân",
				"196":"Huyện Phước Long",
				"197":"Huyện Vĩnh Lợi",
				"198":"Thành Phố Bạc Liêu"
			}
		},
		"11":{  
			"name":"Tỉnh Bắc Ninh",
			"districts":{  
				"199":"Huyện Gia Bình",
				"200":"Huyện Lương Tài",
				"201":"Huyện Quế Võ",
				"202":"Huyện Thuận Thành",
				"203":"Huyện Tiên Du",
				"204":"Huyện Yên Phong",
				"205":"Thành phố Bắc Ninh",
				"206":"Thị xã Từ Sơn"
			}
		},
		"12":{  
			"name":"Tỉnh Bến Tre",
			"districts":{  
				"207":"Huyện Ba Tri",
				"208":"Huyện Bình Đại",
				"209":"Huyện Châu Thành",
				"210":"Huyện Chợ Lách",
				"211":"Huyện Giồng Trôm",
				"212":"Huyện Mỏ Cày Bắc",
				"213":"Huyện Mỏ Cày Nam",
				"214":"Huyện Thạnh Phú",
				"215":"Thành phố Bến Tre"
			}
		},
		"13":{  
			"name":"Tỉnh Bình Định",
			"districts":{  
				"216":"Huyện An Lão",
				"217":"Huyện An Nhơn",
				"218":"Huyện Hoài  Ân",
				"219":"Huyện Hoài Nhơn",
				"220":"Huyện Phù Mỹ",
				"221":"Huyện Phù cát",
				"222":"Huyện Tây Sơn",
				"223":"Huyện Tuy Phước",
				"224":"Huyện Vân Canh",
				"225":"Huyện Vĩnh Thạnh",
				"226":"Thành phố Quy Nhơn"
			}
		},
		"14":{  
			"name":"Tỉnh Bình Dương",
			"districts":{  
				"227":"Huyện Bến Cát",
				"228":"Huyện Dầu Tiếng",
				"229":"Huyện Dĩ An",
				"230":"Huyện Phú Giáo",
				"231":"Huyện Tân Uyên",
				"232":"Huyện Thuận An",
				"233":"Thị xã Thủ Dầu Một"
			}
		},
		"15":{  
			"name":"Tỉnh Bình Phước",
			"districts":{  
				"234":"Huyện Bù Đăng",
				"235":"Huyện Bù Đốp",
				"236":"Huyện Bù Gia Mập",
				"237":"Huyện Chơn Thành",
				"238":"Huyện Đồng Phú",
				"239":"Huyện Hớn Quản",
				"240":"Huyện Lộc Ninh",
				"241":"Thị xã Bình Long",
				"242":"Thị xã Đồng Xoài",
				"243":"Thị xã Phước Long"
			}
		},
		"16":{  
			"name":"Tỉnh Bình Thuận",
			"districts":{  
				"244":"Huyện  Đức Linh",
				"245":"Huyện Bắc Bình",
				"246":"Huyện Hàm Tân",
				"247":"Huyện Hàm Thuận Bắc",
				"248":"Huyện Hàm Thuận Nam",
				"249":"Huyện Phú Qúi",
				"250":"Huyện Tánh Linh",
				"251":"Huyện Tuy Phong",
				"252":"Thành phố Phan Thiết",
				"253":"Thị xã La Gi"
			}
		},
		"17":{  
			"name":"Tỉnh Cà Mau",
			"districts":{  
				"254":"Huyện Cái Nước",
				"255":"Huyện Đầm Dơi",
				"256":"Huyện Năm Căn",
				"257":"Huyện Ngọc Hiển",
				"258":"Huyện Phú Tân",
				"259":"Huyện Thới Bình",
				"260":"Huyện Trần Văn Thời",
				"261":"Huyện U Minh",
				"262":"Thành phố Cà Mau"
			}
		},
		"18":{  
			"name":"Tỉnh Cao Bằng",
			"districts":{  
				"263":"Huyện Bảo Lạc",
				"264":"Huyện Bảo Lâm",
				"265":"Huyện Hạ Lang",
				"266":"Huyện Hà Quảng",
				"267":"Huyện Hòa An",
				"268":"Huyện Nguyên Bình",
				"269":"Huyện Phục Hòa",
				"270":"Huyện Quảng Uyên",
				"271":"Huyện Thạch An",
				"272":"Huyện Thông Nông",
				"273":"Huyện Trà Lĩnh",
				"274":"Huyện Trùng Khánh",
				"275":"Thị xã Cao Bằng"
			}
		},
		"19":{  
			"name":"Tỉnh Đắk Lắk",
			"districts":{  
				"276":"Huyện Buôn Đôn",
				"277":"Huyện Cư Kuin",
				"278":"Huyện Cư MGar",
				"279":"Huyện Ea Kar",
				"280":"Huyện Ea Súp",
				"281":"Huyện EaHLeo",
				"282":"Huyện Krông Ana",
				"283":"Huyện Krông Bông",
				"284":"Huyện Krông Búk",
				"285":"Huyện Krông Năng",
				"286":"Huyện Krông Pắc",
				"287":"Huyện Lắk",
				"288":"Huyện MDrắk",
				"289":"Thành phố Buôn Ma Thuột",
				"290":"Thị xã Buôn Hồ"
			}
		},
		"20":{  
			"name":"Tỉnh Đắk Nông",
			"districts":{  
				"291":"Huyện Cư Jút",
				"292":"Huyện Đắk GLong",
				"293":"Huyện Đắk Mil",
				"294":"Huyện Đắk RLấp",
				"295":"Huyện Đắk Song",
				"296":"Huyện KRông Nô",
				"297":"Huyện Tuy Đức",
				"298":"Thị xã Gia Nghĩa"
			}
		},
		"21":{  
			"name":"Tỉnh Điện Biên",
			"districts":{  
				"299":"Huyện Điện Biên",
				"300":"Huyện Điện Biên Đông",
				"301":"Huyện Mường Chà",
				"302":"Huyện Mương Nhé",
				"303":"Huyện Mường ảng",
				"304":"Huyện Tủa Chùa",
				"305":"Huyện Tuần Giáo",
				"306":"Thành phố Điện Biên phủ",
				"307":"Thị xã Mường Lay"
			}
		},
		"22":{  
			"name":"Tỉnh Đồng Nai",
			"districts":{  
				"308":"Huyện Cẩm Mỹ",
				"309":"Huyện Định Quán",
				"310":"Huyện Long Thành",
				"311":"Huyện Nhơn Trạch",
				"312":"Huyện Tân Phú",
				"313":"Huyện Thống Nhất",
				"314":"Huyện Trảng Bom",
				"315":"Huyện Vĩnh Cửu",
				"316":"Huyện Xuân Lộc",
				"317":"Thành phố Biên Hòa",
				"318":"Thị xã Long Khánh"
			}
		},
		"23":{  
			"name":"Tỉnh Đồng Tháp",
			"districts":{  
				"319":"Huyện Cao Lãnh",
				"320":"Huyện Châu Thành",
				"321":"Huyện Hồng Ngự",
				"322":"Huyện Lai Vung",
				"323":"Huyện Lấp Vò",
				"324":"Huyện Tam Nông",
				"325":"Huyện Tân Hồng",
				"326":"Huyện Thanh Bình",
				"327":"Huyện Tháp Mười",
				"328":"Thành phố Cao Lãnh",
				"329":"Thị xã Hồng Ngự",
				"330":"Thị xã Sa Đéc"
			}
		},
		"24":{  
			"name":"Tỉnh Gia Lai",
			"districts":{  
				"331":"Huyện Chư Păh",
				"332":"Huyện Chư Pưh",
				"333":"Huyện Chư Sê",
				"334":"Huyện ChưPRông",
				"335":"Huyện Đăk Đoa",
				"336":"Huyện Đăk Pơ",
				"337":"Huyện Đức Cơ",
				"338":"Huyện Ia Grai",
				"339":"Huyện Ia Pa",
				"340":"Huyện KBang",
				"341":"Huyện KBang",
				"342":"Huyện Kông Chro",
				"343":"Huyện Krông Pa",
				"344":"Huyện Mang Yang",
				"345":"Huyện Phú Thiện",
				"346":"Thành phố Plei Ku",
				"347":"Thị xã AYun Pa",
				"348":"Thị xã An Khê"
			}
		},
		"25":{  
			"name":"Tỉnh Hà Giang",
			"districts":{  
				"349":"Huyện Bắc Mê",
				"350":"Huyện Bắc Quang",
				"351":"Huyện Đồng Văn",
				"352":"Huyện Hoàng Su Phì",
				"353":"Huyện Mèo Vạc",
				"354":"Huyện Quản Bạ",
				"355":"Huyện Quang Bình",
				"356":"Huyện Vị Xuyên",
				"357":"Huyện Xín Mần",
				"358":"Huyện Yên Minh",
				"359":"Thành Phố Hà Giang"
			}
		},
		"26":{  
			"name":"Tỉnh Hà Nam",
			"districts":{  
				"360":"Huyện Bình Lục",
				"361":"Huyện Duy Tiên",
				"362":"Huyện Kim Bảng",
				"363":"Huyện Lý Nhân",
				"364":"Huyện Thanh Liêm",
				"365":"Thành phố Phủ Lý"
			}
		},
		"27":{  
			"name":"Tỉnh Hà Tĩnh",
			"districts":{  
				"366":"Huyện Cẩm Xuyên",
				"367":"Huyện Can Lộc",
				"368":"Huyện Đức Thọ",
				"369":"Huyện Hương Khê",
				"370":"Huyện Hương Sơn",
				"371":"Huyện Kỳ Anh",
				"372":"Huyện Lộc Hà",
				"373":"Huyện Nghi Xuân",
				"374":"Huyện Thạch Hà",
				"375":"Huyện Vũ Quang",
				"376":"Thành phố Hà Tĩnh",
				"377":"Thị xã Hồng Lĩnh"
			}
		},
		"28":{  
			"name":"Tỉnh Hải Dương",
			"districts":{  
				"378":"Huyện Bình Giang",
				"379":"Huyện Cẩm Giàng",
				"380":"Huyện Gia Lộc",
				"381":"Huyện Kim Thành",
				"382":"Huyện Kinh Môn",
				"383":"Huyện Nam Sách",
				"384":"Huyện Ninh Giang",
				"385":"Huyện Thanh Hà",
				"386":"Huyện Thanh Miện",
				"387":"Huyện Tứ Kỳ",
				"388":"Thành phố Hải Dương",
				"389":"Thị xã Chí Linh"
			}
		},
		"29":{  
			"name":"Tỉnh Hậu Giang",
			"districts":{  
				"390":"Huyện Châu Thành",
				"391":"Huyện Châu Thành A",
				"392":"Huyện Long Mỹ",
				"393":"Huyện Phụng Hiệp",
				"394":"Huyện Vị Thủy",
				"395":"Thành Phố Vị Thanh",
				"396":"Thị xã Ngã Bảy"
			}
		},
		"30":{  
			"name":"Tỉnh Hòa Bình",
			"districts":{  
				"397":"Huyện Cao Phong",
				"398":"Huyện Đà Bắc",
				"399":"Huyện Kim Bôi",
				"400":"Huyện Kỳ Sơn",
				"401":"Huyện Lạc Sơn",
				"402":"Huyện Lạc Thủy",
				"403":"Huyện Lương Sơn",
				"404":"Huyện Mai Châu",
				"405":"Huyện Tân Lạc",
				"406":"Huyện Yên Thủy",
				"407":"Thành phố Hòa Bình"
			}
		},
		"31":{  
			"name":"Tỉnh Hưng Yên",
			"districts":{  
				"408":"Huyện Ân Thi",
				"409":"Huyện Khoái Châu",
				"410":"Huyện Kim Động",
				"411":"Huyện Mỹ Hào",
				"412":"Huyện Phù Cừ",
				"413":"Huyện Tiên Lữ",
				"414":"Huyện Văn Giang",
				"415":"Huyện Văn Lâm",
				"416":"Huyện Yên Mỹ",
				"417":"Thành phố Hưng Yên"
			}
		},
		"32":{  
			"name":"Tỉnh Khánh Hòa",
			"districts":{  
				"418":"Huyện Cam Lâm",
				"419":"Huyện Diên Khánh",
				"420":"Huyện Khánh Sơn",
				"421":"Huyện Khánh Vĩnh",
				"422":"Huyện Ninh Hòa",
				"423":"Huyện Trường Sa",
				"424":"Huyện Vạn Ninh",
				"425":"Thành phố Nha Trang",
				"426":"Thị xã Cam Ranh"
			}
		},
		"33":{  
			"name":"Tỉnh Kiên Giang",
			"districts":{  
				"427":"Huyện An Biên",
				"428":"Huyện An Minh",
				"429":"Huyện Châu Thành",
				"430":"Huyện Giang Thành",
				"431":"Huyện Giồng Riềng",
				"432":"Huyện Gò Quao",
				"433":"Huyện Hòn Đất",
				"434":"Huyện Kiên Hải",
				"435":"Huyện Kiên Lương",
				"436":"Huyện Phú Quốc",
				"437":"Huyện Tân Hiệp",
				"438":"Huyện U Minh Thượng",
				"439":"Huyện Vĩnh Thuận",
				"440":"Thành phố Rạch Giá",
				"441":"Thị xã Hà Tiên"
			}
		},
		"34":{  
			"name":"Tỉnh Kon Tum",
			"districts":{  
				"442":"Huyện Đắk Glei",
				"443":"Huyện Đắk Hà",
				"444":"Huyện Đắk Tô",
				"445":"Huyện Kon Plông",
				"446":"Huyện Kon Rẫy",
				"447":"Huyện Ngọc Hồi",
				"448":"Huyện Sa Thầy",
				"449":"Huyện Tu Mơ Rông",
				"450":"Thành phố Kon Tum"
			}
		},
		"35":{  
			"name":"Tỉnh Lai Châu",
			"districts":{  
				"451":"Huyện Mường Tè",
				"452":"Huyện Phong Thổ",
				"453":"Huyện Sìn Hồ",
				"454":"Huyện Tam Đường",
				"455":"Huyện Tân Uyên",
				"456":"Huyện Than Uyên",
				"457":"Thị xã Lai Châu"
			}
		},
		"36":{  
			"name":"Tỉnh Lâm Đồng",
			"districts":{  
				"458":"Huyện Bảo Lâm",
				"459":"Huyện Cát Tiên",
				"460":"Huyện Đạ Huoai",
				"461":"Huyện Đạ Tẻh",
				"462":"Huyện Đam Rông",
				"463":"Huyện Di Linh",
				"464":"Huyện Đơn Dương",
				"465":"Huyện Đức Trọng",
				"466":"Huyện Lạc Dương",
				"467":"Huyện Lâm Hà",
				"468":"Thành phố Bảo Lộc",
				"469":"Thành phố Đà Lạt"
			}
		},
		"37":{  
			"name":"Tỉnh Lạng Sơn",
			"districts":{  
				"470":"Huyện Bắc Sơn",
				"471":"Huyện Bình Gia",
				"472":"Huyện Cao Lộc",
				"473":"Huyện Chi Lăng",
				"474":"Huyện Đình Lập",
				"475":"Huyện Hữu Lũng",
				"476":"Huyện Lộc Bình",
				"477":"Huyện Tràng Định",
				"478":"Huyện Văn Lãng",
				"479":"Huyện Văn Quan",
				"480":"Thành phố Lạng Sơn"
			}
		},
		"38":{  
			"name":"Tỉnh Lào Cai",
			"districts":{  
				"481":"Huyện Bắc Hà",
				"482":"Huyện Bảo Thắng",
				"483":"Huyện Bảo Yên",
				"484":"Huyện Bát Xát",
				"485":"Huyện Mường Khương",
				"486":"Huyện Sa Pa",
				"487":"Huyện Si Ma Cai",
				"488":"Huyện Văn Bàn",
				"489":"Thành phố Lào Cai"
			}
		},
		"39":{  
			"name":"Tỉnh Long An",
			"districts":{  
				"490":"Huyện Bến Lức",
				"491":"Huyện Cần Đước",
				"492":"Huyện Cần Giuộc",
				"493":"Huyện Châu Thành",
				"494":"Huyện Đức Hòa",
				"495":"Huyện Đức Huệ",
				"496":"Huyện Mộc Hóa",
				"497":"Huyện Tân Hưng",
				"498":"Huyện Tân Thạnh",
				"499":"Huyện Tân Trụ",
				"500":"Huyện Thạnh Hóa",
				"501":"Huyện Thủ Thừa",
				"502":"Huyện Vĩnh Hưng",
				"503":"Thành phố Tân An"
			}
		},
		"40":{  
			"name":"Tỉnh Nam Định",
			"districts":{  
				"504":"Huyện Giao Thủy",
				"505":"Huyện Hải Hậu",
				"506":"Huyện Mỹ Lộc",
				"507":"Huyện Nam Trực",
				"508":"Huyện Nghĩa Hưng",
				"509":"Huyện Trực Ninh",
				"510":"Huyện Vụ Bản",
				"511":"Huyện Xuân Trường",
				"512":"Huyện ý Yên",
				"513":"Thành phố Nam Định"
			}
		},
		"41":{  
			"name":"Tỉnh Nghệ An",
			"districts":{  
				"514":"Huyện Anh Sơn",
				"515":"Huyện Con Cuông",
				"516":"Huyện Diễn Châu",
				"517":"Huyện Đô Lương",
				"518":"Huyện Hưng Nguyên",
				"519":"Huyện Kỳ Sơn",
				"520":"Huyện Nam Đàn",
				"521":"Huyện Nghi Lộc",
				"522":"Huyện Nghĩa Đàn",
				"523":"Huyện Quế Phong",
				"524":"Huyện Quỳ Châu",
				"525":"Huyện Quỳ Hợp",
				"526":"Huyện Quỳnh Lưu",
				"527":"Huyện Tân Kỳ",
				"528":"Huyện Thanh Chương",
				"529":"Huyện Tương Dương",
				"530":"Huyện Yên Thành",
				"531":"Thành phố Vinh",
				"532":"Thị xã Cửa Lò",
				"533":"Thị xã Thái Hòa"
			}
		},
		"42":{  
			"name":"Tỉnh Ninh Bình",
			"districts":{  
				"534":"Huyện Gia Viễn",
				"535":"Huyện Hoa Lư",
				"536":"Huyện Kim Sơn",
				"537":"Huyện Nho Quan",
				"538":"Huyện Yên Khánh",
				"539":"Huyện Yên Mô",
				"540":"Thành phố Ninh Bình",
				"541":"Thị xã Tam Điệp"
			}
		},
		"43":{  
			"name":"Tỉnh Ninh Thuận",
			"districts":{  
				"542":"Huyên Bác ái",
				"543":"Huyện Ninh Hải",
				"544":"Huyện Ninh Phước",
				"545":"Huyện Ninh Sơn",
				"546":"Huyện Thuận Bắc",
				"547":"Huyện Thuận Nam",
				"548":"Thành phố Phan Rang-Tháp Chàm"
			}
		},
		"44":{  
			"name":"Tỉnh Phú Thọ",
			"districts":{  
				"549":"Huyện Cẩm Khê",
				"550":"Huyện Đoan Hùng",
				"551":"Huyện Hạ Hòa",
				"552":"Huyện Lâm Thao",
				"553":"Huyện Phù Ninh",
				"554":"Huyện Tam Nông",
				"555":"Huyện Tân Sơn",
				"556":"Huyện Thanh Ba",
				"557":"Huyện Thanh Sơn",
				"558":"Huyện Thanh Thủy",
				"559":"Huyện Yên Lập",
				"560":"Thành phố Việt Trì",
				"561":"Thị xã Phú Thọ"
			}
		},
		"45":{  
			"name":"Tỉnh Phú Yên",
			"districts":{  
				"562":"Huyện Đông Hòa",
				"563":"Huyện Đồng Xuân",
				"564":"Huyện Phú Hòa",
				"565":"Huyện Sơn Hòa",
				"566":"Huyện Sông Hinh",
				"567":"Huyện Tây Hòa",
				"568":"Huyện Tuy An",
				"569":"Thành phố Tuy Hòa",
				"570":"Thị xã Sông Cầu"
			}
		},
		"46":{  
			"name":"Tỉnh Quảng Bình",
			"districts":{  
				"571":"Huyện Bố Trạch",
				"572":"Huyện Lệ Thủy",
				"573":"Huyện MinhHoá",
				"574":"Huyện Quảng Ninh",
				"575":"Huyện Quảng Trạch",
				"576":"Huyện Tuyên Hoá",
				"577":"Thành phố Đồng Hới"
			}
		},
		"47":{  
			"name":"Tỉnh Quảng Nam",
			"districts":{  
				"578":"Huyện Bắc Trà My",
				"579":"Huyện Đại Lộc",
				"580":"Huyện Điện Bàn",
				"581":"Huyện Đông Giang",
				"582":"Huyện Duy Xuyên",
				"583":"Huyện Hiệp Đức",
				"584":"Huyện Nam Giang",
				"585":"Huyện Nam Trà My",
				"586":"Huyện Nông Sơn",
				"587":"Huyện Núi Thành",
				"588":"Huyện Phú Ninh",
				"589":"Huyện Phước Sơn",
				"590":"Huyện Quế Sơn",
				"591":"Huyện Tây Giang",
				"592":"Huyện Thăng Bình",
				"593":"Huyện Tiên Phước",
				"594":"Thành phố Hội An",
				"595":"Thành phố Tam Kỳ"
			}
		},
		"48":{  
			"name":"Tỉnh Quảng Ngãi",
			"districts":{  
				"596":"Huyện Ba Tơ",
				"597":"Huyện Bình Sơn",
				"598":"Huyện Đức Phổ",
				"599":"Huyện Lý sơn",
				"600":"Huyện Minh Long",
				"601":"Huyện Mộ Đức",
				"602":"Huyện Nghĩa Hành",
				"603":"Huyện Sơn Hà",
				"604":"Huyện Sơn Tây",
				"605":"Huyện Sơn Tịnh",
				"606":"Huyện Tây Trà",
				"607":"Huyện Trà Bồng",
				"608":"Huyện Tư Nghĩa",
				"609":"Thành phố Quảng Ngãi"
			}
		},
		"49":{  
			"name":"Tỉnh Quảng Ninh",
			"districts":{  
				"610":"Huyện Ba Chẽ",
				"611":"Huyện Bình Liêu",
				"612":"Huyện Cô Tô",
				"613":"Huyện Đầm Hà",
				"614":"Huyện Đông Triều",
				"615":"Huyện Hải Hà",
				"616":"Huyện Hoành Bồ",
				"617":"Huyện Tiên Yên",
				"618":"Huyện Vân Đồn",
				"619":"Huyện Yên Hưng",
				"620":"Thành phố Hạ Long",
				"621":"Thành phố Móng Cái",
				"622":"Thị xã Cẩm Phả",
				"623":"Thị xã Uông Bí"
			}
		},
		"50":{  
			"name":"Tỉnh Quảng Trị",
			"districts":{  
				"624":"Huyện Cam Lộ",
				"625":"Huyện Cồn Cỏ",
				"626":"Huyện Đa Krông",
				"627":"Huyện Gio Linh",
				"628":"Huyện Hải Lăng",
				"629":"Huyện Hướng Hóa",
				"630":"Huyện Triệu Phong",
				"631":"Huyện Vính Linh",
				"632":"Thành phố Đông Hà",
				"633":"Thị xã Quảng Trị"
			}
		},
		"51":{  
			"name":"Tỉnh Sóc Trăng",
			"districts":{  
				"634":"Huyện Châu Thành",
				"635":"Huyện Cù Lao Dung",
				"636":"Huyện Kế Sách",
				"637":"Huyện Long Phú",
				"638":"Huyện Mỹ Tú",
				"639":"Huyện Mỹ Xuyên",
				"640":"Huyện Ngã Năm",
				"641":"Huyện Thạnh Trị",
				"642":"Huyện Trần Đề",
				"643":"Huyện Vĩnh Châu",
				"644":"Thành phố Sóc Trăng"
			}
		},
		"52":{  
			"name":"Tỉnh Sơn La",
			"districts":{  
				"645":"Huyện Bắc Yên",
				"646":"Huyện Mai Sơn",
				"647":"Huyện Mộc Châu",
				"648":"Huyện Mường La",
				"649":"Huyện Phù Yên",
				"650":"Huyện Quỳnh Nhai",
				"651":"Huyện Sông Mã",
				"652":"Huyện Sốp Cộp",
				"653":"Huyện Thuận Châu",
				"654":"Huyện Yên Châu",
				"655":"Thành phố Sơn La"
			}
		},
		"53":{  
			"name":"Tỉnh Tây Ninh",
			"districts":{  
				"656":"Huyện Bến Cầu",
				"657":"Huyện Châu Thành",
				"658":"Huyện Dương Minh Châu",
				"659":"Huyện Gò Dầu",
				"660":"Huyện Hòa Thành",
				"661":"Huyện Tân Biên",
				"662":"Huyện Tân Châu",
				"663":"Huyện Trảng Bàng",
				"664":"Thị xã Tây Ninh"
			}
		},
		"54":{  
			"name":"Tỉnh Thái Bình",
			"districts":{  
				"665":"Huyện Đông Hưng",
				"666":"Huyện Hưng Hà",
				"667":"Huyện Kiến Xương",
				"668":"Huyện Quỳnh Phụ",
				"669":"Huyện Thái Thụy",
				"670":"Huyện Tiền Hải",
				"671":"Huyện Vũ Thư",
				"672":"Thành phố Thái Bình"
			}
		},
		"55":{  
			"name":"Tỉnh Thái Nguyên",
			"districts":{  
				"673":"Huyện Đại Từ",
				"674":"Huyện Định Hóa",
				"675":"Huyện Đồng Hỷ",
				"676":"Huyện Phổ Yên",
				"677":"Huyện Phú Bình",
				"678":"Huyện Phú Lương",
				"679":"Huyện Võ Nhai",
				"680":"Thành phố Thái Nguyên",
				"681":"Thị xã Sông Công"
			}
		},
		"56":{  
			"name":"Tỉnh Thanh Hóa",
			"districts":{  
				"682":"Huyện Bá Thước",
				"683":"Huyện Cẩm Thủy",
				"684":"Huyện Đông Sơn",
				"685":"Huyện Hà Trung",
				"686":"Huyện Hậu Lộc",
				"687":"Huyện Hoằng Hóa",
				"688":"Huyện Lang Chánh",
				"689":"Huyện Mường Lát",
				"690":"Huyện Nga Sơn",
				"691":"Huyện Ngọc Lặc",
				"692":"Huyện Như Thanh",
				"693":"Huyện Như Xuân",
				"694":"Huyện Nông Cống",
				"695":"Huyện Quan Hóa",
				"696":"Huyện Quan Sơn",
				"697":"Huyện Quảng Xương",
				"698":"Huyện Thạch Thành",
				"699":"Huyện Thiệu Hóa",
				"700":"Huyện Thọ Xuân",
				"701":"Huyện Thường Xuân",
				"702":"Huyện Tĩnh Gia",
				"703":"Huyện Triệu Sơn",
				"704":"Huyện Vĩnh Lộc",
				"705":"Huyện Yên Định",
				"706":"Thành phố Thanh Hóa",
				"707":"Thị xã Bỉm Sơn",
				"708":"Thị xã Sầm Sơn"
			}
		},
		"57":{  
			"name":"Tỉnh Thừa Thiên Huế",
			"districts":{  
				"709":"Huyện A Lưới",
				"710":"Huyện Hương Trà",
				"711":"Huyện Nam Dông",
				"712":"Huyện Phong Điền",
				"713":"Huyện Phú Lộc",
				"714":"Huyện Phú Vang",
				"715":"Huyện Quảng Điền",
				"716":"Thành phố Huế",
				"717":"thị xã Hương Thủy"
			}
		},
		"58":{  
			"name":"Tỉnh Tiền Giang",
			"districts":{  
				"718":"Huyện Cái Bè",
				"719":"Huyện Cai Lậy",
				"720":"Huyện Châu Thành",
				"721":"Huyện Chợ Gạo",
				"722":"Huyện Gò Công Đông",
				"723":"Huyện Gò Công Tây",
				"724":"Huyện Tân Phú Đông",
				"725":"Huyện Tân Phước",
				"726":"Thành phố Mỹ Tho",
				"727":"Thị xã Gò Công"
			}
		},
		"59":{  
			"name":"Tỉnh Trà Vinh",
			"districts":{  
				"728":"Huyện Càng Long",
				"729":"Huyện Cầu Kè",
				"730":"Huyện Cầu Ngang",
				"731":"Huyện Châu Thành",
				"732":"Huyện Duyên Hải",
				"733":"Huyện Tiểu Cần",
				"734":"Huyện Trà Cú",
				"735":"Thành phố Trà Vinh"
			}
		},
		"60":{  
			"name":"Tỉnh Tuyên Quang",
			"districts":{  
				"736":"Huyện Chiêm Hóa",
				"737":"Huyện Hàm Yên",
				"738":"Huyện Na hang",
				"739":"Huyện Sơn Dương",
				"740":"Huyện Yên Sơn",
				"741":"Thành phố Tuyên Quang"
			}
		},
		"61":{  
			"name":"Tỉnh Vĩnh Long",
			"districts":{  
				"742":"Huyện Bình Minh",
				"743":"Huyện Bình Tân",
				"744":"Huyện Long Hồ",
				"745":"Huyện Mang Thít",
				"746":"Huyện Tam Bình",
				"747":"Huyện Trà Ôn",
				"748":"Huyện Vũng Liêm",
				"749":"Thành phố Vĩnh Long"
			}
		},
		"62":{  
			"name":"Tỉnh Vĩnh Phúc",
			"districts":{  
				"750":"Huyện Bình Xuyên",
				"751":"Huyện Lập Thạch",
				"752":"Huyện Sông Lô",
				"753":"Huyện Tam Đảo",
				"754":"Huyện Tam Dương",
				"755":"Huyện Vĩnh Tường",
				"756":"Huyện Yên Lạc",
				"757":"Thành phố Vĩnh Yên",
				"758":"Thị xã Phúc Yên"
			}
		},
		"63":{  
			"name":"Tỉnh Yên Bái",
			"districts":{  
				"759":"Huyện Lục Yên",
				"760":"Huyện Mù Cang Chải",
				"761":"Huyện Trạm Tấu",
				"762":"Huyện Trấn Yên",
				"763":"Huyện Văn Chấn",
				"764":"Huyện Văn Yên",
				"765":"Huyện Yên Bình",
				"766":"Thành phố Yên Bái",
				"767":"Thị xã Nghĩa Lộ"
			}
		}
	}
	]);
})();
(function(){
	'use strict';

	angular
	.module('bzUser')
	// .service('authSvc', authSvc)
	.service('userSvc', userSvc)
	.service('userFac', userFac);

	function userFac($window, bzResourceSvc){
		return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', {method:'@method', id: '@id'});
	}

	// function authSvc($window){
	// 	$window.user = $window.user || {};

	// 	return {
	// 		isSuperAdmin: isSuperAdmin,
	// 		isAdmin: isAdmin,
	// 		isSale: isSale,
	// 		isSaleManager: isSaleManager,
	// 		exist: exist
	// 	};

	// 	function isSuperAdmin(){
	// 		if(_.intersection($window.user.scope, ['super-admin']).length === 0)
	// 			return false;
	// 		return true;
	// 	}

	// 	function isAdmin(){
	// 		if(_.intersection($window.user.scope, ['admin']).length === 0)
	// 			return false;
	// 		return true;
	// 	}

	// 	function isSale(){
	// 		$window.user.saleman = $window.user.saleman || {};
	// 		if(_.intersection($window.user.scope, ['sale']).length !== 0 && $window.user.saleman.active === true)
	// 			return true;
	// 		return false;
	// 	}

	// 	function isSaleManager(){
	// 		$window.user.saleman = $window.user.saleman || {};
	// 		if(isSale() && $window.user.saleman.manager === true)
	// 			return true;
	// 		return false;
	// 	}

	// 	function exist(roles){
	// 		return _.intersection($window.user.scope, roles).length > 0;
	// 	}
	// }

	function userSvc($q, $window, bzResourceSvc, userFac){
		return {
			// getProfile: getProfile,
			// setProfile: setProfile,
			// isSignedIn: isSignedIn,
			// siteLogin: siteLogin,
			// siteLogout: siteLogout,
			create    : create,
			update    : update,
		};

		// function getProfile(){
		// 	var profileData = $window.user;//Storage.get(settingJs.appPrefix + 'bzp');
		// 	return profileData;
		// }

		// function setProfile(data){
		// 	Storage.set(settingJs.appPrefix + 'bzp', data, settingJs.storageExpireTime);
		// 	Storage.set(settingJs.appPrefix + 'bzl', true, settingJs.storageExpireTime);
		// 	return data;
		// }

		// function isSignedIn(){
		// 	var log = Storage.get(settingJs.appPrefix + 'bzl');
		// 	return log ? true : false;
		// }

		// function siteLogin(data, successCb, errorCb){
		// 	var defer = $q.defer();

		// 	bzResourceSvc.api($window.settings.services.userApi + '/user/login')
		// 	.save({}, data, function(resp){
		// 		console.log('resp',resp);
		// 		setProfile(resp);
		// 		defer.resolve(resp);
		// 		if(angular.isFunction(successCb)){
		// 			successCb(resp);
		// 		}
		// 	}, function(err){
		// 		defer.reject(err);
		// 		if(angular.isFunction(errorCb)){
		// 			errorCb(err);
		// 		}
		// 	});

		// 	return defer.promise;
		// }

		// function siteLogout(callback){
		// 	var profile = getProfile();

		// 	bzResourceSvc.api($window.settings.services.userApi + '/user/logout')
		// 	.save({}, {}, function(resp){
		// 		setProfile(undefined);
		// 		if(angular.isFunction(callback)){
		// 			callback(resp);
		// 		}
		// 		$window.location.href = '/admin/signin';
		// 	});
		// }

		function create(data, id){
			var createData = new userFac(data);

			return createData.$save({method: 'user'});
		}

		function update(data, id){
			var createData = new userFac(data);

			return createData.$update({method: 'user', id: id});
		}
	}
})();
;(function(){
	'use strict';

	angular
	.module('bzStatistic')
	// .service('saleContactSvc', saleContactSvc)
	.factory('statisticFac', statisticFac)
	.service('statisticSvc', statisticSvc);

	// function saleContactSvc(bzResourceSvc){
	// 	return bzResourceSvc.api('http://localhost:9000/sale-contact/:id', {id: '@id'});
	// }

	function statisticFac($resource){
		return $resource(settingJs.configs.adminUrl + '/:method/:id', {method:'@method', id: '@id'},{
			query: {
				method: 'GET',
				isArray: false
			},
			update: {
				method:'PUT'
			},
			save: {
				method: 'POST'
			},
			get: {
				method: 'GET',
			}
		});
	}

	function statisticSvc(statisticFac){
		var $this = {};

		$this.getStatistic = function(data){
			var getStatistic = new statisticFac();
			data.method = 'statistic-get-saleman';

			return getStatistic.$get(data);
		}

		return $this;
	}
})();
;(function(){
	'use strict';

	angular
	.module('bzSaleContact')
	// .service('assignContactTo', assignContactTo)
	.service('saleContactSvc', saleContactSvc)
	.factory('assignContactFac', assignContactFac)
	.service('assignContactSvc', assignContactSvc)
	.factory('logFac', logFac)
	.service('logSvc', logSvc)
	.factory('saleContactTmpFac', saleContactTmpFac)
	.service('saleContactTmpSvc', saleContactTmpSvc);

	function saleContactTmpFac($window, bzResourceSvc){
		return bzResourceSvc.api(settingJs.configs.adminUrl + '/:method/:id', {method:'@method', id: '@id'});
	}

	function saleContactTmpSvc(saleContactTmpFac){
		return {
			getContactTmp: getContactTmp,
			createContactTmp: createContactTmp,
		};

		function getContactTmp(data){
			var getContactTmp = new saleContactTmpFac();
			data.method = 'sale-contact-tmp';
			
			return getContactTmp.$get(data);
		}

		function createContactTmp(data){
			var createContactTmp = new saleContactTmpFac(data);
			return createContactTmp.$save({method: 'sale-contact-tmp'});
		}
	}

	function logFac($window, bzResourceSvc){
		return bzResourceSvc.api(settingJs.configs.logApiUrl + '/:method/:id', {method:'@method', id: '@id'});
	}

	function logSvc(logFac){
		return {
			getLogContact:getLogContact
		};

		/*========================================API========================================*/
		function getLogContact(id){
			var getLogContact = new logFac();
			var data = {
				method: 'contact-log',
				id: id
			};
			
			return getLogContact.$get(data);
		}
	}

	function saleContactSvc(bzResourceSvc){
		return bzResourceSvc.api(settingJs.configs.adminUrl + '/sale-contact/:id', {id: '@id'});
	}

	function assignContactFac($resource){
		return $resource(settingJs.configs.adminUrl + '/:method/:id', {method:'@method', id: '@id'},{
			query: {
				method: 'GET',
				isArray: false
			},
			update: {
				method:'PUT'
			},
			save: {
				method: 'POST'
			},
			get: {
				method: 'GET',
			}
		});
	}

	function assignContactSvc($uibModal, assignContactFac){
		return {
			getSaleman:getSaleman,
			getSalemanAssign:getSalemanAssign,
			deleteContact:deleteContact,
			postContactOptimized:postContactOptimized,
			postAssignContact:postAssignContact,
			formatContacts:formatContacts,
			assignSaleman: popupAssignToSaleman, /*click show popup bàn giao saleman*/
			postAssignCMD: postAssignCMD,	/*click post bàn giao contact*/
			assignCMD: popupAssignToCMD, /*click show popup bàn giao contact*/
			/*Sale Contact*/
			evictContact: evictContact,
			assignForSalemans: assignForSalemans,
		};

		/*========================================API========================================*/

		/*Thu hồi Contacts*/
		function evictContact(data){
			var evictContact = new assignContactFac(data);

			return evictContact.$save({method: 'sale-contact-evict'});
		}

		/*Bàn giao Contacts cho salemans*/
		function assignForSalemans(data){
			var assignForSalemans = new assignContactFac(data);

			return assignForSalemans.$save({method: 'assign-for-salemans'});
		}

		function getSaleman(){
			var getSaleman = new assignContactFac();

			return getSaleman.$query({method: 'saleman-assign-contact'});
		}

		function getSalemanAssign(){
			var getSalemanAssign = new assignContactFac();
			var data = {};
			data.method = 'saleman-assign-user';

			return getSalemanAssign.$get(data);
		}

		function deleteContact(id){
			var deleteContact = new assignContactFac();

			return deleteContact.$delete({method: 'delete-contact', id: id});
		}

		function postContactOptimized(data){
			var postContactOptimized = new assignContactFac(data);

			return postContactOptimized.$save({method: 'assign-contact-optimized'});
		}

		function postAssignContact(data){
			var postAssignContact = new assignContactFac(data);

			return postAssignContact.$save({method: 'assign-contact-post'});
		}

		function postAssignCMD(data){
			var postAssignContact = new assignContactFac(data);

			return postAssignContact.$save({method: 'assign-to-cmd'});
		}

		/*=====================================Xử lý=====================================*/

		function formatContacts(data){
			/*SET LAI _SALE_USERMEMBER*/
			for (var i = 0; i < data.listSaleman.length; i++) {
				//set new Saleman
				if(data.listSaleman[i].quantity > 0){
					var count = 0;

					for (var j = 0; j < data.contacts.emails.all.length; j++) {
						if(count < data.listSaleman[i].quantity) {
							if(!data.contacts.emails.all[j]._newSaleman){
								data.contacts.emails.all[j]._newSaleman = data.listSaleman[i]._id;
								++count;
							}
						}else{
							break;
						}
					}

					for (var j = 0; j < data.contacts.phones.all.length; j++) {
						if(count < data.listSaleman[i].quantity) {
							if(!data.contacts.phones.all[j]._newSaleman){
								data.contacts.phones.all[j]._newSaleman = data.listSaleman[i]._id;
								++count;
							}
						}else{
							break;
						}
					}
				}
			}
			return data;
		}

		/*Bàn giao cho saleman*/
		function popupAssignToSaleman(contact, type){
			// console.log('sdfsdf');
			// Storage.set('contactId', id);
			var modalInstance = $uibModal.open({
				animation:true,
				templateUrl: 'modules/admin-salecontact/view/client/popup/assign-saleman/view.html',
				controller: 'assignSalemanCtrl',
				controllerAs: 'vmASM',
				resolve: {
					contact: function () {
						return contact;
					},
					type: function () {
						return type;
					}
				}
			});
		}

		/*Bàn giao cho CC*/
		function popupAssignToCMD(contact, type){
			// Storage.set('contactId', id);
			var modalInstance = $uibModal.open({
				animation:true,
				templateUrl: 'modules/admin-salecontact/view/client/popup/assign-cc/view.html',
				controller: 'assignCcCtrl',
				controllerAs: 'vmACC',
				resolve: {
					contact: function () {
						return contact;
					},
					type: function () {
						return type;
					}
				}
			});
		}
	}
})();
(function(){
	'use strict';

	angular
	.module('bzApp')
	.service('bzUtilsSvc', bzUtilsSvc)
	.service('bzResourceSvc', bzResourceSvc)
    .factory('bzPreloadSvc', bzPreloadSvc)
    .service('authSvc', authSvc)
    .service('notiSvc', notiSvc)
    .factory('userApiFac', userApiFac);

    function userApiFac($window, bzResourceSvc){
        return bzResourceSvc.api(settingJs.configs.userApiUrl + '/user/:method/:id', {method:'@method', id: '@id'});
    }

    function notiSvc($q,bzResourceSvc){
        return {
            getDupContact: getDupContact,
        };

        function getDupContact(){
            var defer = $q.defer();
            bzResourceSvc.api(settingJs.configs.adminUrl + '/noti-dup-contact')
            .get({}, {} ,function(resp){
                defer.resolve(resp);
            }, function(err){
                defer.reject(err);
            });

            return defer.promise;
        }
    }

    function authSvc($uibModal, $q, $window, userApiFac, bzResourceSvc){
        $window.user = $window.user || {};

        return {
            /*Role*/
            isSuperAdmin: isSuperAdmin,
            isAdmin: isAdmin,
            isSale: isSale,
            isSaleManager: isSaleManager,
            exist: exist,
            /*Info*/
            getProfile: getProfile,
            setProfile: setProfile,
            isSignedIn: isSignedIn,
            siteLogin: siteLogin,
            siteLogout: siteLogout,
            popChangePass: popChangePass,
            postChangePass: postChangePass,
            // create    : create,
            // update    : update,
        };

        /*ROLES*/
        function isSuperAdmin(){
            if(_.intersection($window.user.scope, ['super-admin']).length === 0)
                return false;
            return true;
        }

        function isAdmin(){
            if(_.intersection($window.user.scope, ['admin']).length === 0)
                return false;
            return true;
        }

        function isSale(){
            $window.user.saleman = $window.user.saleman || {};
            if(_.intersection($window.user.scope, ['sale']).length !== 0 && $window.user.saleman.active === true)
                return true;
            return false;
        }

        function isSaleManager(){
            $window.user.saleman = $window.user.saleman || {};
            if(isSale() && $window.user.saleman.manager === true)
                return true;
            return false;
        }

        function exist(roles){
            return _.intersection($window.user.scope, roles).length > 0;
        }

        /*INFO*/
        function getProfile(){
            var profileData = $window.user;
            return profileData;
        }

        function setProfile(data){
            Storage.set(settingJs.appPrefix + 'bzp', data, settingJs.storageExpireTime);
            Storage.set(settingJs.appPrefix + 'bzl', true, settingJs.storageExpireTime);
            return data;
        }

        function isSignedIn(){
            var log = Storage.get(settingJs.appPrefix + 'bzl');
            return log ? true : false;
        }

        function siteLogin(data, successCb, errorCb){
            var defer = $q.defer();

            bzResourceSvc.api($window.settings.services.userApi + '/user/login')
            .save({}, data, function(resp){
                setProfile(resp);
                defer.resolve(resp);
                if(angular.isFunction(successCb)){
                    successCb(resp);
                }
            }, function(err){
                defer.reject(err);
                if(angular.isFunction(errorCb)){
                    errorCb(err);
                }
            });

            return defer.promise;
        }

        function siteLogout(callback){
            var profile = getProfile();

            bzResourceSvc.api($window.settings.services.userApi + '/user/logout')
            .save({}, {}, function(resp){
                setProfile(undefined);
                if(angular.isFunction(callback)){
                    callback(resp);
                }
                $window.location.href = '/admin/signin';
            });
        }

        function popChangePass(){
            var modalInstance = $uibModal.open({
                animation:true,
                templateUrl: 'modules/admin-user/view/client/popup/change-pass/view.html',
                controller: 'popChangePassCtrl',
                controllerAs: 'mvCPass',
            });
        }

        function postChangePass(data){
            var postChangePass = new userApiFac(data);

            return postChangePass.$save({method: 'change-password'});
        }

        // function create(data, id){
        //     var createData = new userFac(data);

        //     return createData.$save({method: 'user'});
        // }

        // function update(data, id){
        //     var createData = new userFac(data);

        //     return createData.$update({method: 'user', id: id});
        // }
    }

    function bzUtilsSvc($bzPopup){
        return {
            recusive: recusive,
            cropAvatar: cropAvatar,
        	findObject: findObject ,					// Tìm đối tượng trong mảng đối tượng
        };

        function findObject(field, value, array){
        	function findCherries(fruit) { 
        		return fruit[field] === value;
        	}

        	return array.find(findCherries);
        }

        function recusive(data, parentId, seperator){
        	var output;
        	var tmp = [];
        	seperator = seperator || '';
        	if(angular.isArray(data)){
        		var items = data.filter(function(item){ return item.parentId === parentId });
        		if(items.length){
        			for (var i = 0; i < items.length; i++) {
        				items[i].name = seperator + items[i].name;

        				tmp.push(items[i]);

        				var subs = recusive(data, items[i].id, seperator + "—");

        				for (var j = 0; j < subs.length; j++) {
        					tmp.push(subs[j]);
        				}
        			}
        		}
        		output = tmp;
        	} else {
        		output = data;
        	}
        	return output;
        }

        function cropAvatar(){
        	$bzPopup.open({
        		templateUrl: 'modules/popup/cropper/view.html',
        		closeOnBg: false,
        		data: {
        			ratio: 1,
        			width: 320,
        			height: 320,
        			type: 'image/jpeg',
        			event: 'bz:CropperAvatarSuccess',
        			image: 'images/demo.jpg',
        			props: {
        				btnOk: 'Lưu',
        				btnCancel: 'Huỷ bỏ',
	                	btnOkEvent: 'bz:CropperAvatarOk', // hoặc function(){}
	                	btnCancelEvent: 'bz:CroppperAvatarCancel' // hoặc function(){}
	                }
	            }
	        });
        }
    }

    function bzResourceSvc($resource){
    	return {
    		api: api
    	};

    	function api(apiName, params, methods){
    		methods = methods || {};
    		methods.get = angular.extend({}, methods.get);

    		methods.query = angular.extend({
    			isArray: true
    		}, methods.query);

    		methods.update = angular.extend({
    			method:'PUT'
    		}, methods.update);

    		methods.upload = angular.extend({
    			method: 'POST',
    			headers: { 'Content-Type': undefined },
    			transformRequest: angular.identity
    		}, methods.upload);

    		return $resource(apiName, params, methods);
    	}
    }

    function bzPreloadSvc($q){
    	return {
    		load: function(list){
    			var defer = $q.defer();
    			helperJs.preloader(list, function(){
    				defer.resolve();
    			});
    			return defer.promise;
    		}
    	};
    }
})();
;(function(){
	'use strict';

	angular
	.module('bzUser')
	.controller('popChangePassCtrl', popChangePassCtrl);

	function popChangePassCtrl($scope, $rootScope, $state, $bzPopup, $uibModalInstance, 
		authSvc){
		var mvCPass = this;

		// Vars
		mvCPass.queryParams = {};
		mvCPass.userCurent = authSvc.getProfile();
		
		// Methods
		mvCPass.submit = submit;

		// Init
		initFormData();

		function initFormData(){
			mvCPass.submitted = false;
			mvCPass.lockForm = false;

			mvCPass.formData = {
				currentPassword: '',
				newPassword:'',
				confirmNewPassword:'',
			};
		}

		function submit(isValid){
			mvCPass.submitted = true;

			if(!mvCPass.lockForm && isValid){
				mvCPass.lockForm = true;
				authSvc.postChangePass(mvCPass.formData).then(function(resp){
					$bzPopup.toastr({
						type: 'success',
						data:{
							title: "Thành công",
							message: "Đổi mật khẩu thành công"
						}
					});
					$state.reload();
					$uibModalInstance.close();
					mvCPass.lockForm = false;
					authSvc.siteLogout()
				}).catch(function(err){
					$bzPopup.toastr({
						type: 'error',
						data:{
							title: "Lỗi",
							message: err.data.message
						}
					});
					$state.reload();
					$uibModalInstance.close();
					mvCPass.lockForm = false;
				});
			}
		}
	}
})();
;(function(){
	'use strict';

	angular
	.module('bzSaleContact')
	.controller('assignSalemanCtrl', assignSalemanCtrl);

	function assignSalemanCtrl($scope, $rootScope, $state, $window, $bzPopup, $uibModalInstance, $timeout,
		authSvc, contact, type,  assignContactSvc, saleContactSvc, bzResourceSvc){
		var vmASM = this;

		// Vars
		vmASM.queryParams = {};
		vmASM.contact = contact;
		vmASM.type = type;
		// console.log('ggg',contact);
		// Methods
		vmASM.submit = submit;

		// Init
		getSaleman();
		initFormData();

		function initFormData(){
			vmASM.submitted = false;
			vmASM.lockForm = false;


			vmASM.formData = {
				_user_src: authSvc.getProfile().uid,
				_user_dest: '',
				note: '',
				content: '',
				date_assign_saleman: new Date()
			};
		}

		function getSaleman(){
			assignContactSvc.getSalemanAssign().then(function(resp){
				vmASM.salemans = resp.items;
				// console.log('test',vmASM.salemans);
				for (let k in vmASM.salemans) {
					if (vmASM.salemans.hasOwnProperty(k)) {
						if(typeof vmASM.salemans[k].saleman != 'undefined'){
							if(vmASM.salemans[k].saleman.types){
								vmASM.salemans[k].typesText = ' (' + vmASM.salemans[k].saleman.types.toString() + ')';
							}
						}
					}
				}
			});
		}

		function submit(isValid){
			vmASM.submitted = true;

			if(!vmASM.lockForm && isValid){
				vmASM.lockForm = true;

				var emailDest = '';
				for (var i = 0; i < vmASM.salemans.length; i++) {
					if(vmASM.salemans[i]._id == vmASM.formData._user_dest){
						emailDest = vmASM.salemans[i].email;
					}
				}

				if(vmASM.type === 'multiple'){
					let data = {
						email_dest: emailDest,
						contacts: vmASM.contact,
						formData: vmASM.formData
					};
					assignContactSvc.assignForSalemans(data).then(function(resp){
						$rootScope.$emit('angular-changeNoti');
					});
				}else{
					// Cập nhật người nhận
					// saleContactSvc.update({id: vmASM.formData.payload._id_contact}, {
					// 	_sale_userconvert: authSvc.getProfile().uid,
					// 	_sale_usermember: vmASM.formData.payload.info_current_dest._id,
					// 	note_saleman: vmASM.formData.payload.note,
					// 	date_receive: new Date()
					// }, function(resp){
						// Lưu lịch sử
						// for (var i = 0; i < vmASM.salemans.length; i++) {
						// 	if(vmASM.salemans[i]._id == vmASM.formData.payload.info_current_dest._id ){
						// 		vmASM.formData.payload.info_current_dest._id = vmASM.salemans[i]._id;
						// 		vmASM.formData.payload.info_current_dest.name = vmASM.salemans[i].name;
						// 		vmASM.formData.payload.info_current_dest.email = vmASM.salemans[i].email;
						// 	}
						// }
						// bzResourceSvc.api(settingJs.configs.logApiUrl + '/log')
						// .save({}, vmASM.formData, function(resp){
						// });

						
					// });
				}
				$timeout(function(){
					$state.reload();
				},1000);
				$uibModalInstance.close();
				vmASM.lockForm = false;
			}
		}
	}
})();
;(function(){
	'use strict';

	angular
	.module('bzSaleContact')
	.controller('assignContactCtrl', assignContactCtrl);

	function assignContactCtrl($rootScope, $scope, $bzPopup, $timeout, $uibModalInstance, $state, assignContactSvc){
		var mvACT = this;
		/* Begin Desription: 
		resp: emailWork là những đăng ký của work mà có email, phoneWork là đăng ký work ko email mà có phone
		Lấy list saleman từ hàm getSaleman(), 
		Chọn date và lấy contact từ hàm applyDate(),  
		Phân chia contacts cũ của saleman trươc đó hàm oldContactSM() và setOldSalemanContact(), 
		Nhập số lượng chia cho từng saleman hàm changeQuantity(), 
		Bắt đầu chia hàm save() và trong khi chia có format lại allContacs cập nhập _sale_usermember 
		End Desription*/
		
		/*Vars*/
		mvACT.tab = 'work';
		mvACT.queryParams = {};
		mvACT.queryParams.date = {startDate: null, endDate: null};

		mvACT.totalWork = {
			all: 0,		/*Tổng contacts work*/
			assign: 0,	/*Tổng contacts assign cho work*/
			dup: 0,		/*Tổng contacts bị trùng work*/
		};
		mvACT.totalKid = {
			all: 0,		/*Tổng contacts kid*/
			assign: 0,	/*Tổng contacts assign cho kid*/
			dup: 0,		/*Tổng contacts bị trùng kid*/
		};
		
		/*Methods*/
		mvACT.save = save;
		mvACT.applyDate = applyDate;
		mvACT.changeQuantity = changeQuantity;

		/*Init*/
		getSaleman(); 

		$timeout(function(){
			angular.element('#reservationtime1').daterangepicker({
				timePicker: true,
				timePickerIncrement: 30,
				locale: {
					format: 'MM/DD/YYYY h:mm A'
				}
			});

			angular.element('#reservationtime1').on('apply.daterangepicker', function(ev, picker) {
				/*do something, like calling a function*/
				console.log(picker);
				var pickerDate = {startDate: picker.startDate, endDate: picker.endDate};
				mvACT.queryParams.date = pickerDate;
			});
		},500);
		

		/*Function*/
		function getSaleman () {
			assignContactSvc.getSaleman().then(function(resp){
				// console.log('sdf',resp);
				getData(resp);
			});
		}

		function getData(data){
			mvACT.salemans = {
				work: data.salemanWork,
				kid: data.salemanKid,
			};
			mvACT.salemansTmp = {
				work: data.salemanWork,
				kid: data.salemanKid,
			};
			// console.log('test',mvACT.salemans);
			mvACT.groupWork = {};
			mvACT.groupKid = {};
		}

		function applyDate(){
			if(mvACT.queryParams.date.startDate == null || mvACT.queryParams.date.endDate == null) return;
			mvACT.lockForm = true;

			assignContactSvc.postContactOptimized(mvACT.queryParams.date).then(function(resp){
				console.log('resp',resp);
				mvACT.groupWork = resp.groupWork;
				mvACT.groupKid = resp.groupKid;

				/*Set tổng contacts trùng work và kid*/
				mvACT.totalWork.all = mvACT.groupWork.emails.all.length + mvACT.groupWork.phones.all.length;
				mvACT.totalKid.all = mvACT.groupKid.emails.all.length + mvACT.groupKid.phones.all.length;
				mvACT.lockForm = false;
				
			});
		}

		function changeQuantity(type){
			var salesman;
			var totalAssign = 0;

			if(type == 'work')
				salesman = mvACT.salemansTmp.work;
			else
				salesman = mvACT.salemansTmp.kid;

			for (var i = 0; i < salesman.length; i++) {
				totalAssign += salesman[i].quantity || 0;
			}

			if(type == 'work')
				mvACT.totalWork.assign = totalAssign;
			else
				mvACT.totalKid.assign = totalAssign;
		}

		function save(isValid){
			mvACT.submitted = true;

			if(!mvACT.lockFormAssign && isValid){
				mvACT.lockFormAssign = true;
				if(mvACT.tab === 'work'){
					// chia contact work
					var data = {
						type: 'work',
						listSaleman: mvACT.salemansTmp.work,
						contacts: mvACT.groupWork
					};
				}
				else if(mvACT.tab === 'kid'){
					// chia contact kid
					var data = {
						type: 'kid',
						listSaleman: mvACT.salemansTmp.kid,
						contacts: mvACT.groupKid
					};
				}
				/*Map contacts mới với số lượng của từng saleman đc set trong list saleman*/
				data = assignContactSvc.formatContacts(data);
				assignContactSvc.postAssignContact(data).then(function(resp){
					$bzPopup.toastr({
						type: 'success',
						data:{
							title: 'Chia Contacts',
							message: 'Chia Contacts thành công!'
						}
					});
					$rootScope.$emit('angular-changeNoti');
					$uibModalInstance.close();
					mvACT.lockFormAssign = false;
				}).catch(function(err){
					$bzPopup.toastr({
						type: 'error',
						data:{
							title: 'Lỗi !',
							message: 'Chia Contacts lỗi!'
						}
					});
					$uibModalInstance.close();
					mvACT.lockFormAssign = false;
				});
			}
		}
	}
})();
;(function(){
	'use strict';

	angular
	.module('bzSaleContact')
	.controller('assignCcCtrl', assignCcCtrl);

	function assignCcCtrl($scope, $state, $bzPopup, $uibModalInstance, 
		VIETNAM_MAP, authSvc, contact, type, assignContactSvc, bzResourceSvc){
		var vmACC = this;
		// Vars
		vmACC.queryParams = {};
		vmACC.contact = contact;
		vmACC.type = type;
		/*format huyện tỉnh*/
		vmACC.province = VIETNAM_MAP[0][vmACC.contact.level_1.province];
		if(vmACC.province) {
			vmACC.provinceName = vmACC.province.name;
			vmACC.district = vmACC.province['districts'][vmACC.contact.level_1.district];
		}

		// Methods
		vmACC.submit = submit;

		// Init
		initFormData();
		getData();

		function getData(data){

		}

		function initFormData(){
			vmACC.submitted = false;
			vmACC.lockForm = false;

			vmACC.formData = {
				action: 'Bàn giao cho CMD',
				type: 'salecontact',
				note_cmd: '',	//note CMD
				_dest_id: authSvc.getProfile().uid,
				_uid: authSvc.getProfile().uid,
				_id: contact._id 	//dùng gửi mail
			};

		}

		function submit(isValid){
			vmACC.submitted = true;

			if(!vmACC.lockForm && isValid){
				vmACC.lockForm = true;

				assignContactSvc.postAssignCMD(vmACC.formData)
				.then(function(resp){
					// console.log('CCokokok',resp);
					$state.go('contactsaleman',{uid:authSvc.getProfile().uid});

					$uibModalInstance.close(resp);
					// Lưu lịch sử
					/*bzResourceSvc.api(settingJs.configs.adminUrl + '/log')
					.save({}, vmACC.formData, function(resp){
						$bzPopup.close();
					});*/
				});
			}
		}
	}
})();
var usersaleCtrl = (function(){
	'use strict';

	angular
	.module('bzUser')
	.controller('usersaleCtrl', usersaleCtrl);

	function usersaleCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal, userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc){
		/* jshint validthis: true */
		var vmUSale = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if( !(authSvc.isSuperAdmin() || authSvc.isSaleManager()) ){
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmUSale.loading = true;
		vmUSale.selectedItems = [];
		vmUSale.queryParams = $stateParams;

		vmUSale.userRoles = userRoles;
		// console.log('test', userRoles);
		vmUSale.users = [];

		// Methods
		vmUSale.filter = filter;
		vmUSale.filterReset = filterReset;
		vmUSale.active = active;
		vmUSale.sort = sort;
		vmUSale.remove = remove;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function() {
			$scope.vmUSale.queryParams.page = vmUSale.table.page();
			$state.go('.',$scope.vmUSale.queryParams);
		}, $scope, vmUSale.table);

		function getData(){
			bzResourceSvc.api($window.settings.services.userApi + '/user')
			.get(vmUSale.queryParams, function(resp){
				vmUSale.queryParams.pageCount = resp.totalPage;
				vmUSale.users = resp.items;
				console.log('test',vmUSale.users);

				vmUSale.table = new NgTableParams({count: 10}, {
					counts: [],
					getData: function(params) {
						params.total(resp.totalItems);
						return vmUSale.users;
					}
				});
				vmUSale.table.page(vmUSale.queryParams.page);
				vmUSale.loading = false;
			});
		}

		function filter(params){
			$state.go('.', angular.extend(params, saleContact.queryParams),
				{notify:false})
			.then(function(){
				$state.reload();
			});
		}

		function filterReset(){
			$state.go('.', {
				publish: null,
				cateid: null,
				keyword: null,
				limit: settingJs.admin.itemPerPage
			}, {notify:false})
			.then(function(){
				$state.reload();
			});
		}

		function active(id, value){
			bzResourceSvc.api($window.settings.services.userApi + '/user/:id', {id:'@id'})
			.update({_id: id}, {status: value}, function(resp){
				$bzPopup.toastr({
					type: 'success',
					data:{
						title: 'User',
						message: value === 1 ? 'Kích hoạt tài khoản thành công!' : 'Vô hiệu hóa tài khoản thành công!'
					}
				});

				$state.reload();
			});
		}

		function sort(id, value){
			$bzPopup.toastr({
				type: 'success',
				data:{
					title: 'Cập nhật',
					message: 'Cập nhật thứ tự bài viết thành công!'
				}
			});
		}

		function remove(id){
			var selected = {ids: [id]}; //id ? {ids: [id]} : getSelectedIds();
			console.log('asd',id);

			var modalInstance = $uibModal.open({
				animation:true,
				templateUrl: 'modules/global-popup/message/view.html',
				controller: function($scope, $uibModalInstance){
					$scope.popTitle = 'Xóa'; 
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?'; 
					$scope.ok = function(){
						bzResourceSvc.api($window.settings.services.userApi + '/user/:id', {id: '@id'})
						.delete({id: selected.ids}, function(resp){
							$bzPopup.toastr({
								type: 'success',
								data:{
									title: 'Xóa',
									message: 'Xóa bài viết thành công!'
								}
							});
							$state.reload();
							$uibModalInstance.close();
						});
					};
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var userEditProfileCtrl = (function(){
	'use strict';

	angular
	.module('bzUser')
	.controller('userEditProfileCtrl', userEditProfileCtrl);

	function userEditProfileCtrl($scope, $window, $state, $stateParams, $bzPopup, userRoles, authSvc, userSvc, bzResourceSvc, salemanScopes){
		var mvUEP = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if( !(authSvc.isSuperAdmin() || authSvc.isSaleManager()) ){
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/


		// Vars
		mvUEP.queryParams = $stateParams;
		mvUEP.userRoles = userRoles;
		mvUEP.salemanScopes = salemanScopes;
		mvUEP.isEditMode = mvUEP.queryParams.id !== undefined;

		// Methods
		mvUEP.save = save;

		// Init
		getData();

		function initFormData(data){
			mvUEP.lockForm = false;
			mvUEP.submitted = false;

			/*init user chung*/
			mvUEP.formData = {
				name: mvUEP.isEditMode ? data.name : '',
				email: mvUEP.isEditMode ? data.email : '',
				password: '',
				cfpassword: '',
				roles: mvUEP.isEditMode ? data.roles : ['user'],
				status: mvUEP.isEditMode ? data.status : false,
				saleman: {
					active: mvUEP.isEditMode ? data.saleman.active : false,
					manager: mvUEP.isEditMode ? data.saleman.manager : false,
					types: mvUEP.isEditMode ? data.saleman.types : [],
				}
			};
			/*init user module sale*/
			if(mvUEP.queryParams.module == 'sale'){
				mvUEP.formData.roles = ['admin', 'user', 'sale'];
				mvUEP.formData.status = mvUEP.isEditMode ? data.status : true;
			}
			/*end init user module sale*/
		}

		function getData(){
			if(mvUEP.isEditMode){
				bzResourceSvc.api($window.settings.services.userApi + '/user/:id', {id: '@id'})
				.get({id: mvUEP.queryParams.id}, function(resp){
					delete resp.__v;
					delete resp.password_token;
					delete resp.created;
					delete resp.provider;
					delete resp.activeToken;

					initFormData(resp);
				});
			} else {
				initFormData();
			}
		}

	// 	function save(isValid){
	// 		mvUEP.submitted = true;

	// 		if(!mvUEP.lockForm && isValid){
	// 			mvUEP.lockForm = true;

	// 			/*Format Status Đúng định dạng true false*/
	// 			if(mvUEP.formData.status == 1)
	// 				mvUEP.formData.status = true;
	// 			else if(mvUEP.formData.status == 0)
	// 				mvUEP.formData.status = false;

	// 			/*Thêm User*/
	// 			if(!mvUEP.isEditMode){
					
	// 				// delete mvUEP.formData.saleman;
	// 				mvUEP.formData.cfpassword = mvUEP.formData.password;
	// 				// console.log('testxx', mvUEP.formData);
	// 				// return;
	// 				userSvc.create(mvUEP.formData).then(function(resp){
	// 					$bzPopup.toastr({
	// 						type: 'success',
	// 						data:{
	// 							title: 'Thành viên',
	// 							message: resp.message
	// 						}
	// 					});

	// 					$state.go('user-sale', {id: null});
	// 				},function(err){
	// 					$bzPopup.toastr({
	// 						type: 'error',
	// 						data:{
	// 							title: 'Thành viên',
	// 							message: err.data.message
	// 						}
	// 					});
	// 					mvUEP.lockForm = false;
	// 				});
	// 			}

	// 			/*Sửa User*/
	// 			else if(mvUEP.isEditMode) {

	// 				/*Format Status Đúng định dạng true false*/
	// 				if(mvUEP.formData.status == 1)
	// 					mvUEP.formData.status = true;
	// 				else if(mvUEP.formData.status == 0)
	// 					mvUEP.formData.status = false;

	// 				/*Xét password mới cho user*/
	// 				mvUEP.formData.password = mvUEP.tmppassword;
	// 				mvUEP.formData.cfpassword = mvUEP.tmppassword;

	// 				// mvUEP.formData.cfpassword = mvUEP.tmpcfpassword;
	// 				console.log('test', mvUEP.formData);

	// 				userSvc.update(mvUEP.formData, mvUEP.queryParams.id).then(function(resp){
	// 					$bzPopup.toastr({
	// 						type: 'success',
	// 						data:{
	// 							title: 'Thành viên',
	// 							message: resp.message
	// 						}
	// 					});

	// 					$state.go('user-sale', {id: null});
	// 				},function(err){
	// 					$bzPopup.toastr({
	// 						type: 'error',
	// 						data:{
	// 							title: 'Thành viên',
	// 							message: err.data.message
	// 						}
	// 					});
	// 					mvUEP.lockForm = false;
	// 				});
	// 			}
	// 		}
	// 	}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var userEditCtrl = (function(){
	'use strict';

	angular
	.module('bzUser')
	.controller('userEditCtrl', userEditCtrl);

	function userEditCtrl($scope, $window, $state, $stateParams, $bzPopup, userRoles, authSvc, userSvc, bzResourceSvc, salemanScopes){
		var userEdit = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if( !(authSvc.isSuperAdmin() || authSvc.isSaleManager()) ){
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/


		// Vars
		userEdit.queryParams = $stateParams;
		userEdit.userRoles = userRoles;
		userEdit.salemanScopes = salemanScopes;
		userEdit.isEditMode = userEdit.queryParams.id !== undefined;

		// Methods
		userEdit.save = save;

		// Init
		getData();

		function initFormData(data){
			userEdit.lockForm = false;
			userEdit.submitted = false;

			/*init user chung*/
			userEdit.formData = {
				name: userEdit.isEditMode ? data.name : '',
				email: userEdit.isEditMode ? data.email : '',
				password: '',
				cfpassword: '',
				roles: userEdit.isEditMode ? data.roles : ['user'],
				status: userEdit.isEditMode ? data.status : false,
				saleman: {
					active: userEdit.isEditMode ? data.saleman.active : false,
					manager: userEdit.isEditMode ? data.saleman.manager : false,
					types: userEdit.isEditMode ? data.saleman.types : [],
				}
			};
			/*init user module sale*/
			if(userEdit.queryParams.module == 'sale'){
				userEdit.formData.roles = ['admin', 'user', 'sale'];
				userEdit.formData.status = userEdit.isEditMode ? data.status : true;
			}
			/*end init user module sale*/
		}

		function getData(){
			if(userEdit.isEditMode){
				bzResourceSvc.api($window.settings.services.userApi + '/user/:id', {id: '@id'})
				.get({id: userEdit.queryParams.id}, function(resp){
					delete resp.__v;
					delete resp.password_token;
					delete resp.created;
					delete resp.provider;
					delete resp.activeToken;

					initFormData(resp);
				});
			} else {
				initFormData();
			}
		}

		function save(isValid){
			userEdit.submitted = true;

			if(!userEdit.lockForm && isValid){
				userEdit.lockForm = true;

				/*Format Status Đúng định dạng true false*/
				if(userEdit.formData.status == 1)
					userEdit.formData.status = true;
				else if(userEdit.formData.status == 0)
					userEdit.formData.status = false;

				/*Thêm User*/
				if(!userEdit.isEditMode){
					
					// delete userEdit.formData.saleman;
					userEdit.formData.cfpassword = userEdit.formData.password;
					// console.log('testxx', userEdit.formData);
					// return;
					userSvc.create(userEdit.formData).then(function(resp){
						$bzPopup.toastr({
							type: 'success',
							data:{
								title: 'Thành viên',
								message: resp.message
							}
						});

						$state.go('user-sale', {id: null});
					},function(err){
						$bzPopup.toastr({
							type: 'error',
							data:{
								title: 'Thành viên',
								message: err.data.message
							}
						});
						userEdit.lockForm = false;
					});
				}

				/*Sửa User*/
				else if(userEdit.isEditMode) {

					/*Format Status Đúng định dạng true false*/
					if(userEdit.formData.status == 1)
						userEdit.formData.status = true;
					else if(userEdit.formData.status == 0)
						userEdit.formData.status = false;

					/*Xét password mới cho user*/
					userEdit.formData.password = userEdit.tmppassword;
					userEdit.formData.cfpassword = userEdit.tmppassword;

					// userEdit.formData.cfpassword = userEdit.tmpcfpassword;
					console.log('test', userEdit.formData);

					userSvc.update(userEdit.formData, userEdit.queryParams.id).then(function(resp){
						$bzPopup.toastr({
							type: 'success',
							data:{
								title: 'Thành viên',
								message: resp.message
							}
						});

						$state.go('user-sale', {id: null});
					},function(err){
						$bzPopup.toastr({
							type: 'error',
							data:{
								title: 'Thành viên',
								message: err.data.message
							}
						});
						userEdit.lockForm = false;
					});
				}
			}
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();

var statisticCtrl = (function(){
	'use strict';

	angular
	.module('bzStatistic')
	.controller('statisticCtrl', statisticCtrl);

	function statisticCtrl($scope, $state, $stateParams, $bzPopup, authSvc, NgTableParams, bzResourceSvc, statisticSvc){
		/* jshint validthis: true */
		var statistic = this;

		/*=========XÉT QUYỀN TRUY CẬP ROUTER=========*/
		if( !(authSvc.isSuperAdmin() || authSvc.isSaleManager()) ){
			$state.go('error403');
		}
		/*=======END XÉT QUYỀN TRUY CẬP ROUTER=======*/

		/*Vars*/
		statistic.loading = true;
		statistic.selectedItems = [];
		statistic.queryParams = $stateParams;
		statistic.queryParams.page = $stateParams.page || 1;
		statistic.queryParams.pageCount = 10;
		
		/*Methods*/
		statistic.filter = filter;
		statistic.filterReset = filterReset;
		statistic.filterDay = filterDay;
		statistic.convert = convert;
		statistic.exportExcel = exportExcel;

		/*Init*/
		getSaleman(); 

		/*Function*/
		function getSaleman () {
			statisticSvc.getStatistic(statistic.queryParams).then(function(resp){
				// console.log('test',$stateParams,resp);
				let totalRevenue = 0;
				let convertAvg = 0;
				let tmpTAvg = 0;
				for (var i = 0; i < resp.items.length; i++) {
					tmpTAvg += resp.items[i].totalFinish/resp.items[i].totalContact || 0;
					totalRevenue += resp.items[i].revenue;
				}
				convertAvg = parseFloat(tmpTAvg).toFixed(5);
				/*Tổng doanh thu và tỷ lệ convert trung bình*/
				statistic.totalRevenue = totalRevenue || 0;
				statistic.convertAvg = parseFloat(tmpTAvg/resp.items.length).toFixed(5) || 0;

				/*Phân trang*/
				getData(resp);
			});
		}

		function getData(data){
			statistic.statistics = data.items ? data.items : [];
			statistic.table = new NgTableParams({count: 10}, {
				counts: [],
				dataset: statistic.statistics
				// getData: function(params) {
				// 	params.total(statistic.statistics.length);
				// 	return statistic.statistics;
				// }
			});
			statistic.loading = false;
		}

		function exportExcel(){
			var data = [['Saleman','Doanh số','Tỉ lệ Convert']];
			var options = {
				type: 'xlsx',
				sheetName: 'SheetJS1',
				fileName: 'Thống kê',
			};
			
			for (var i = 0; i < statistic.statistics.length; i++) {
				let tmp = [
				statistic.statistics[i].email,
				statistic.statistics[i].revenue,
				parseFloat(convert(statistic.statistics[i]))
				];
				data.push(tmp);
			}
			ExcelJs.exportExcel(data, options);
		}

		function filter(sortField){
			$state.go('.', statistic.queryParams, {notify:false}).then(function(){
				$state.reload();
			});
		}

		function filterDay(type){
			statistic.queryParams.filterDay = type;
			filter();
		}

		function filterReset(){
			statistic.queryParams.type 				= null;
			statistic.queryParams.filterDay 		= null;

			$state.go('.', statistic.queryParams, {notify:false})
			.then(function(){
				$state.reload();
			});
		}

		function convert(item){
			item.convert = item.totalFinish/item.totalContact || 0;
			return parseFloat(item.convert).toFixed(5);
		}
		/*END END*/
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var saleContactProcCtrl = (function(){
	'use strict';

	angular
	.module('bzSaleContact')
	.controller('saleContactProcCtrl', saleContactProcCtrl);

	function saleContactProcCtrl($scope, $state, $filter, $stateParams, $bzPopup, $timeout,
		VIETNAM_MAP, LEANRNER_LEVEL_LIST, CAREER_LIST, BANK_LIST, LEVEL_LIST, CARESTATUS_LIST, QUALITYCALL_LIST, SOURCE_LIST, 
		Upload, authSvc, saleContactSvc, assignContactSvc, bzResourceSvc, logSvc){
		var mvSCP = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if( !(authSvc.isSuperAdmin() || authSvc.isSale()) ){
			$state.go('error403');
		}
		if(!$stateParams.id){
			$state.go('error404');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		mvSCP.dateTimeOptions = {locale:{format: 'DD/MM/YYYY h:mm A'}, timePicker: true, timePickerIncrement: 5};

		mvSCP.userAuth = authSvc.getProfile();
		mvSCP.roleManager =  authSvc.isSuperAdmin() || authSvc.isSaleManager();
		mvSCP.queryParams = $stateParams;
		mvSCP.contact = {};
		mvSCP.contactAssign = {};
		mvSCP.regDup = [];
		mvSCP.constLearnerLevel = LEANRNER_LEVEL_LIST;
		mvSCP.constCareer = CAREER_LIST;
		mvSCP.constBank = BANK_LIST;
		mvSCP.constLevel = LEVEL_LIST;
		mvSCP.constCare = CARESTATUS_LIST;
		mvSCP.constQtyCall = QUALITYCALL_LIST;
		mvSCP.contsSourceList = SOURCE_LIST;
		mvSCP.constMap = VIETNAM_MAP;

		// Methods
		mvSCP.findObject = helperJs.findObject;
		mvSCP.submit = submit;
		mvSCP.popupAssignToSaleman = assignContactSvc.assignSaleman;
		mvSCP.popupAssignToCMD = assignContactSvc.assignCMD;
		mvSCP.uploadPDF = uploadPDF;
		mvSCP.addPay = addPay;
		mvSCP.editPay = editPay;

		// Init
		getData();
		getHistory();

		function initFormData(data){
			mvSCP.submittedCallInfo = false;
			mvSCP.lockFormCallInfo = false;

			mvSCP.submittedLevel1 = false;
			mvSCP.lockFormLevel1 = false;

			mvSCP.submittedLevel27 = false;
			mvSCP.lockFormLevel27 = false;

			mvSCP.submittedLevel8 = false;
			mvSCP.lockFormLevel8 = false;

			data.call_info = data.call_info || {};
			data.level_1 = data.level_1 || {};
			data.level_2 = data.level_2 || {};
			data.level_3 = data.level_3 || {};
			data.level_4 = data.level_4 || {};
			data.level_5 = data.level_5 || {};
			data.level_6 = data.level_6 || {};
			data.level_7 = data.level_7 || {};
			data.level_8 = data.level_8 || {};

			/*Form thông tin contact*/
			mvSCP.formData = {
				call_info: {
					call_level: data.call_info.call_level,
					call_status: data.call_info.call_status || '',
					call_quality: data.call_info.call_quality,
					call_note: data.call_info.call_note,
					recall_schedule: data.call_info.recall_schedule,
					is_recall_schedule: data.call_info.is_recall_schedule,
					care_status: data.call_info.care_status,
					history: data.call_info.history,
				},
				level_1:{
					name: data.level_1.name,
					name_kid: data.level_1.name_kid,
					email: data.level_1.email,
					skype: data.level_1.skype,
					phone: data.level_1.phone,
					phone2: data.level_1.phone2,
					age: data.level_1.age,
					dob: data.level_1.dob,
					source_contact: data.level_1.source_contact,
					career: data.level_1.career,
					address: data.level_1.address,
					province: data.level_1.province,
					district: data.level_1.district,
					learn_info: data.level_1.learn_info,
					learn_begin_at: data.level_1.learn_begin_at,
					teacher_request: data.level_1.teacher_request
				},
				level_2: {
					type: data.level_2.type,
					learner_demand: data.level_2.learner_demand,
					learner_level: data.level_2.learner_level
				},
				level_3: {
					accept_test: data.level_3.accept_test,
					schedule_inteview: data.level_3.schedule_inteview
				},
				level_4: {
					inteview_or_online: data.level_4.inteview_or_online,
				},
				level_5: {
					is_tested: data.level_5.is_tested,
					test_file: data.level_5.test_file,
				},
				level_6: {
					received_distance: data.level_6.received_distance,
				},
				level_7: {
					fee_partial: data.level_7.fee_partial,
				},
				level_8: {
					money_finish: data.level_8.money_finish,
					pay_type: data.level_8.pay_type,
					bank: data.level_8.bank,
					is_received_money: data.level_8.is_received_money,
					history: data.level_8.history || [],
				},
				dup: data.dup
			};

			/*Set biến tmp model của level 8*/
			if(data.level_8.history.length > 0){
				mvSCP.level8Btn = 'update';
				let lg =data.level_8.history.length;
				mvSCP.dataFormLevel_8 = {
					money_finish: data.level_8.history[lg-1].money_finish,
					pay_type: data.level_8.history[lg-1].pay_type,
					bank: data.level_8.history[lg-1].bank,
					is_received_money: data.level_8.history[lg-1].is_received_money,
				};
			}
			else{
				mvSCP.level8Btn = 'add';

				mvSCP.dataFormLevel_8 = {
					money_finish: data.level_8.money_finish,
					pay_type: data.level_8.pay_type,
					bank: data.level_8.bank,
					is_received_money: data.level_8.is_received_money,
				};
			}

			/*Dùng để kiểm tra giá trị hiện tại có khác với giá trị ban đầu ko*/
			mvSCP.checkHistory = {};
			mvSCP.checkHistory.call_info = angular.copy(mvSCP.formData.call_info);
		}

		function getData(){
			saleContactSvc.get({id: mvSCP.queryParams.id}, function(resp){
				/*hạn chế quyền truy cập cả saleman thường khi vào contact của saleman khác */
				if(!(authSvc.isSuperAdmin() || authSvc.isSaleManager())
					&&(resp.contact._sale_usermember != authSvc.getProfile().id))
				{
					$state.go('error404');
				}
				/*Xử lý dữ liệu*/
				mvSCP.contact = resp.contact;
				mvSCP.contactAssign[resp.contact._id] = true;
				mvSCP.regDup = resp.dup;
				initFormData(resp.contact);
			});
		}

		/*Lấy lịch sử thao tác*/
		function getHistory(){
			logSvc.getLogContact(mvSCP.queryParams.id)
			.then(function(resp){
				// console.log('his', resp);
				mvSCP.histories = resp.items;
			});
		}

		/*Action Khi click thêm lịch sử đóng tiền*/
		function addPay(){
			mvSCP.level8Btn = 'add';
			mvSCP.dataFormLevel_8 = {
				money_finish: 0,
				pay_type: '',
				bank: '',
				is_received_money: false
			};
		}

		/*Action Khi click sửa lịch sử đóng tiền*/
		function editPay(histr){
			mvSCP.level8Btn = 'edit-history';
			mvSCP.tmpHisL8 = angular.copy(histr);
			mvSCP.dataFormLevel_8 = {
				money_finish: 		mvSCP.tmpHisL8.money_finish,
				pay_type: 			mvSCP.tmpHisL8.pay_type,
				bank: 				mvSCP.tmpHisL8.bank,
				is_received_money: 	mvSCP.tmpHisL8.is_received_money,
			};
		}

		/*Action Khi click Cập Nhật lịch sử đóng tiền*/
		function submit(type, isValid){
			var msg = {
				title: 'Liên hệ',
				success: 'Cập nhật thành công.',
				error: 'Lỗi không thể cập nhật dữ liệu.'
			};
			var dataSend = {};

			switch(type){
				case 'callinfo':
				mvSCP.submittedCallInfo = true;

				msg.success = 'Cập nhật thông tin cuộc gọi thành công.';
				msg.error = 'Không thể cập nhật thông tin cuộc gọi.';

				if(!mvSCP.lockFormCallInfo && isValid){
					mvSCP.lockFormCallInfo = true;

					/*Nếu thông tin cuộc gọi có thay đổi thì lưu lịch sử*/
					if(!angular.equals(mvSCP.formData.call_info, mvSCP.checkHistory.call_info)){
						/*Set Level cho Contact*/
						if(mvSCP.formData.call_info.call_status)
							mvSCP.formData.call_info.call_level = mvSCP.formData.call_info.call_status.split("_")[0];
						else 
							mvSCP.formData.call_info.call_level = 0;

						/*push history vào call_info.history*/
						var hisCallInfo = angular.copy(mvSCP.formData.call_info);
						delete hisCallInfo.history;
						hisCallInfo.createdAt = new Date();
						mvSCP.formData.call_info.history.push(hisCallInfo);
						/*Xét lại biến check history để kiểm tra lần sau*/
						mvSCP.checkHistory.call_info = angular.copy(mvSCP.formData.call_info);
						/*Lưu lịch sử thì trạng thái trùng trở về false*/
						mvSCP.formData.dup = Boolean(0);
					}

					/*Format data and Save Contact*/
					var dataForm = angular.copy(mvSCP.formData);
					dataSend.call_info = dataForm.call_info;
					dataSend.dup = dataForm.dup;

					save(dataSend, msg, function(){
						mvSCP.lockFormCallInfo = false;
					}, function(){
						mvSCP.lockFormCallInfo = false;
					});
				}
				break;
				case 'level1':
				mvSCP.submittedLevel1 = true;

				if(!mvSCP.lockFormLevel1 && isValid){
					mvSCP.lockFormLevel1 = true;

					/*Format data and Save Contact*/
					var dataForm = angular.copy(mvSCP.formData);
					dataSend.level_1 = dataForm.level_1;
					save(dataSend, msg, function(){
						mvSCP.lockFormLevel1 = false;
					}, function(){
						mvSCP.lockFormLevel1 = false;
					});
				}
				break;
				case 'level27':
				mvSCP.submittedLevel27 = true;

				if(!mvSCP.lockFormLevel27 && isValid){
					mvSCP.lockFormLevel27 = true;

					/*Format data and Save Contact*/
					var dataForm = angular.copy(mvSCP.formData);
					dataSend.level_2 = dataForm.level_2;
					dataSend.level_3 = dataForm.level_3;
					dataSend.level_4 = dataForm.level_4;
					dataSend.level_5 = dataForm.level_5;
					dataSend.level_6 = dataForm.level_6;
					dataSend.level_7 = dataForm.level_7;
					save(dataSend, msg, function(){
						mvSCP.lockFormLevel27 = false;
					}, function(){
						mvSCP.lockFormLevel27 = false;
					});
				}
				break;
				case 'level8':
				mvSCP.submittedLevel8 = true;

				if(!mvSCP.lockFormLevel8 && isValid){
					mvSCP.lockFormLevel8 = true;

					/*Format data and Save Contact*/
					if(mvSCP.level8Btn == 'update'){
						/*Update lại history mới nhất*/
						let lg = mvSCP.formData.level_8.history.length;
						mvSCP.formData.level_8.history[lg-1].money_finish = mvSCP.dataFormLevel_8.money_finish;
						mvSCP.formData.level_8.history[lg-1].pay_type = mvSCP.dataFormLevel_8.pay_type;
						mvSCP.formData.level_8.history[lg-1].bank = mvSCP.dataFormLevel_8.bank;
						mvSCP.formData.level_8.history[lg-1].is_received_money = mvSCP.dataFormLevel_8.is_received_money;

						dataSend.level_8 = {};
						dataSend.level_8 = mvSCP.dataFormLevel_8;
						dataSend.level_8.history = mvSCP.formData.level_8.history;

					} else if(mvSCP.level8Btn == 'add'){
						/*Xử lý thêm lịch sử vào biến history*/
						var tmpHis8 = angular.copy(mvSCP.dataFormLevel_8);
						tmpHis8._sale_usermember = mvSCP.contact._sale_usermember;
						tmpHis8.type = mvSCP.contact.level_2.type || 'work';
						mvSCP.formData.level_8.history.push(tmpHis8);

						dataSend.level_8 = {};
						dataSend.level_8 = mvSCP.dataFormLevel_8;
						dataSend.level_8.history = mvSCP.formData.level_8.history;
					} else if(mvSCP.level8Btn == 'edit-history'){

						dataSend.level_8 = {};
						/*Nếu đang edit history mới nhất thì update lại*/
						if(mvSCP.formData.level_8.history[0]._id == mvSCP.tmpHisL8._id){
							dataSend.level_8 = mvSCP.dataFormLevel_8;
						}else{
							dataSend.level_8 = {
								money_finish: mvSCP.formData.level_8.money_finish,
								pay_type: mvSCP.formData.level_8.pay_type,
								bank: mvSCP.formData.level_8.bank,
								is_received_money: mvSCP.formData.level_8.is_received_money,
							};
						}
						/*Set lại history*/
						if(mvSCP.tmpHisL8){
							for ( var k in mvSCP.formData.level_8.history) {
								if (mvSCP.formData.level_8.history.hasOwnProperty(k)) {
									if(mvSCP.formData.level_8.history[k]._id == mvSCP.tmpHisL8._id){
										mvSCP.formData.level_8.history[k].money_finish = mvSCP.dataFormLevel_8.money_finish;
										mvSCP.formData.level_8.history[k].pay_type = mvSCP.dataFormLevel_8.pay_type;
										mvSCP.formData.level_8.history[k].bank = mvSCP.dataFormLevel_8.bank;
										mvSCP.formData.level_8.history[k].is_received_money = mvSCP.dataFormLevel_8.is_received_money;
									}
								}
							}
						}
						dataSend.level_8.history = mvSCP.formData.level_8.history;
					}

					save(dataSend, msg, function(){
						mvSCP.lockFormLevel8 = false;
					}, function(){
						mvSCP.lockFormLevel8 = false;
					});
				}
				break;
			}
		}

		function save(data, messages, successCb, errorCb){
			/*Save*/
			var promise = saleContactSvc.update({id: mvSCP.queryParams.id}, data).$promise;
			promise.then(function(resp){
				mvSCP.contact = resp;
				$bzPopup.toastr({
					type: 'success',
					data:{
						title: messages.title,
						message: messages.success
					}
				});

				if(angular.isFunction(successCb)){
					successCb();
				}
				$timeout(function(){$state.reload();},500);
			}, function(err){
				$bzPopup.toastr({
					type: 'error',
					data:{
						title: messages.title,
						message: messages.error
					}
				});

				if(angular.isFunction(errorCb)){
					errorCb();
				}
				$timeout(function(){$state.reload();},500);
			});
		}

		function uploadPDF(file){
			if(file == null) return;
			Upload.upload({
				url: settingJs.configs.adminUrl + '/sale-contact/upload-file-test',
				data: {
					file: file, 
					type:'pdf_test', 
					prefix: mvSCP.contact._id, 
					id: mvSCP.contact._id
				}
			}).then(function (resp) {
				setTimeout(function() {
					saleContactSvc.get({id: mvSCP.queryParams.id}, function(resp1){
						mvSCP.formData.level_5.test_file = resp1.contact.level_5.test_file;
						$bzPopup.toastr({
							type: 'Success',
							data:{
								title: 'Thành công!',
								message: 'Upload file thành công!'
							}
						});
					});
				}, 2000);
			}, function (err) {
				// console.log('Error status: ', err);
				$bzPopup.toastr({
					type: 'error',
					data:{
						title: 'Lỗi!',
						message: 'Upload file Lỗi!'
					}
				});
			}, function (evt) {
				$scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();

var saleContactTmpCtrl = (function(){
	'use strict';

	angular
	.module('bzSaleContact')
	.controller('saleContactTmpCtrl', saleContactTmpCtrl);

	function saleContactTmpCtrl($scope, $log, $state, $filter, $stateParams, $uibModalStack, $uibModal, $bzPopup, 
		authSvc, NgTableParams, ngTableEventsChannel, saleContactTmpSvc, saleContactSvc, assignContactSvc, bzResourceSvc){
		/* jshint validthis: true */
		var SCTMP = this;

		/*==============XÉT QUYỀN TRUY CẬP ROUTER==============*/
		if( !(authSvc.isSuperAdmin() || authSvc.isSaleManager()) ){
			$state.go('error403');
		}
		/*============END XÉT QUYỀN TRUY CẬP ROUTER============*/

		/*===============VARS===============*/
		SCTMP.queryParams = $stateParams;
		SCTMP.loading = true;
		SCTMP.contacts = [];

		SCTMP.formData = {
			name: '',
			email: '',
			skype: '',
			phone: '',
			age:'',
			type: '',
		};


		/*===============METHOD===============*/
		SCTMP.filter = filter;
		SCTMP.filterReset = filterReset;
		SCTMP.save = save;

		/*==================INIT==================*/
		getData();

		ngTableEventsChannel.onPagesChanged(function() {
			$scope.SCTMP.queryParams.page = SCTMP.table.page();
			$state.go('.',$scope.SCTMP.queryParams);
		}, $scope, SCTMP.table);

		/*=================FUNCTION=================*/

		function getData(){
			saleContactTmpSvc.getContactTmp(SCTMP.queryParams).then(function(resp){
				SCTMP.contacts = resp.items;
				SCTMP.table = new NgTableParams({count: 20}, {
					counts:[],
					getData: function(params) {
						params.total(resp.totalItems);
						return SCTMP.contacts;
					}
				});
				SCTMP.table.page(SCTMP.queryParams.page);
				SCTMP.loading = false;
			});
		}

		function filter(params){
			SCTMP.queryParams.page = 1;
			$state.go('.', SCTMP.queryParams, {notify:false}).then(function(){
				$state.reload();
			});
		}

		function filterReset(){
			SCTMP.queryParams.keyword 			= null;
			$state.go('.', SCTMP.queryParams, {notify:false})
			.then(function(){
				$state.reload();
			});
		}
		/*end filter*/

		function save(isValid){
			SCTMP.submitted = true;

			if(!SCTMP.lockForm && isValid){
				SCTMP.lockForm = true;
				console.log('kkk', SCTMP.formData);

				saleContactTmpSvc.createContactTmp(SCTMP.formData).then(function(resp){
					console.log('uuu', resp);
					/*Thêm Thành công*/
					$bzPopup.toastr({
						type: 'success',
						data:{
							title: 'Liên hệ',
							message: 'Thêm liên hệ thành công!'
						}
					});
					$state.reload();
				});
			}
		}

	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};
	return {
		resolve : resolve
	};
})();
var saleContactSearchCtrl = (function(){
	'use strict';

	angular
	.module('bzSaleContact')
	.controller('saleContactSearchCtrl', saleContactSearchCtrl);

	function saleContactSearchCtrl($scope, $state, $stateParams, authSvc, NgTableParams, ngTableEventsChannel, saleContactSvc){
		/* jshint validthis: true */
		var vmSCT = this;

		/*==============XÉT QUYỀN TRUY CẬP ROUTER==============*/
		if( !(authSvc.isSuperAdmin() || authSvc.isSale()) ){
			$state.go('error403');
		}
		/*============END XÉT QUYỀN TRUY CẬP ROUTER============*/

		/*===============VARS===============*/
		vmSCT.loading = true;
		vmSCT.queryParams = $stateParams;
		vmSCT.contacts = [];

		/*===============METHOD===============*/
		vmSCT.filter = filter;
		vmSCT.filterReset = filterReset;

		/*==================INIT==================*/
		getData();

		ngTableEventsChannel.onPagesChanged(function() {
			$scope.vmSCT.queryParams.page = vmSCT.table.page();
			$state.go('.',$scope.vmSCT.queryParams);
		}, $scope, vmSCT.table);

		/*=================FUNCTION=================*/

		function getData(){
			saleContactSvc.get(vmSCT.queryParams, function(resp){
				vmSCT.contacts = resp.items;
				
				/*Nếu không có keywork thì page sẽ rỗng*/
				if(!vmSCT.queryParams.keyword){
					vmSCT.contacts = [];
					vmSCT.queryParams.page =1;
				}				

				vmSCT.table = new NgTableParams({count: 10}, {
					counts:[],
					getData: function(params) {
						params.total(resp.totalItems);
						return vmSCT.contacts;
					}
				});
				vmSCT.table.page(vmSCT.queryParams.page);
				vmSCT.loading = false;
			});
		}

		/*filter*/
		function filter(params){
			vmSCT.queryParams.page = 1;
			$state.go('.', vmSCT.queryParams, {notify:false}).then(function(){
				$state.reload();
			});
		}

		function filterReset(){
			vmSCT.queryParams.keyword 			= null;

			$state.go('.', vmSCT.queryParams, {notify:false})
			.then(function(){
				$state.reload();
			});
		}
		/*end filter*/
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var contactSalemanEvictDupCtrl = (function(){
	'use strict';

	angular
	.module('bzSaleContact')
	.controller('contactSalemanEvictDupCtrl', contactSalemanEvictDupCtrl);

	function contactSalemanEvictDupCtrl($scope, $log, $state, $stateParams, $uibModal, $bzPopup, $filter, $element,
		authSvc, LEVEL_LIST, CARESTATUS_LIST, QUALITYCALL_LIST, NgTableParams, ngTableEventsChannel, 
		saleContactSvc, assignContactSvc, bzResourceSvc){
		/* jshint validthis: true */
		var mvCSMED = this;

		/*=========XÉT QUYỀN TRUY CẬP ROUTER=========*/
		if( !(authSvc.isSuperAdmin() || authSvc.isSaleManager()) ){
			$state.go('error403');
		}
		/*=======END XÉT QUYỀN TRUY CẬP ROUTER=======*/


		/*=======VARS=======*/
		mvCSMED.loading = true;
		mvCSMED.queryParams = $stateParams;


		// if(authSvc.isSuperAdmin() || authSvc.isSaleManager())
		// 	mvCSMED.queryParams.uid = $stateParams.uid || authSvc.getProfile().uid;
		// else
		// 	mvCSMED.queryParams.uid = authSvc.getProfile().uid;

		mvCSMED.contacts = [];
		mvCSMED.userSaleActive = [];
		mvCSMED.totalFilters = {};
		mvCSMED.constLevel = LEVEL_LIST;
		mvCSMED.constCare = CARESTATUS_LIST;
		mvCSMED.checkboxes = {
			checked: false,
			items: {}
		};

		/*==================METHODS==================*/
		mvCSMED.changeSaleman = changeSaleman;
		mvCSMED.linkFilter = linkFilter;
		mvCSMED.filter = filter;
		mvCSMED.remove = remove;
		mvCSMED.filterReset = filterReset;
		mvCSMED.findObject = helperJs.findObject;
		mvCSMED.popupAssignToCMD = assignContactSvc.assignCMD;
		mvCSMED.popupAssignToSaleman = assignContactSvc.assignSaleman;

		/*==================INIT==================*/
		angular.element('#reservationtime').daterangepicker({
			startDate: $filter('date')(mvCSMED.queryParams.startDate, 'd/M/yyyy h:mm:ss a'),
        	endDate: $filter('date')(mvCSMED.queryParams.endDate, 'd/M/yyyy h:mm:ss a'),
			timePicker: true,
			timePickerIncrement: 30,
			locale: {
				format: 'DD/MM/YYYY h:mm A'
			}
		});

		angular.element('#reservationtime').on('apply.daterangepicker', function(ev, picker) {
			/*do something, like calling a function*/
			mvCSMED.queryParams.startDate = picker.startDate.toISOString();
			mvCSMED.queryParams.endDate = picker.endDate.toISOString();
			mvCSMED.linkFilter('filterDay','orther');
		});

		getData();

		ngTableEventsChannel.onPagesChanged(function() {
			$scope.mvCSMED.queryParams.page = mvCSMED.table.page();
			$state.go('.',$scope.mvCSMED.queryParams);
		}, $scope, mvCSMED.table);

		/*==================FUNTION==================*/

		function getData(){
			saleContactSvc.get(mvCSMED.queryParams, function(resp){
				mvCSMED.totalFilters = resp.totalFilters;
				mvCSMED.contacts = resp.items;
				mvCSMED.userSaleActive = resp.userSaleActive;
				mvCSMED.table = new NgTableParams({count: 10}, {
					counts:[],
					getData: function(params) {
						params.total(resp.totalItems);
						return mvCSMED.contacts;
					}
				});
				mvCSMED.table.page(mvCSMED.queryParams.page);
				mvCSMED.loading = false;
				initSelecteds(mvCSMED.contacts, mvCSMED.checkboxes, '_id');
			});
		}
		
		/*Thay đổi saleman hiển thị*/
		function changeSaleman(id){
			$state.go('.', mvCSMED.queryParams , {notify:false}).then(function(){
				$state.reload();
			});
		}

		function linkFilter(field, value){
			mvCSMED.queryParams.page = 1;
			mvCSMED.queryParams[field] = value;

			$state.go('.', mvCSMED.queryParams , {notify:false}).then(function(){
				$state.reload();
			});
		}

		function filter(params){
			mvCSMED.queryParams.page = 1;
			$state.go('.', mvCSMED.queryParams, {notify:false}).then(function(){
				$state.reload();
			});
		}

		function filterReset(){
			mvCSMED.queryParams.keyword 			= null;
			mvCSMED.queryParams.type 				= null;
			mvCSMED.queryParams.is_finish 		= null;
			mvCSMED.queryParams.call_status 		= null;
			mvCSMED.queryParams.care_status 		= null;
			mvCSMED.queryParams.call_level 		= null;
			mvCSMED.queryParams.is_recall_schedule = null;
			mvCSMED.queryParams.schedule_inteview = null;
			mvCSMED.queryParams.filterDay 		= null;
			mvCSMED.queryParams.startDate 		= null;
			mvCSMED.queryParams.endDate 			= null;

			$state.go('.', mvCSMED.queryParams, {notify:false})
			.then(function(){
				$state.reload();
			});
		}

		function remove(id){
			$bzPopup.message({
				data:{
					title: 'Xóa',
					message: 'Bạn chắc chắn sẽ xóa dữ liệu này?',
					props: {
						btnOk: 'Đồng ý',
						btnOkEvent: function(){
							assignContactSvc.deleteContact(id)
							.then(function(resp){
								$bzPopup.toastr({
									type: 'success',
									data:{
										title: 'Xóa',
										message: 'Xóa bài viết thành công!'
									}
								});

								$state.reload();
							});
						},
						btnCancel: 'Hủy bỏ'
					}
				},
			});
		}

		/*Khởi tạo Selecteds*/
		function initSelecteds(dataTable, checkboxes, field){
			/*watch for check all checkbox*/
			$scope.$watch(function() {
				return checkboxes.checked;
			}, function(value) {
				angular.forEach(dataTable, function(item) {
					checkboxes.items[item[field]] = value;
				});
			});

			/*watch for data checkboxes*/
			$scope.$watch(function() {
				return checkboxes.items;
			}, function(values) {
				var checked = 0, unchecked = 0,
				total = dataTable.length;
				angular.forEach(dataTable, function(item) {
					checked   +=  (checkboxes.items[item[field]]) || 0;
					unchecked += (!checkboxes.items[item[field]]) || 0;
				});
				if ((unchecked == 0) || (checked == 0)) {
					checkboxes.checked = (checked == total);
				}

				/*grayed checkbox*/
				angular.element($element[0].getElementsByClassName("select-all")).prop("indeterminate", (checked != 0 && unchecked != 0));
			}, true);
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var contactSalemanEvictCtrl = (function(){
	'use strict';

	angular
	.module('bzSaleContact')
	.controller('contactSalemanEvictCtrl', contactSalemanEvictCtrl);

	function contactSalemanEvictCtrl($scope, $log, $state, $stateParams, $uibModal, $bzPopup, $filter, $element,
		authSvc, LEVEL_LIST, CARESTATUS_LIST, QUALITYCALL_LIST, NgTableParams, ngTableEventsChannel, 
		saleContactSvc, assignContactSvc, bzResourceSvc){
		/* jshint validthis: true */
		var mvCSME = this;

		/*=========XÉT QUYỀN TRUY CẬP ROUTER=========*/
		if( !(authSvc.isSuperAdmin() || authSvc.isSaleManager()) ){
			$state.go('error403');
		}
		/*=======END XÉT QUYỀN TRUY CẬP ROUTER=======*/


		/*=======VARS=======*/
		mvCSME.loading = true;
		mvCSME.queryParams = $stateParams;


		// if(authSvc.isSuperAdmin() || authSvc.isSaleManager())
		// 	mvCSME.queryParams.uid = $stateParams.uid || authSvc.getProfile().uid;
		// else
		// 	mvCSME.queryParams.uid = authSvc.getProfile().uid;

		mvCSME.contacts = [];
		mvCSME.userSaleActive = [];
		mvCSME.totalFilters = {};
		mvCSME.constLevel = LEVEL_LIST;
		mvCSME.constCare = CARESTATUS_LIST;
		mvCSME.checkboxes = {
			checked: false,
			items: {}
		};

		/*==================METHODS==================*/
		mvCSME.changeSaleman = changeSaleman;
		mvCSME.linkFilter = linkFilter;
		mvCSME.filter = filter;
		mvCSME.remove = remove;
		mvCSME.filterReset = filterReset;
		mvCSME.findObject = helperJs.findObject;
		mvCSME.popupAssignToCMD = assignContactSvc.assignCMD;
		mvCSME.popupAssignToSaleman = assignContactSvc.assignSaleman;

		/*==================INIT==================*/
		angular.element('#reservationtime').daterangepicker({
			startDate: $filter('date')(mvCSME.queryParams.startDate, 'd/M/yyyy h:mm:ss a'),
			endDate: $filter('date')(mvCSME.queryParams.endDate, 'd/M/yyyy h:mm:ss a'),
			timePicker: true,
			timePickerIncrement: 30,
			locale: {
				format: 'DD/MM/YYYY h:mm A'
			}
		});

		angular.element('#reservationtime').on('apply.daterangepicker', function(ev, picker) {
			/*do something, like calling a function*/
			mvCSME.queryParams.startDate = picker.startDate.toISOString();
			mvCSME.queryParams.endDate = picker.endDate.toISOString();
			mvCSME.linkFilter('filterDay','orther');
		});

		getData();

		ngTableEventsChannel.onPagesChanged(function() {
			$scope.mvCSME.queryParams.page = mvCSME.table.page();
			$state.go('.',$scope.mvCSME.queryParams);
		}, $scope, mvCSME.table);

		/*==================FUNTION==================*/

		function getData(){
			saleContactSvc.get(mvCSME.queryParams, function(resp){
				mvCSME.totalFilters = resp.totalFilters;
				mvCSME.contacts = resp.items;
				mvCSME.userSaleActive = resp.userSaleActive;
				mvCSME.table = new NgTableParams({count: 10}, {
					counts:[],
					getData: function(params) {
						params.total(resp.totalItems);
						return mvCSME.contacts;
					}
				});
				mvCSME.table.page(mvCSME.queryParams.page);
				mvCSME.loading = false;
				initSelecteds(mvCSME.contacts, mvCSME.checkboxes, '_id');
			});
		}
		
		/*Thay đổi saleman hiển thị*/
		function changeSaleman(id){
			$state.go('.', mvCSME.queryParams , {notify:false}).then(function(){
				$state.reload();
			});
		}

		function linkFilter(field, value){
			mvCSME.queryParams.page = 1;
			mvCSME.queryParams[field] = value;

			$state.go('.', mvCSME.queryParams , {notify:false}).then(function(){
				$state.reload();
			});
		}

		function filter(params){
			mvCSME.queryParams.page = 1;
			$state.go('.', mvCSME.queryParams, {notify:false}).then(function(){
				$state.reload();
			});
		}

		function filterReset(){
			mvCSME.queryParams.keyword 			= null;
			mvCSME.queryParams.type 				= null;
			mvCSME.queryParams.is_finish 		= null;
			mvCSME.queryParams.call_status 		= null;
			mvCSME.queryParams.care_status 		= null;
			mvCSME.queryParams.call_level 		= null;
			mvCSME.queryParams.is_recall_schedule = null;
			mvCSME.queryParams.schedule_inteview = null;
			mvCSME.queryParams.filterDay 		= null;
			mvCSME.queryParams.startDate 		= null;
			mvCSME.queryParams.endDate 			= null;

			$state.go('.', mvCSME.queryParams, {notify:false})
			.then(function(){
				$state.reload();
			});
		}

		function remove(id){
			$bzPopup.message({
				data:{
					title: 'Xóa',
					message: 'Bạn chắc chắn sẽ xóa dữ liệu này?',
					props: {
						btnOk: 'Đồng ý',
						btnOkEvent: function(){
							assignContactSvc.deleteContact(id)
							.then(function(resp){
								$bzPopup.toastr({
									type: 'success',
									data:{
										title: 'Xóa',
										message: 'Xóa bài viết thành công!'
									}
								});

								$state.reload();
							});
						},
						btnCancel: 'Hủy bỏ'
					}
				},
			});
		}

		/*Khởi tạo Selecteds*/
		function initSelecteds(dataTable, checkboxes, field){
			/*watch for check all checkbox*/
			$scope.$watch(function() {
				return checkboxes.checked;
			}, function(value) {
				angular.forEach(dataTable, function(item) {
					checkboxes.items[item[field]] = value;
				});
			});

			/*watch for data checkboxes*/
			$scope.$watch(function() {
				return checkboxes.items;
			}, function(values) {
				var checked = 0, unchecked = 0,
				total = dataTable.length;
				angular.forEach(dataTable, function(item) {
					checked   +=  (checkboxes.items[item[field]]) || 0;
					unchecked += (!checkboxes.items[item[field]]) || 0;
				});
				if ((unchecked == 0) || (checked == 0)) {
					checkboxes.checked = (checked == total);
				}

				/*grayed checkbox*/
				angular.element($element[0].getElementsByClassName("select-all")).prop("indeterminate", (checked != 0 && unchecked != 0));
			}, true);
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var contactSalemanDupCtrl = (function(){
	'use strict';

	angular
	.module('bzSaleContact')
	.controller('contactSalemanDupCtrl', contactSalemanDupCtrl);

	function contactSalemanDupCtrl($scope, $log, $state, $stateParams, $uibModal, $bzPopup, $filter, $element, $timeout,
		authSvc, LEVEL_LIST, CARESTATUS_LIST, QUALITYCALL_LIST, NgTableParams, ngTableEventsChannel, 
		saleContactSvc, assignContactSvc, bzResourceSvc){
		/* jshint validthis: true */
		var vmCSMD = this;

		/*=========XÉT QUYỀN TRUY CẬP ROUTER=========*/
		if( !(authSvc.isSuperAdmin() || authSvc.isSale()) ){
			$state.go('error403');
		}
		/*=======END XÉT QUYỀN TRUY CẬP ROUTER=======*/


		/*=======VARS=======*/
		vmCSMD.loading = true;
		vmCSMD.queryParams = $stateParams;


		if(authSvc.isSuperAdmin() || authSvc.isSaleManager())
			vmCSMD.queryParams.uid = $stateParams.uid || authSvc.getProfile().uid;
		else
			vmCSMD.queryParams.uid = authSvc.getProfile().uid;

		vmCSMD.contacts = [];
		vmCSMD.userSaleActive = [];
		vmCSMD.totalFilters = {};
		vmCSMD.constLevel = LEVEL_LIST;
		vmCSMD.constCare = CARESTATUS_LIST;
		vmCSMD.checkboxes = {
			checked: false,
			items: {}
		};

		/*==================METHODS==================*/
		vmCSMD.changeSaleman = changeSaleman;
		vmCSMD.linkFilter = linkFilter;
		vmCSMD.filter = filter;
		vmCSMD.remove = remove;
		vmCSMD.filterReset = filterReset;
		vmCSMD.findObject = helperJs.findObject;
		vmCSMD.popupAssignToCMD = assignContactSvc.assignCMD;
		vmCSMD.evict = evict;

		/*==================INIT==================*/
		angular.element('#reservationtime').daterangepicker({
			startDate: $filter('date')(vmCSMD.queryParams.startDate, 'd/M/yyyy h:mm:ss a'),
			endDate: $filter('date')(vmCSMD.queryParams.endDate, 'd/M/yyyy h:mm:ss a'),
			timePicker: true,
			timePickerIncrement: 30,
			locale: {
				format: 'DD/MM/YYYY h:mm A'
			}
		});

		angular.element('#reservationtime').on('apply.daterangepicker', function(ev, picker) {
			/*do something, like calling a function*/
			vmCSMD.queryParams.startDate = picker.startDate.toISOString();
			vmCSMD.queryParams.endDate = picker.endDate.toISOString();
			vmCSMD.linkFilter('filterDay','orther');
		});

		getData();

		ngTableEventsChannel.onPagesChanged(function() {
			$scope.vmCSMD.queryParams.page = vmCSMD.table.page();
			$state.go('.',$scope.vmCSMD.queryParams);
		}, $scope, vmCSMD.table);

		/*==================FUNTION==================*/

		function getData(){
			saleContactSvc.get(vmCSMD.queryParams, function(resp){
				vmCSMD.totalFilters = resp.totalFilters;
				vmCSMD.contacts = resp.items;
				vmCSMD.userSaleActive = resp.userSaleActive;
				vmCSMD.table = new NgTableParams({count: 10}, {
					counts:[],
					getData: function(params) {
						params.total(resp.totalItems);
						return vmCSMD.contacts;
					}
				});
				vmCSMD.table.page(vmCSMD.queryParams.page);
				vmCSMD.loading = false;
				initSelecteds(vmCSMD.contacts, vmCSMD.checkboxes, '_id');
			});
		}
		
		/*Thay đổi saleman hiển thị*/
		function changeSaleman(id){
			$state.go('.', vmCSMD.queryParams , {notify:false}).then(function(){
				$state.reload();
			});
		}

		function linkFilter(field, value){
			vmCSMD.queryParams.page = 1;
			vmCSMD.queryParams[field] = value;

			$state.go('.', vmCSMD.queryParams , {notify:false}).then(function(){
				$state.reload();
			});
		}

		function filter(params){
			vmCSMD.queryParams.page = 1;
			$state.go('.', vmCSMD.queryParams, {notify:false}).then(function(){
				$state.reload();
			});
		}

		function filterReset(){
			vmCSMD.queryParams.keyword 			= null;
			vmCSMD.queryParams.type 				= null;
			vmCSMD.queryParams.is_finish 		= null;
			vmCSMD.queryParams.call_status 		= null;
			vmCSMD.queryParams.care_status 		= null;
			vmCSMD.queryParams.call_level 		= null;
			vmCSMD.queryParams.is_recall_schedule = null;
			vmCSMD.queryParams.schedule_inteview = null;
			vmCSMD.queryParams.filterDay 		= null;
			vmCSMD.queryParams.startDate 		= null;
			vmCSMD.queryParams.endDate 			= null;

			$state.go('.', vmCSMD.queryParams, {notify:false})
			.then(function(){
				$state.reload();
			});
		}

		function remove(id){
			$bzPopup.message({
				data:{
					title: 'Xóa',
					message: 'Bạn chắc chắn sẽ xóa dữ liệu này?',
					props: {
						btnOk: 'Đồng ý',
						btnOkEvent: function(){
							assignContactSvc.deleteContact(id)
							.then(function(resp){
								$bzPopup.toastr({
									type: 'success',
									data:{
										title: 'Xóa',
										message: 'Xóa bài viết thành công!'
									}
								});

								$state.reload();
							});
						},
						btnCancel: 'Hủy bỏ'
					}
				},
			});
		}

		/*Thu hồi contacts*/
		function evict(){
			var modalInstance = $uibModal.open({
				animation:true,
				templateUrl: 'modules/global-popup/message/view.html',
				controller: function($rootScope, $scope, $uibModalInstance){
					$scope.popTitle = "Thu hồi Contacts";
					$scope.message = "Bạn có chắc muốn thu hồi những Contacts đã chọn";
					$scope.ok = function(){
						assignContactSvc.evictContact(vmCSMD.checkboxes).then(function(resp){
							
							var dataNoti = {
								_sale_usermember: authSvc.getProfile().id,
							};
							$rootScope.$emit('angular-changeNoti');
							$timeout(function(){
								$state.reload();
							},1000);
							$timeout(function(){
								$uibModalInstance.close();
							},300);

						});
					}
				}
			});
		}

		/*Khởi tạo Selecteds*/
		function initSelecteds(dataTable, checkboxes, field){
			/*watch for check all checkbox*/
			$scope.$watch(function() {
				return checkboxes.checked;
			}, function(value) {
				angular.forEach(dataTable, function(item) {
					checkboxes.items[item[field]] = value;
				});
			});

			/*watch for data checkboxes*/
			$scope.$watch(function() {
				return checkboxes.items;
			}, function(values) {
				var checked = 0, unchecked = 0,
				total = dataTable.length;
				angular.forEach(dataTable, function(item) {
					checked   +=  (checkboxes.items[item[field]]) || 0;
					unchecked += (!checkboxes.items[item[field]]) || 0;
				});
				if ((unchecked == 0) || (checked == 0)) {
					checkboxes.checked = (checked == total);
				}

				/*grayed checkbox*/
				angular.element($element[0].getElementsByClassName("select-all")).prop("indeterminate", (checked != 0 && unchecked != 0));
			}, true);
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var contactSalemanCtrl = (function(){
	'use strict';

	angular
	.module('bzSaleContact')
	.controller('contactSalemanCtrl', contactSalemanCtrl);

	function contactSalemanCtrl($scope, $log, $state, $stateParams, $uibModal, $bzPopup, $filter, $element, $timeout,
		authSvc, LEVEL_LIST, CARESTATUS_LIST, QUALITYCALL_LIST, NgTableParams, ngTableEventsChannel, 
		saleContactSvc, assignContactSvc, bzResourceSvc){
		/* jshint validthis: true */
		var vmCSM = this;

		/*=========XÉT QUYỀN TRUY CẬP ROUTER=========*/
		if( !(authSvc.isSuperAdmin() || authSvc.isSale()) ){
			$state.go('error403');
		}
		/*=======END XÉT QUYỀN TRUY CẬP ROUTER=======*/


		/*=======VARS=======*/
		vmCSM.loading = true;
		vmCSM.queryParams = $stateParams;


		if(authSvc.isSuperAdmin() || authSvc.isSaleManager())
			vmCSM.queryParams.uid = $stateParams.uid || authSvc.getProfile().uid;
		else
			vmCSM.queryParams.uid = authSvc.getProfile().uid;

		vmCSM.contacts = [];
		vmCSM.userSaleActive = [];
		vmCSM.totalFilters = {};
		vmCSM.constLevel = LEVEL_LIST;
		vmCSM.constCare = CARESTATUS_LIST;
		vmCSM.checkboxes = {
			checked: false,
			items: {}
		};

		/*==================METHODS==================*/
		vmCSM.changeSaleman = changeSaleman;
		vmCSM.linkFilter = linkFilter;
		vmCSM.filter = filter;
		vmCSM.remove = remove;
		vmCSM.filterReset = filterReset;
		vmCSM.findObject = helperJs.findObject;
		vmCSM.popupAssignToCMD = assignContactSvc.assignCMD;
		vmCSM.evict = evict;

		/*==================INIT==================*/
		angular.element('#reservationtime').daterangepicker({
			startDate: $filter('date')(vmCSM.queryParams.startDate, 'd/M/yyyy h:mm:ss a'),
			endDate: $filter('date')(vmCSM.queryParams.endDate, 'd/M/yyyy h:mm:ss a'),
			timePicker: true,
			timePickerIncrement: 30,
			locale: {
				format: 'DD/MM/YYYY h:mm A'
			}
		});

		angular.element('#reservationtime').on('apply.daterangepicker', function(ev, picker) {
			/*do something, like calling a function*/
			vmCSM.queryParams.startDate = picker.startDate.toISOString();
			vmCSM.queryParams.endDate = picker.endDate.toISOString();
			vmCSM.linkFilter('filterDay','orther');
		});

		getData();

		ngTableEventsChannel.onPagesChanged(function() {
			$scope.vmCSM.queryParams.page = vmCSM.table.page();
			$state.go('.',$scope.vmCSM.queryParams);
		}, $scope, vmCSM.table);

		/*==================FUNTION==================*/

		function getData(){
			saleContactSvc.get(vmCSM.queryParams, function(resp){
				vmCSM.totalFilters = resp.totalFilters;
				vmCSM.contacts = resp.items;
				vmCSM.userSaleActive = resp.userSaleActive;
				vmCSM.table = new NgTableParams({count: 10}, {
					counts:[],
					getData: function(params) {
						params.total(resp.totalItems);
						return vmCSM.contacts;
					}
				});
				vmCSM.table.page(vmCSM.queryParams.page);
				vmCSM.loading = false;
				initSelecteds(vmCSM.contacts, vmCSM.checkboxes, '_id');
			});
		}

		/*Khởi tạo Selecteds*/
		function initSelecteds(dataTable, checkboxes, field){
			/*watch for check all checkbox*/
			$scope.$watch(function() {
				return checkboxes.checked;
			}, function(value) {
				angular.forEach(dataTable, function(item) {
					checkboxes.items[item[field]] = value;
				});
			});

			/*watch for data checkboxes*/
			$scope.$watch(function() {
				return checkboxes.items;
			}, function(values) {
				var checked = 0, unchecked = 0,
				total = dataTable.length;
				angular.forEach(dataTable, function(item) {
					checked   +=  (checkboxes.items[item[field]]) || 0;
					unchecked += (!checkboxes.items[item[field]]) || 0;
				});
				if ((unchecked == 0) || (checked == 0)) {
					checkboxes.checked = (checked == total);
				}

				/*grayed checkbox*/
				angular.element($element[0].getElementsByClassName("select-all")).prop("indeterminate", (checked != 0 && unchecked != 0));
			}, true);
		}

		/*Thay đổi saleman hiển thị*/
		function changeSaleman(id){
			$state.go('.', vmCSM.queryParams , {notify:false}).then(function(){
				$state.reload();
			});
		}

		function linkFilter(field, value){
			vmCSM.queryParams.page = 1;
			vmCSM.queryParams[field] = value;

			$state.go('.', vmCSM.queryParams , {notify:false}).then(function(){
				$state.reload();
			});
		}

		function filter(params){
			vmCSM.queryParams.page = 1;
			$state.go('.', vmCSM.queryParams, {notify:false}).then(function(){
				$state.reload();
			});
		}

		function filterReset(){
			vmCSM.queryParams.keyword 			= null;
			vmCSM.queryParams.type 				= null;
			vmCSM.queryParams.is_finish 		= null;
			vmCSM.queryParams.call_status 		= null;
			vmCSM.queryParams.care_status 		= null;
			vmCSM.queryParams.call_level 		= null;
			vmCSM.queryParams.is_recall_schedule = null;
			vmCSM.queryParams.schedule_inteview = null;
			vmCSM.queryParams.filterDay 		= null;
			vmCSM.queryParams.startDate 		= null;
			vmCSM.queryParams.endDate 			= null;
			vmCSM.queryParams.dup 				= null;

			$state.go('.', vmCSM.queryParams, {notify:false})
			.then(function(){
				$state.reload();
			});
		}

		function remove(id){
			$bzPopup.message({
				data:{
					title: 'Xóa',
					message: 'Bạn chắc chắn sẽ xóa dữ liệu này?',
					props: {
						btnOk: 'Đồng ý',
						btnOkEvent: function(){
							assignContactSvc.deleteContact(id)
							.then(function(resp){
								$bzPopup.toastr({
									type: 'success',
									data:{
										title: 'Xóa',
										message: 'Xóa bài viết thành công!'
									}
								});

								$state.reload();
							});
						},
						btnCancel: 'Hủy bỏ'
					}
				},
			});
		}

		/*Thu hồi contacts*/
		function evict(){
			console.log('test',vmCSM.checkboxes.items);
			var modalInstance = $uibModal.open({
				animation:true,
				templateUrl: 'modules/global-popup/message/view.html',
				controller: function($scope, $uibModalInstance){
					$scope.popTitle = "Thu hồi Contacts";
					$scope.message = "Bạn có chắc muốn thu hồi những Contacts đã chọn";
					$scope.ok = function(){
						assignContactSvc.evictContact(vmCSM.checkboxes).then(function(resp){
							$timeout(function(){
								$state.reload();
							},1000);
							$timeout(function(){
								$uibModalInstance.close();
							},300);
						});
					}
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var contactRegisterCtrl = (function(){
	'use strict';

	angular
	.module('bzSaleContact')
	.controller('contactRegisterCtrl', contactRegisterCtrl);

	function contactRegisterCtrl($scope, $log, $state, $filter, $stateParams, $uibModalStack, $uibModal, $bzPopup,
	 authSvc, NgTableParams, ngTableEventsChannel, saleContactTmpSvc, saleContactSvc, assignContactSvc, bzResourceSvc){
		/* jshint validthis: true */
		var CR = this;

		// var modalInstance = $uibModal.open({
		// 	animation:true,
		// 	templateUrl: 'modules/global-popup/loading.html',
		// });
		/*==============XÉT QUYỀN TRUY CẬP ROUTER==============*/
		if( !(authSvc.isSuperAdmin() || authSvc.isSaleManager()) ){
			$state.go('error403');
		}
		/*============END XÉT QUYỀN TRUY CẬP ROUTER============*/

		/*===============VARS===============*/
		CR.queryParams = $stateParams;
		CR.loading = true;
		CR.contacts = [];
		CR.totalFilters = {};

		/*===============METHOD===============*/
		CR.linkFilter = linkFilter;
		CR.filter = filter;
		CR.filterReset = filterReset;

		CR.remove = remove;
		CR.popupAssignContact = popupAssignContact;
		CR.popupAssignToSaleman = assignContactSvc.assignSaleman;

		/*==================INIT==================*/
		getData();
		
		angular.element('#reservationtime').daterangepicker({
			startDate: $filter('date')(CR.queryParams.startDate, 'd/M/yyyy h:mm:ss a'),
			endDate: $filter('date')(CR.queryParams.endDate, 'd/M/yyyy h:mm:ss a'),
			timePicker: true,
			timePickerIncrement: 30,
			locale: {
				format: 'DD/MM/YYYY h:mm A'
			}
		});

		angular.element('#reservationtime').on('apply.daterangepicker', function(ev, picker) {
			/*do something, like calling a function*/
			console.log(picker.startDate, picker.endDate);
			CR.queryParams.startDate = picker.startDate.toISOString();
			CR.queryParams.endDate = picker.endDate.toISOString();
			CR.linkFilter('filterDay','orther');
		});

		ngTableEventsChannel.onPagesChanged(function(){
			$scope.CR.queryParams.page = CR.table.page();
			$state.go('.',$scope.CR.queryParams);
		}, $scope, CR.table);

		/*=================FUNCTION=================*/

		function getData(){
			saleContactTmpSvc.getContactTmp(CR.queryParams).then(function(resp){
				CR.contacts = resp.items;
				CR.totalFilters = resp.totalFilters;
				CR.table = new NgTableParams({count: 20}, {
					counts:[],
					getData: function(params) {
						params.total(resp.totalItems);
						return CR.contacts;
					}
				});
				CR.table.page(CR.queryParams.page);
				CR.loading = false;
			});

			// saleContactSvc.get(CR.queryParams, function(resp){
			// 	// CR.queryParams.pageCount = resp.totalPage;
			// 	CR.contacts = resp.items;
			// 	CR.totalFilters = resp.totalFilters;
			// 	CR.table = new NgTableParams({count: 20}, {
			// 		counts:[],
			// 		getData: function(params) {
			// 			params.total(resp.totalItems);
			// 			return CR.contacts;
			// 		}
			// 	});
			// 	CR.table.page(CR.queryParams.page);
			// 	CR.loading = false;
			// 	// $uibModalStack.dismissAll();
				
			// });
		}

		/*filter*/
		function linkFilter(field, value){
			CR.queryParams.page = 1;
			CR.queryParams[field] = value;

			$state.go('.', CR.queryParams , {notify:false}).then(function(){
				$state.reload();
			});
		}

		function filter(params){
			CR.queryParams.page = 1;
			$state.go('.', CR.queryParams, {notify:false}).then(function(){
				$state.reload();
			});
		}

		function filterReset(){
			CR.queryParams.keyword 			= null;
			CR.queryParams.is_finish 		= null;
			CR.queryParams.filterDay 		= null;
			CR.queryParams.startDate 		= null;
			CR.queryParams.endDate 			= null;
			CR.queryParams.newly 			= null;

			$state.go('.', CR.queryParams, {notify:false})
			.then(function(){
				$state.reload();
			});
		}
		/*end filter*/

		function remove(id){
			$bzPopup.message({
				data:{
					title: 'Xóa',
					message: 'Bạn chắc chắn sẽ xóa dữ liệu này?',
					props: {
						btnOk: 'Đồng ý',
						btnOkEvent: function(){
							bzResourceSvc.api('saleContact/delete')
							.save({}, {ids: id}, function(resp){
								$bzPopup.toastr({
									type: 'success',
									data:{
										title: 'Xóa',
										message: 'Xóa bài viết thành công!'
									}
								});

								$state.reload();
							});
						},
						btnCancel: 'Hủy bỏ'
					}
				},
			});
		}

		function popupAssignContact(){
			var modalInstance = $uibModal.open({
				animation:true,
				templateUrl: 'modules/admin-salecontact/view/client/popup/assign-contact/view.html',
				controller: 'assignContactCtrl',
				controllerAs: 'mvACT',
			});

			modalInstance.result.then(function (resp) {
				$state.reload();
			}, function () {
				$log.info('Modal dismissed at: ' + new Date());
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var saleContactEditCtrl = (function(){
	'use strict';

	angular
	.module('bzSaleContact')
	.controller('saleContactEditCtrl', saleContactEditCtrl);

	function saleContactEditCtrl($scope, $state, $filter, $stateParams, $uibModal, $bzPopup, 
		VIETNAM_MAP, SOURCE_LIST, CAREER_LIST, authSvc, saleContactSvc){
		var saleContactEdit = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if( !(authSvc.isSuperAdmin() || authSvc.isSale()) ){
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		saleContactEdit.queryParams = $stateParams;
		saleContactEdit.isEditMode = saleContactEdit.queryParams.id !== undefined;
		saleContactEdit.contsSourceList = SOURCE_LIST;
		saleContactEdit.constCareer = CAREER_LIST;
		saleContactEdit.constMap = VIETNAM_MAP;
		// Methods
		saleContactEdit.save = save;

		// Init
		getData();

		function initFormData(data){
			saleContactEdit.lockForm = false;
			saleContactEdit.submitted = false;
			saleContactEdit.formData = {
				type: saleContactEdit.isEditMode ? data.type : '',
				level_1:{
					name: saleContactEdit.isEditMode ? data.level_1.name : '',
					email: saleContactEdit.isEditMode ? data.level_1.email : '',
					skype: saleContactEdit.isEditMode ? data.level_1.skype : '',
					phone: saleContactEdit.isEditMode ? data.level_1.phone : '',
					phone2: saleContactEdit.isEditMode ? data.level_1.phone2 : '',
					age: saleContactEdit.isEditMode ? data.level_1.age : '',
					dob: saleContactEdit.isEditMode ? data.level_1.dob : '',
					source_contact: saleContactEdit.isEditMode ? data.level_1.source_contact : '',
					career: saleContactEdit.isEditMode ? data.level_1.career : '',
					address: saleContactEdit.isEditMode ? data.level_1.address : '',
					province: saleContactEdit.isEditMode ? data.level_1.province : '',
					district: saleContactEdit.isEditMode ? data.level_1.district : '',
					learn_info: saleContactEdit.isEditMode ? data.level_1.learn_info : ''
				}
			};
		}

		function getData(){
			if(saleContactEdit.isEditMode){
				saleContactSvc.get({id: saleContactEdit.queryParams.id}, function(resp){
					initFormData(resp);
				});
			} else {
				initFormData();
			}
		}

		function save(isValid){
			saleContactEdit.submitted = true;

			if(!saleContactEdit.lockForm && isValid){
				saleContactEdit.lockForm = true;

				var promise;

				if(saleContactEdit.isEditMode){
					promise = saleContactSvc.update({id: saleContactEdit.queryParams.id}, saleContactEdit.formData).$promise;
					promise.then(function(resp){
						if(resp){
							$bzPopup.toastr({
								type: 'success',
								data:{
									title: 'Liên hệ',
									message: 'Cập nhật liên hệ thành công!'
								}
							});

							$state.go('salecontact', {module:'saleman', uid:authSvc.getProfile().uid});
						}
					}, function(err){
						$bzPopup.toastr({
							type: 'error',
							data:{
								title: 'Liên hệ',
								message: 'Không thể cập nhật liên hệ!'
							}
						});

						saleContactEdit.lockForm = false;
					});
				}
				else {
					// console.log('asd',authSvc.getProfile(),saleContactEdit.formData);
					if(saleContactEdit.queryParams._sale_usermember){
						saleContactEdit.formData._sale_usermember = saleContactEdit.queryParams._sale_usermember;
					}

					saleContactEdit.formData.date_receive = new Date();
					promise = saleContactSvc.save({}, saleContactEdit.formData).$promise;
					promise.then(function(resp){
						/*Check khi contact bị trùng*/
						if(resp.dup){
							var modalInstance = $uibModal.open({
								animation:true,
								templateUrl: 'modules/admin-salecontact/view/client/popup/confirm-dup-contact.html',
								controller: function($scope, $uibModalInstance){
									$scope.popTitle = "Trùng Contact";
									if(resp.saleman)
										$scope.message = "Contact này đã có trong hệ thống, và saleman "+ resp.saleman.name +" đang care!";
									else
										$scope.message = "Contact này đã có trong hệ thống!";

									// $scope.ok = function(){
									// 	saleContactEdit.formData.acceptDup = true;
									// 	save(true);
									// 	$uibModalInstance.close();
									// };
									// $scope.history = function(){
									// 	$state.go('salecontactcancel',{email: saleContactEdit.formData.level_1.email});
									// 	$uibModalInstance.close();
									// };
								}
							});
							saleContactEdit.lockForm = false;
							return;
						}
						/*Thêm Thành công*/
						if(resp){
							$bzPopup.toastr({
								type: 'success',
								data:{
									title: 'Liên hệ',
									message: 'Thêm liên hệ thành công!'
								}
							});
							if(saleContactEdit.queryParams._sale_usermember)
								$state.go('contactsaleman', {uid: authSvc.getProfile().uid});
							else
								$state.go('salecontact');
						}
					}, function(err){
						$bzPopup.toastr({
							type: 'error',
							data:{
								title: 'Liên hệ',
								message: 'Không thể thêm liên hệ!'
							}
						});

						saleContactEdit.lockForm = false;
					});
				}
			}
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var postCtrl = (function(){
	'use strict';

	angular
	.module('bzPost')
	.controller('postCtrl', postCtrl);

	function postCtrl($scope, $state, $stateParams, $bzPopup, bzResourceSvc){
		/* jshint validthis: true */
		var post = this;
		// Vars
		post.selectedItems = [];
		post.queryParams = $stateParams;
		post.queryParams.pageCount = 10;
		post.categories = [
		{id:1, name: 'Danh mục 1'},
		{id:2, name: 'Danh mục 2'}
		];
		post.posts = [
		{id:1, name:'Tiêu đề 1', image:'assets/images/avatar.jpg', status:0, sort:1},
		{id:2, name:'Tiêu đề 2', image:'assets/images/avatar.jpg', status:0, sort:2},
		{id:3, name:'Tiêu đề 3', image:'assets/images/avatar.jpg', status:0, sort:3},
		{id:4, name:'Tiêu đề 4', image:'assets/images/avatar.jpg', status:1, sort:4},
		{id:5, name:'Tiêu đề 5', image:'assets/images/avatar.jpg', status:1, sort:5},
		{id:6, name:'Tiêu đề 6', image:'assets/images/avatar.jpg', status:1, sort:6},
		{id:7, name:'Tiêu đề 7', image:'assets/images/avatar.jpg', status:1, sort:7},
		{id:8, name:'Tiêu đề 8', image:'assets/images/avatar.jpg', status:1, sort:8},
		{id:9, name:'Tiêu đề 9', image:'assets/images/avatar.jpg', status:1, sort:9},
		{id:10, name:'Tiêu đề 10', image:'assets/images/avatar.jpg', status:1, sort:10},
		{id:11, name:'Tiêu đề 11', image:'assets/images/avatar.jpg', status:1, sort:11},
		{id:12, name:'Tiêu đề 12', image:'assets/images/avatar.jpg', status:1, sort:12},
		{id:13, name:'Tiêu đề 13', image:'assets/images/avatar.jpg', status:1, sort:13},
		{id:14, name:'Tiêu đề 14', image:'assets/images/avatar.jpg', status:1, sort:14},
		{id:15, name:'Tiêu đề 15', image:'assets/images/avatar.jpg', status:1, sort:15},
		{id:16, name:'Tiêu đề 16', image:'assets/images/avatar.jpg', status:1, sort:16},
		{id:17, name:'Tiêu đề 17', image:'assets/images/avatar.jpg', status:1, sort:17},
		{id:18, name:'Tiêu đề 18', image:'assets/images/avatar.jpg', status:1, sort:18},
		{id:19, name:'Tiêu đề 19', image:'assets/images/avatar.jpg', status:1, sort:19},
		{id:20, name:'Tiêu đề 20', image:'assets/images/avatar.jpg', status:1, sort:20}
		];

		// Methods
		post.selectItem = selectItem;
		post.filter = filter;
		post.filterReset = filterReset;
		post.save = save;
		post.publish = publish;
		post.sort = sort;
		post.remove = remove;

		// Init
		autoResetWhenParamsInvalid();

		function getSelectedIds(){
			var ids = [];

			post.selectedItems.map(function(item){
				ids.push(item.id);
			});

			return {
				ids: ids
			};
		}

		function selectItem(type) {
			switch(type){
				case 'multiple':
				post.selectedAll = !post.selectedAll;

				angular.forEach(post.posts, function (item) {
					item.selected = post.selectedAll;
				});
				break;
			}

			post.selectedItems = post.posts.filter(function(item){return item.selected === true});
		}

		function autoResetWhenParamsInvalid(){
			if(post.posts.length === 0 && post.queryParams.page > 1){
				$state.go('.', {action:'list', page: post.queryParams.pageCount});
			}
		}

		function filter(sortField){
			post.queryParams.sortdir = post.queryParams.sortdir === 'desc' ? 'asc' : 'desc';
			post.queryParams.sortfield = sortField || 'createdAt';

			$state.go('.', post.queryParams, {notify:false}).then(function(){
				$state.reload();
			});
		}

		function filterReset(){
			$state.go('.', {
				publish: null,
				cateid: null,
				keyword: null,
				limit: settingJs.admin.itemPerPage
			},
			{notify:false})
			.then(function(){
				$state.reload();
			});
		}

		function save(isValid){
			post.submitted = true;

			if(!post.lockForm && isValid){
				post.lockForm = true;

				if(post.queryParams.action === 'add'){
					var fd = new FormData();

					for (var key in post.formData) {
						fd.append(key, post.formData[key]);
					}

					fd.append('upload', post.formData.image[0]);

					bzResourceSvc.api('post')
					.upload({}, fd, function(resp){
						$bzPopup.toastr({
							type: resp.status ? 'success' : 'error',
							data:{
								title: 'Thêm bài viết',
								message: resp.message
							}
						});

						if(resp.status){
							$state.go('.', {action: 'list', id: null});
						} else {
							post.lockForm = false;
						}
					});
				} else if(post.queryParams.action === 'edit') {
					bzResourceSvc.api('post/:id', {id: '@id'})
					.update({id:post.queryParams.id}, post.formData, function(resp){
						$bzPopup.toastr({
							type: resp.status ? 'success' : 'error',
							data:{
								title: 'Cập nhật',
								message: resp.message
							}
						});

						if(resp.status){
							$state.go('.', {action: 'list', id: null});
						} else {
							post.lockForm = false;
						}
					});
				}
			}
		}

		function publish(id, value){
			$bzPopup.toastr({
				type: 'success',
				data:{
					title: 'Cập nhật',
					message: value === 1 ? 'Hiện bài viết thành công!' : 'Ẩn bài viết thành công!'
				}
			});
		}

		function sort(id, value){
			$bzPopup.toastr({
				type: 'success',
				data:{
					title: 'Cập nhật',
					message: 'Cập nhật thứ tự bài viết thành công!'
				}
			});
		}

		function remove(id){
			var selected = id ? {ids: [id]} : getSelectedIds();

			$bzPopup.message({
				data:{
					title: 'Xóa',
					message: 'Bạn chắc chắn sẽ xóa dữ liệu này?',
					props: {
						btnOk: 'Đồng ý',
						btnOkEvent: function(){
							bzResourceSvc.api('post/delete')
							.save({}, {ids: selected.ids}, function(resp){
								$bzPopup.toastr({
									type: 'success',
									data:{
										title: 'Xóa',
										message: 'Xóa bài viết thành công!'
									}
								});

								$state.reload();
							});
						},
						btnCancel: 'Hủy bỏ'
					}
				},
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var postEditCtrl = (function(){
	'use strict';

	angular
	.module('bzPost')
	.controller('postEditCtrl', postEditCtrl);

	function postEditCtrl($scope, $state, $stateParams, $bzPopup, bzResourceSvc){
		var postEdit = this;

		// Vars
		postEdit.queryParams = $stateParams;
		postEdit.editMode = postEdit.queryParams.id ? 'add' : 'edit';
		postEdit.categories = [
		{id:1, name: 'Danh mục 1'},
		{id:2, name: 'Danh mục 2'}
		];

		// Methods
		postEdit.save = save;

		// Init
		initFormData();

		function initFormData(){
			postEdit.lockForm = false;
			postEdit.submitted = false;
			postEdit.formData = {
				module: '',
				name: '',
				status: 0,
				image: '',
				gallery: '',
				attachment: '',
				tag: '',
				categoryId: '',
				publishDate: new Date(),
				intro: '',
				body: ''
			};
		}

		function save(isValid){
			postEdit.submitted = true;

			if(!postEdit.lockForm && isValid){
				postEdit.lockForm = true;

				if(postEdit.editMode === 'add'){
					var fd = new FormData();

					for (var key in postEdit.formData) {
						fd.append(key, postEdit.formData[key]);
					}

					fd.append('upload', postEdit.formData.image[0]);

					bzResourceSvc.api('post')
					.upload({}, fd, function(resp){
						$bzPopup.toastr({
							type: resp.status ? 'success' : 'error',
							data:{
								title: 'Thêm bài viết',
								message: resp.message
							}
						});

						if(resp.status){
							$state.go('post', {id: null});
						} else {
							postEdit.lockForm = false;
						}
					});
				}
				else if(postEdit.editMode === 'edit') {
					bzResourceSvc.api('post/:id', {id: '@id'})
					.update({id:postEdit.queryParams.id}, postEdit.formData, function(resp){
						$bzPopup.toastr({
							type: resp.status ? 'success' : 'error',
							data:{
								title: 'Cập nhật',
								message: resp.message
							}
						});

						if(resp.status){
							$state.go('post', {id: null});
						} else {
							postEdit.lockForm = false;
						}
					});
				}
			}
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var dashboardCtrl = (function(){
	'use strict';

	angular
	.module('bzDashboard')
	.controller('dashboardCtrl', dashboardCtrl);

	function dashboardCtrl($scope, $state, authSvc){
		var dashboard = this;
		$state.go('contactsaleman',{uid: authSvc.getProfile().uid});
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
;(function(){
	'use strict';

	angular
	.module('bzAuth')
	.controller('authCtrl', authCtrl);

	function authCtrl($scope, $state, $window, $bzPopup){
		var auth = this;

		// Methods
		auth.siteLogin = siteLogin;

		// Init
		initFormData();

		function initFormData(){
			auth.lockForm = false;
			auth.submitted = false;
			auth.formData = {
				email: '',
				password: ''
			};
		}

		function siteLogin(isValid){
			auth.submitted = true;

			if(!auth.lockForm && isValid){
				auth.lockForm = true;

				$scope.pageMethods.authSvc.siteLogin(auth.formData, function(resp){
					$window.location.href = '/admin';
					auth.lockForm = false;
				}, function(err){
					$bzPopup.toastr({
						type: 'error',
						data:{
							title: 'Login',
							message: err.data.message
						}
					});

					auth.lockForm = false;
				});
			}
		}
	}
})();
(function() {
    'use strict';
    angular
    .module('bzApp')

    .directive('bzColorPicker', bzColorPicker)
    .directive('autogrow', autogrow)
    .directive('ckEditor', ckEditor)
    .directive('bzInputMask', bzInputMask)
    .directive('bzLoadingProgress', bzLoadingProgress)
    .directive('bzPlaceholder', bzPlaceholder)
    .directive('bzFileModel', bzFileModel)
    .directive('bzInputControls', bzInputControls)                         // Sự kiện cuộn chuột giữa và nhấn phím mũi tên
    .directive('bzValidPasswordMatch', bzValidPasswordMatch)               // Kiểm tra mật khẩu trùng khớp
    .directive('bzValidPassword', bzValidPassword)                         // Kiểm tra độ an toàn của mật khẩu
    .directive('bzPasswordStrength', bzPasswordStrength)                   // Kiểm tra mật khẩu (Ký tự đặc biệt, in hoa, thường, ký tự số)
    .directive('bzWordCount', bzWordCount)                                 // Giới hạn số từ được nhập
    .directive('bzValidExist', bzValidExist)                               // Kiểm tra dữ liệu trong database
    .directive('bzValidFileInput', bzValidFileInput)                       // Kiểm tra tập tin upload
    .directive('bzSubmit', bzSubmit)                                       // Nút submit có trạng thái loading
    .directive('bzPageTransition', bzPageTransition)                       // Hiệu ứng chuyển trang
    .directive('bzTimePicker', bzTimePicker)                               // Popup chọn thời gian
    .directive('bzDatePicker', bzDatePicker)                               // Popup chọn ngày
    .directive('bzDateTimePicker', bzDateTimePicker)                       // Popup chọn ngày
    .directive('bzDateRangePicker', bzDateRangePicker)                     // Popup chọn ngày
    .directive('bzMedia', bzMedia)                                         // Điều khiển HTML5 Audio, video
    .directive('bzLoading', bzLoading)                                     // Trạng thái loading
    .directive('bzCustomScrollbar', bzCustomScrollbar)                     // Giao diện scrollbar
    .directive('bzRepeatCompleted', bzRepeatCompleted)                     // Sự kiện khi ng-repeat hoàn thành
    .directive('bzPager', bzPager)                                         // Tạo phân trang cho dữ liệu
    .directive('bzParallax', bzParallax)                                   // Hiệu ứng parallax
    .directive('bzFancybox', bzFancybox)                                   // Lightbox
    .directive('bzInfinityScroll', bzInfinityScroll)
    .directive('bzFullframe', bzFullframe)
    .directive('bzTag', bzTag)
    .directive('bzInputNumber', bzInputNumber)
    .directive('iCheck', iCheck)
    .directive('atrDateTimePicker', atrDateTimePicker);                                       

    /*Icheck vu.dev@antoree.com*/
    function iCheck($timeout, $parse) {
        return {
            require: 'ngModel',
            // scope: {
            //     checkboxClass: '=checkboxClass'
            // },
            link: function($scope, element, $attrs, ngModel) {
                return $timeout(function() {
                    var checkboxClass = $attrs['checkboxClass'];
                    var value;
                    value = $attrs['value'];

                    $scope.$watch($attrs['ngModel'], function(newValue){
                        $(element).iCheck('update');
                    })
                    
                    return $(element).iCheck({
                        // checkboxClass: 'icheckbox_square',
                        radioClass: 'iradio_square-blue',
                        checkboxClass: checkboxClass || 'icheckbox_square-blue',
                        increaseArea: '20%'

                    }).on('ifChanged', function(event) {
                        if ($(element).attr('type') === 'checkbox' && $attrs['ngModel']) {
                            $scope.$apply(function() {
                                return ngModel.$setViewValue(event.target.checked);
                            });
                        }
                        if ($(element).attr('type') === 'radio' && $attrs['ngModel']) {
                            return $scope.$apply(function() {
                                return ngModel.$setViewValue(value);
                            });
                        }
                    });
                });
            }
        };
    }
    /*End Icheck vu.dev@antoree.com*/

    /*DateTime vu.dev@antoree.com*/
    function atrDateTimePicker(){
        return {
            require: 'ngModel',
            scope: {
                atrOptions: '=atrOptions'
            },
            link: function(scope, element, $attrs, ngModel) {
                /*Init date time*/
                var options = {
                    timePicker: false,          /* có time*/
                    timePickerIncrement: 30,    /* khoảng phút của time*/
                    singleDatePicker: true,     /*range*/
                    autoUpdateInput: false,
                    locale:{
                        format: 'DD/MM/YYYY'
                    }
                };
                options = angular.extend({}, options, scope.atrOptions);

                element.daterangepicker(options);
                /*Khi date thay đổi*/
                element.on('apply.daterangepicker', function(ev, picker) {
                    var value = {
                        startDate: picker.startDate,
                        endDate: picker.endDate,
                    };

                    /*khi chọn single, mutil datetime*/
                    if(!options.singleDatePicker){
                        picker.element.val(picker.startDate.format(picker.locale.format) + ' - ' + picker.endDate.format(picker.locale.format));
                        return ngModel.$setViewValue(value);
                    }else{
                        picker.element.val(picker.startDate.format(picker.locale.format));
                        return ngModel.$setViewValue(value.startDate);
                    }
                });

                /*Render lần đầu vào page model trc khi init datetime*/
                if (!ngModel) return;
                ngModel.$render = function() {
                    if(ngModel.$viewValue){
                        var convertedDate = moment(ngModel.$viewValue).format(options.locale.format);
                        element.val(convertedDate || '');
                    }
                };
            }
        };
    }
    /*End DateTime vu.dev@antoree.com*/

    function bzColorPicker($timeout){
        return {
            require: 'ngModel',
            scope: {
                modelValue: '=ngModel'
            },
            link: function(scope, iElement, iAttr, ngModel){
                $timeout(function(){
                    var a = iElement.colorpicker({
                        color: scope.modelValue
                    });

                    a.on('changeColor', function(data){
                        scope.$apply(function(){
                            ngModel.$setViewValue(data.color.toString());
                        });
                    });
                });
            }
        };
    }

    function autogrow($timeout, $window){
        return {
            link: function(scope, iElement, iAttr){
                process(0);

                scope.$on('bz:redrawAutogrow', function(){
                    process(100);
                });

                function process(ms){
                    $timeout(function(){
                        autosize(iElement);
                    }, ms);
                }
            }
        }
    }

    function ckEditor($timeout){
        return {
            require: '?ngModel',
            transclude: true,
            restrict: 'A',
            link: function (scope, iElement, iAttrs, ngModel) {
                var editor, updateModel;

                $timeout(function(){
                    editor = CKEDITOR.replace(iElement[0], {});
                    if (!ngModel) {
                        return;
                    }

                    editor.on('instanceReady', function() {
                        return editor.setData(ngModel.$viewValue);
                    });
                    editor.on('change', updateModel);
                    editor.on('dataReady', updateModel);
                    editor.on('key', updateModel);
                    editor.on('paste', updateModel);
                    editor.on('selectionChange', updateModel);

                    function updateModel() {
                        return scope.$apply(function() {
                            return ngModel.$setViewValue(editor.getData());
                        });
                    };

                    return ngModel.$render = function() {
                        return editor.setData(ngModel.$viewValue);
                    };
                });
            }
        };
    }

    function bzInputMask(){
        return {
            link: function(scope, iElement, iAttrs) {
                var mask = scope.$eval(iAttrs.bzInputMask);
                Inputmask(mask).mask(iElement[0]);
            }
        };
    }

    function bzLoadingProgress(){
        return {
            restrict: 'E',
            replace: true,
            template: '<div id="bz-progressbar">' +
            '<div></div>' +
            '</div>',
            link: function(scope, iElement, iAttrs) {
                scope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
                    setTimeout(function(){
                        iElement.find('>div').css('width', 0);
                        iElement.fadeIn(200);
                    }, 500);

                    run(0);

                    function run(value){
                        setTimeout(function(){
                            if(value < 90){
                                var randomVal = helperJs.randomRangeInt(value, value + 10);
                                iElement.find('>div').css('width', randomVal + '%');
                                value += randomVal;
                                run(value);
                            }
                        }, helperJs.randomRangeInt(200, 500));
                    }
                });

                scope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
                    iElement.find('>div').css('width', '100%');
                    setTimeout(function(){
                        iElement.fadeOut(200);
                    }, 500);
                });
            }
        };
    }

    function bzPlaceholder(){
        return {
            replace: true,
            transclude: true,
            template: '<div>' +
            '<img ng-src="{{icon}}" />' +
            '<span>{{caption}}</span>' +
            '</div>',
            link: function(scope, iElement, iAttrs) {
                var input = angular.element(iAttrs.for);
                scope.caption = iAttrs.caption;
                scope.icon = iAttrs.icon;

                iElement.on('click', function(event) {
                    iElement.hide();
                    input.focus();
                });

                input.on('focus', function(event) {
                    iElement.hide();
                });

                input.on('blur', function(event) {
                    var val = input.val();

                    if(!val.length){
                        iElement.show();
                    }
                });
            }
        };
    }

    function bzFileModel($parse){
        return {
            link: function(scope, iElement, iAttrs) {
                var model = $parse(iAttrs.bzFileModel);
                var modelSetter = model.assign;

                iElement.bind('change', function(){
                    scope.$apply(function(){
                        modelSetter(scope, iElement[0].files);
                    });
                });
            }
        };
    }

    function bzInputControls($state, $timeout) {
        return {
            restrict: 'A',
            link: function(scope, iElement, iAttrs) {
                var len = settingJs.pageTransitionSequence.length - 1,
                currentPage = '',
                direction = '',
                currentIdx = 0;

                scope.allowInputControls = true;

                scope.$on('bz:allowInputControls', function(event, data) {
                    scope.allowInputControls = data;
                });

                scope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
                    currentPage = toState.name;
                    currentIdx = settingJs.pageTransitionSequence.getIndexBy('stateName', currentPage);

                    $timeout(function() {
                        scope.allowInputControls = true;
                    }, settingJs.pageTransitionDelay);
                });

                iElement.on('keydown', function(event) {
                    currentPage = $state.current.name;
                    if (event.keyCode === 38 || event.keyCode === 39) {
                        direction = 'down';
                        gotoPage(currentPage, direction);
                    }
                    if (event.keyCode === 37 || event.keyCode === 40) {
                        direction = 'up';
                        gotoPage(currentPage, direction);
                    }
                });

                iElement.mousewheel(function(event, delta, deltaX, deltaY) {
                    direction = delta > 0 ? 'down' : 'up';
                    gotoPage(currentPage, direction);
                });

                function gotoPage(page, dir) {
                    if (scope.allowInputControls) {
                        scope.allowInputControls = false;
                        if (dir === 'up') {
                            currentIdx++;
                        } else {
                            currentIdx--;
                        }
                        if (settingJs.pageTransitionLoop) {
                            if (currentIdx > len) currentIdx = 0;
                            if (currentIdx < 0) currentIdx = len;
                        } else {
                            if (currentIdx > len) currentIdx = len;
                            if (currentIdx < 0) currentIdx = 0;
                            $timeout(function() {
                                scope.allowInputControls = true;
                            }, settingJs.pageTransitionDelay);
                        }
                        $state.go(settingJs.pageTransitionSequence[currentIdx].stateName);
                    }
                }
            }
        };
    }

    function bzValidPasswordMatch() {
        return {
            require: 'ngModel',
            link: function(scope, iElement, iAttrs, ngModel) {
                var pw = $(iAttrs.bzValidPasswordMatch);

                ngModel.$parsers.push(function(value) {
                    ngModel.$setValidity('match', value !== '' && value === pw[0].value);
                    return value;
                });
            }
        };
    }

    function bzPasswordStrength() {
        return {
            require: 'ngModel',
            link: function(scope, iElement, iAttrs, ngModel) {
                var PASSWORD_PATTERN = [/[^\w\s]+/, /[A-Z]+/, /\w+/, /\d+/];
                var element = $(iAttrs.bzPasswordStrength);

                iElement.on('focus', function(event) {
                    element.show();
                });

                iElement.on('blur', function(event) {
                    element.hide();
                });

                ngModel.$parsers.push(function(value) {
                    var level = 0;
                    if (value.length >= 8) {
                        angular.forEach(PASSWORD_PATTERN, function(regex) {
                            if (regex.test(value)) {
                                level++;
                            }
                        });
                        scope.passwordStrength = level;
                    }
                });
            }
        };
    }

    function bzWordCount() {
        return {
            require: 'ngModel',
            link: function(scope, iElement, iAttrs, ngModel) {
                var maxW = parseInt(iAttrs.maxWords);
                var minW = parseInt(iAttrs.minWords) || 0;
                var wordCount = 0;

                ngModel.$parsers.push(function(value) {
                    wordCount = value.trim().replace(/(\r\n|\n|\r)/gm, ' ').replace(/\.\s+/g, ' ').split(' ').length;
                    ngModel.$setValidity('mixwords', wordCount >= minW);
                    ngModel.$setValidity('maxwords', wordCount <= maxW);
                    return value;
                });
            }
        };
    }

    function bzValidExist($resource) {
        return {
            require: 'ngModel',
            scope: {
                bzValidExist: '='
            },
            link: function(scope, iElement, iAttrs, ngModel) {
                var data = scope.bzValidExist;
                iElement.on('focus', function(event) {
                    $(data.selector).hide();
                });

                iElement.on('blur', function(event) {
                    data.value = ngModel.$viewValue;
                    var User = $resource(data.url);
                    var userInfo = new User(data);

                    userInfo.$save(function(resp) {
                        //ngModel.$setValidity('recordexist', !resp.status);
                        if (resp.status) {
                            $(data.selector).show();
                        }
                    });

                    scope.$apply();
                });
            }
        };
    }

    function bzValidPassword() {
        var PASSWORD_FORMATS = [/[^\w\s]+/, /[A-Z]+/, /\w+/, /\d+/];
        return {
            require: 'ngModel',
            link: function(scope, iElement, iAttrs, ngModel) {
                ngModel.$parsers.push(function(value) {
                    var status = true;

                    angular.forEach(PASSWORD_FORMATS, function(regex) {
                        status = status && regex.test(value);
                    });

                    ngModel.$setValidity('passwordcharacters', status);
                    return value;
                });
            }
        };
    }

    function bzValidFileInput($parse) {
        return {
            require: 'ngModel',
            link: function(scope, iElement, iAttrs, ngModel) {
                var fileSelected = [],
                fileSize = iAttrs.fileSize,
                fileType = iAttrs.fileType.split(',');

                var model = $parse(iAttrs.ngModel);
                var modelSetter = model.assign;

                scope.$on('bz:clearFileInput', function(){
                    ngModel.$setViewValue(null);
                    ngModel.$render();
                    iElement.val('');
                });

                iElement.on('change', function() {
                    scope.$apply(function() {
                        fileSelected = iElement[0].files;
                        modelSetter(scope, iElement[0].files);

                        customValidator(iElement.val());
                    });
                });

                function customValidator(value) {
                    var ouputSize = [];
                    var ouputType = [];

                    for (var i = 0; i < fileSelected.length; i++) {
                        if (fileSelected[i].size > fileSize) {
                            ouputSize.push(fileSelected[i]);
                        }
                        if (fileType.indexOf(fileSelected[i].type) === -1) {
                            ouputType.push(fileSelected[i]);
                        }
                    }

                    ngModel.$setValidity('filesize', ouputSize.length === 0);
                    ngModel.$setValidity('filetype', ouputType.length === 0);

                    return value;
                }
            }
        };
    }

    function bzSubmit() {
        return {
            replace: true,
            transclude: true,
            template: '<button>' +
            '<ng-transclude></ng-transclude>' +
            '<div class="circle animFade" ng-if="type===\'circle\'"></div>' +
            '<div class="bar animFade" ng-if="type===\'bar\'">' +
            '<div class="rect1"></div>' +
            '<div class="rect2"></div>' +
            '<div class="rect3"></div>' +
            '</div>' +
            '</button>',
            link: function(scope, iElement, iAttrs) {
                scope.type = iAttrs.loadingIcon || 'circle';
            }
        };
    }

    function bzPageTransition($animate, bzValueSvc) {
        return {
            link: function(scope, iElement, iAttrs) {
                var inClass = '', outClass = '';
                var curAnim = iAttrs.bzPageTransition.split(',');

                scope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
                    var uiView = $('.mainView');

                    if (bzValueSvc.loadCounter > 1) {
                        if (is.desktop()) {
                            var animFrom = 0, animTo = 0;

                            if (toState.name === fromState.name) {
                                animData(0);
                                uiView.eq(0).addClass(inClass);
                                uiView.eq(1).addClass(outClass);
                            } else {
                                for (var i = 0; i < settingJs.pageTransitionSequence.length; i++) {
                                    if (settingJs.pageTransitionSequence[i].stateName === fromState.name) {
                                        animFrom = i;
                                    }
                                    if (settingJs.pageTransitionSequence[i].stateName === toState.name) {
                                        animTo = i;
                                    }
                                }

                                uiView.removeClass(inClass + ' ' + outClass);

                                // Next
                                if (animFrom < animTo){
                                    animData(parseInt(curAnim[0]));
                                    uiView.eq(0).addClass(inClass);
                                    uiView.eq(1).addClass(outClass);
                                }
                                // Prev
                                if (animFrom > animTo){
                                    animData(parseInt(curAnim[1]));
                                    uiView.eq(0).addClass(inClass);
                                    uiView.eq(1).addClass(outClass);
                                }
                            }
                        }

                        $animate.on('enter', uiView.eq(0), function(element, phase){
                            if(phase === 'close'){
                                scope.$broadcast('bz:pageTransitionCompleted', '');
                            }
                        });
                    } else {
                        animData(0);
                        uiView.eq(0).addClass(inClass);
                        uiView.eq(1).addClass(outClass);
                    }
                });

                function animData(index){
                    switch(index) {
                        case 0:
                        outClass = 'pt-page-fadeOut';
                        inClass = 'pt-page-fadeIn';
                        break;
                        case 1:
                        outClass = 'pt-page-moveToLeft';
                        inClass = 'pt-page-moveFromRight';
                        break;
                        case 2:
                        outClass = 'pt-page-moveToRight';
                        inClass = 'pt-page-moveFromLeft';
                        break;
                        case 3:
                        outClass = 'pt-page-moveToTop';
                        inClass = 'pt-page-moveFromBottom';
                        break;
                        case 4:
                        outClass = 'pt-page-moveToBottom';
                        inClass = 'pt-page-moveFromTop';
                        break;
                        case 5:
                        outClass = 'pt-page-fade';
                        inClass = 'pt-page-moveFromRight pt-page-ontop';
                        break;
                        case 6:
                        outClass = 'pt-page-fade';
                        inClass = 'pt-page-moveFromLeft pt-page-ontop';
                        break;
                        case 7:
                        outClass = 'pt-page-fade';
                        inClass = 'pt-page-moveFromBottom pt-page-ontop';
                        break;
                        case 8:
                        outClass = 'pt-page-fade';
                        inClass = 'pt-page-moveFromTop pt-page-ontop';
                        break;
                        case 9:
                        outClass = 'pt-page-moveToLeftFade';
                        inClass = 'pt-page-moveFromRightFade';
                        break;
                        case 10:
                        outClass = 'pt-page-moveToRightFade';
                        inClass = 'pt-page-moveFromLeftFade';
                        break;
                        case 11:
                        outClass = 'pt-page-moveToTopFade';
                        inClass = 'pt-page-moveFromBottomFade';
                        break;
                        case 12:
                        outClass = 'pt-page-moveToBottomFade';
                        inClass = 'pt-page-moveFromTopFade';
                        break;
                        case 13:
                        outClass = 'pt-page-moveToLeftEasing pt-page-ontop';
                        inClass = 'pt-page-moveFromRight';
                        break;
                        case 14:
                        outClass = 'pt-page-moveToRightEasing pt-page-ontop';
                        inClass = 'pt-page-moveFromLeft';
                        break;
                        case 15:
                        outClass = 'pt-page-moveToTopEasing pt-page-ontop';
                        inClass = 'pt-page-moveFromBottom';
                        break;
                        case 16:
                        outClass = 'pt-page-moveToBottomEasing pt-page-ontop';
                        inClass = 'pt-page-moveFromTop';
                        break;
                        case 17:
                        outClass = 'pt-page-scaleDown';
                        inClass = 'pt-page-moveFromRight pt-page-ontop';
                        break;
                        case 18:
                        outClass = 'pt-page-scaleDown';
                        inClass = 'pt-page-moveFromLeft pt-page-ontop';
                        break;
                        case 19:
                        outClass = 'pt-page-scaleDown';
                        inClass = 'pt-page-moveFromBottom pt-page-ontop';
                        break;
                        case 20:
                        outClass = 'pt-page-scaleDown';
                        inClass = 'pt-page-moveFromTop pt-page-ontop';
                        break;
                        case 21:
                        outClass = 'pt-page-scaleDown';
                        inClass = 'pt-page-scaleUpDown pt-page-delay300';
                        break;
                        case 22:
                        outClass = 'pt-page-scaleDownUp';
                        inClass = 'pt-page-scaleUp pt-page-delay300';
                        break;
                        case 23:
                        outClass = 'pt-page-moveToLeft pt-page-ontop';
                        inClass = 'pt-page-scaleUp';
                        break;
                        case 24:
                        outClass = 'pt-page-moveToRight pt-page-ontop';
                        inClass = 'pt-page-scaleUp';
                        break;
                        case 25:
                        outClass = 'pt-page-moveToTop pt-page-ontop';
                        inClass = 'pt-page-scaleUp';
                        break;
                        case 26:
                        outClass = 'pt-page-moveToBottom pt-page-ontop';
                        inClass = 'pt-page-scaleUp';
                        break;
                        case 27:
                        outClass = 'pt-page-scaleDownCenter';
                        inClass = 'pt-page-scaleUpCenter pt-page-delay400';
                        break;
                        case 28:
                        outClass = 'pt-page-rotateRightSideFirst';
                        inClass = 'pt-page-moveFromRight pt-page-delay200 pt-page-ontop';
                        break;
                        case 29:
                        outClass = 'pt-page-rotateLeftSideFirst';
                        inClass = 'pt-page-moveFromLeft pt-page-delay200 pt-page-ontop';
                        break;
                        case 30:
                        outClass = 'pt-page-rotateTopSideFirst';
                        inClass = 'pt-page-moveFromTop pt-page-delay200 pt-page-ontop';
                        break;
                        case 31:
                        outClass = 'pt-page-rotateBottomSideFirst';
                        inClass = 'pt-page-moveFromBottom pt-page-delay200 pt-page-ontop';
                        break;
                        case 32:
                        outClass = 'pt-page-flipOutRight';
                        inClass = 'pt-page-flipInLeft pt-page-delay500';
                        break;
                        case 33:
                        outClass = 'pt-page-flipOutLeft';
                        inClass = 'pt-page-flipInRight pt-page-delay500';
                        break;
                        case 34:
                        outClass = 'pt-page-flipOutTop';
                        inClass = 'pt-page-flipInBottom pt-page-delay500';
                        break;
                        case 35:
                        outClass = 'pt-page-flipOutBottom';
                        inClass = 'pt-page-flipInTop pt-page-delay500';
                        break;
                        case 36:
                        outClass = 'pt-page-rotateFall pt-page-ontop';
                        inClass = 'pt-page-scaleUp';
                        break;
                        case 37:
                        outClass = 'pt-page-rotateOutNewspaper';
                        inClass = 'pt-page-rotateInNewspaper pt-page-delay500';
                        break;
                        case 38:
                        outClass = 'pt-page-rotatePushLeft';
                        inClass = 'pt-page-moveFromRight';
                        break;
                        case 39:
                        outClass = 'pt-page-rotatePushRight';
                        inClass = 'pt-page-moveFromLeft';
                        break;
                        case 40:
                        outClass = 'pt-page-rotatePushTop';
                        inClass = 'pt-page-moveFromBottom';
                        break;
                        case 41:
                        outClass = 'pt-page-rotatePushBottom';
                        inClass = 'pt-page-moveFromTop';
                        break;
                        case 42:
                        outClass = 'pt-page-rotatePushLeft';
                        inClass = 'pt-page-rotatePullRight pt-page-delay180';
                        break;
                        case 43:
                        outClass = 'pt-page-rotatePushRight';
                        inClass = 'pt-page-rotatePullLeft pt-page-delay180';
                        break;
                        case 44:
                        outClass = 'pt-page-rotatePushTop';
                        inClass = 'pt-page-rotatePullBottom pt-page-delay180';
                        break;
                        case 45:
                        outClass = 'pt-page-rotatePushBottom';
                        inClass = 'pt-page-rotatePullTop pt-page-delay180';
                        break;
                        case 46:
                        outClass = 'pt-page-rotateFoldLeft';
                        inClass = 'pt-page-moveFromRightFade';
                        break;
                        case 47:
                        outClass = 'pt-page-rotateFoldRight';
                        inClass = 'pt-page-moveFromLeftFade';
                        break;
                        case 48:
                        outClass = 'pt-page-rotateFoldTop';
                        inClass = 'pt-page-moveFromBottomFade';
                        break;
                        case 49:
                        outClass = 'pt-page-rotateFoldBottom';
                        inClass = 'pt-page-moveFromTopFade';
                        break;
                        case 50:
                        outClass = 'pt-page-moveToRightFade';
                        inClass = 'pt-page-rotateUnfoldLeft';
                        break;
                        case 51:
                        outClass = 'pt-page-moveToLeftFade';
                        inClass = 'pt-page-rotateUnfoldRight';
                        break;
                        case 52:
                        outClass = 'pt-page-moveToBottomFade';
                        inClass = 'pt-page-rotateUnfoldTop';
                        break;
                        case 53:
                        outClass = 'pt-page-moveToTopFade';
                        inClass = 'pt-page-rotateUnfoldBottom';
                        break;
                        case 54:
                        outClass = 'pt-page-rotateRoomLeftOut pt-page-ontop';
                        inClass = 'pt-page-rotateRoomLeftIn';
                        break;
                        case 55:
                        outClass = 'pt-page-rotateRoomRightOut pt-page-ontop';
                        inClass = 'pt-page-rotateRoomRightIn';
                        break;
                        case 56:
                        outClass = 'pt-page-rotateRoomTopOut pt-page-ontop';
                        inClass = 'pt-page-rotateRoomTopIn';
                        break;
                        case 57:
                        outClass = 'pt-page-rotateRoomBottomOut pt-page-ontop';
                        inClass = 'pt-page-rotateRoomBottomIn';
                        break;
                        case 58:
                        outClass = 'pt-page-rotateCubeLeftOut pt-page-ontop';
                        inClass = 'pt-page-rotateCubeLeftIn';
                        break;
                        case 59:
                        outClass = 'pt-page-rotateCubeRightOut pt-page-ontop';
                        inClass = 'pt-page-rotateCubeRightIn';
                        break;
                        case 60:
                        outClass = 'pt-page-rotateCubeTopOut pt-page-ontop';
                        inClass = 'pt-page-rotateCubeTopIn';
                        break;
                        case 61:
                        outClass = 'pt-page-rotateCubeBottomOut pt-page-ontop';
                        inClass = 'pt-page-rotateCubeBottomIn';
                        break;
                        case 62:
                        outClass = 'pt-page-rotateCarouselLeftOut pt-page-ontop';
                        inClass = 'pt-page-rotateCarouselLeftIn';
                        break;
                        case 63:
                        outClass = 'pt-page-rotateCarouselRightOut pt-page-ontop';
                        inClass = 'pt-page-rotateCarouselRightIn';
                        break;
                        case 64:
                        outClass = 'pt-page-rotateCarouselTopOut pt-page-ontop';
                        inClass = 'pt-page-rotateCarouselTopIn';
                        break;
                        case 65:
                        outClass = 'pt-page-rotateCarouselBottomOut pt-page-ontop';
                        inClass = 'pt-page-rotateCarouselBottomIn';
                        break;
                        case 66:
                        outClass = 'pt-page-rotateSidesOut';
                        inClass = 'pt-page-rotateSidesIn pt-page-delay200';
                        break;
                        case 67:
                        outClass = 'pt-page-rotateSlideOut';
                        inClass = 'pt-page-rotateSlideIn';
                        break;
                    }
                }
            }
        };
    }

    function bzTimePicker($timeout) {
        return {
            restrict: 'A',
            link: function(scope, iElement, iAttrs, ngModel) {
                iElement.timepicker();
            }
        };
    }

    function bzDatePicker() {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function(scope, iElement, iAttrs, ngModel) {
                if (!ngModel) return;

                ngModel.$render = function() {
                    if(ngModel.$viewValue){
                        var convertedDate = moment(ngModel.$viewValue).format('DD/MM/YYYY');
                        iElement.val(convertedDate || '');
                    }
                };

                iElement.on('blur keyup change', function() {
                    scope.$evalAsync(read);
                });

                read();

                function read() {
                    var date = iElement.val();
                    var convertedDate = moment(date, 'DD/MM/YYYY').toDate();
                    ngModel.$setViewValue(convertedDate);
                }

                iElement.datepicker({
                    dateFormat: 'dd/mm/yy',
                    changeMonth: true,
                    changeYear: true,
                    beforeShow: function() {
                        setTimeout(function(){
                            $('.ui-datepicker').css('z-index', 1050);
                        }, 0);
                    },
                    onSelect: function(date, data){
                        scope.$evalAsync(read);
                    }
                });
            }
        };
    }

    function bzDateTimePicker($timeout) {
        return {
            restrict: 'A',
            link: function(scope, iElement, iAttrs, ngModel) {
                iElement.datetimepicker({
                    dateFormat: 'dd/mm/yy',
                    timeFormat: 'HH:mm:ss',
                    changeMonth: true,
                    changeYear: true,
                    showTime: false,
                    beforeShow: function() {
                        setTimeout(function(){
                            $('.ui-datepicker').css('z-index', 1050);
                        }, 0);
                    },
                });
            }
        };
    }

    function bzDateRangePicker($timeout) {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function(scope, iElement, iAttrs, ngModel) {
                //$timeout(function(){
                    var txtStateDate = iElement.find('#dpFrom');
                    var txtEndDate = iElement.find('#dpTo');

                    console.log(txtStateDate)

                    txtStateDate.datetimepicker({
                        dateFormat: 'dd/mm/yy',
                        timeFormat: 'HH:mm:ss',
                        changeMonth: true,
                        changeYear: true,
                        beforeShow: function() {
                            setTimeout(function(){
                                $('.ui-datepicker').css('z-index', 1050);
                            }, 0);
                        },
                        onClose: function(dateText, inst) {
                            // if (txtEndDate.val() != '') {
                            //     var testStartDate = txtStateDate.datetimepicker('getDate');
                            //     var testEndDate = txtEndDate.datetimepicker('getDate');
                            //     if (testStartDate > testEndDate)
                            //         txtEndDate.datetimepicker('setDate', testStartDate);
                            // }
                            // else {
                            //     txtEndDate.val(dateText);
                            // }
                        },
                        onSelect: function (selectedDateTime){
                            txtEndDate.datetimepicker('option', 'minDate', txtStateDate.datetimepicker('getDate'));
                            txtStateDate.datepicker("hide");
                        }
                    });
                    txtEndDate.datetimepicker({
                        dateFormat: 'dd/mm/yy',
                        timeFormat: 'HH:mm:ss',
                        changeMonth: true,
                        changeYear: true,
                        beforeShow: function() {
                            setTimeout(function(){
                                $('.ui-datepicker').css('z-index', 1050);
                            }, 0);
                        },
                        onClose: function(dateText, inst) {
                            // if (txtStateDate.val() != '') {
                            //     var testStartDate = txtStateDate.datetimepicker('getDate');
                            //     var testEndDate = txtEndDate.datetimepicker('getDate');
                            //     if (testStartDate > testEndDate)
                            //         txtStateDate.datetimepicker('setDate', testEndDate);
                            // }
                            // else {
                            //     txtStateDate.val(dateText);
                            // }
                        },
                        onSelect: function (selectedDateTime){
                            txtStateDate.datetimepicker('option', 'maxDate', txtEndDate.datetimepicker('getDate'));
                            txtEndDate.datepicker("hide");
                        }
                    });
                //});
            }
        };
    }

    function bzMedia(bzEvents) {
        return {
            restrict: 'A',
            link: function(scope, iElement, iAttrs) {
                var player = iElement[0];
                registerEvents();

                scope.$on(bzEvents.media.PLAY, function() {
                    play();
                });

                scope.$on(bzEvents.media.PAUSE, function() {
                    pause();
                });

                scope.$on(bzEvents.media.STOP, function() {
                    stop();
                });

                scope.$on(bzEvents.media.SEEK, function(event, data) {
                    seek(data);
                });

                scope.$on(bzEvents.media.VOLUME, function(event, data) {
                    setVolume(data);
                });

                scope.$on(bzEvents.media.FULLSCREEN, function(event, data) {
                    console.log('request Fullscreen');
                    if (data) {
                        helperJs.enterFullScreen(player);
                    } else {
                        helperJs.exitFullScreen();
                    }
                });

                scope.$on(bzEvents.media.ENTER_FULLSCREEN, function(event) {
                    console.log('enter Fullscreen');
                });

                scope.$on(bzEvents.media.EXIT_FULLSCREEN, function(event) {
                    console.log('exit Fullscreen');
                });

                function registerEvents() {
                    document.addEventListener("fullscreenchange", onFullscreenChange, false);
                    document.addEventListener("webkitfullscreenchange", onFullscreenChange, false);
                    document.addEventListener("mozfullscreenchange", onFullscreenChange, false);
                    document.addEventListener("MSFullscreenChange", onFullscreenChange, false);
                    player.addEventListener('webkitendfullscreen', onFullscreenChange, false);
                    iElement.on('ended', function(event) {
                        onEnded();
                    });
                }

                function play() {
                    player.play();
                }

                function pause() {
                    player.pause();
                }

                function stop() {
                    player.pause();
                    player.currentTime = 0;
                }

                function seek(value) {
                    player.currentTime = value;
                }

                function setVolume(value) {
                    player.volume = value;
                }

                function onEnded() {
                    scope.$emit(bzEvents.media.ENDED);
                }

                function onFullscreenChange() {
                    var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
                    if (fullscreenElement) {
                        scope.$emit(bzEvents.media.ENTER_FULLSCREEN);
                    } else {
                        scope.$emit(bzEvents.media.EXIT_FULLSCREEN);
                    }
                }
            }
        };
    }

    function bzLoading() {
        var markup =
        '<div class="loading-mask">' +
        '<div id="bar-wave" class="bar-wave loading-style">' +
        '<div class="bar">' +
        '<div class="rect1"></div>' +
        '<div class="rect2"></div>' +
        '<div class="rect3"></div>' +
        '<div class="rect4"></div>' +
        '<div class="rect5"></div>' +
        '</div>' +
        '</div>' +
        '<div id="circle-spread" class="circle-spread loading-style">' +
        '<div></div>' +
        '<div></div>' +
        '<div></div>' +
        '</div>' +
        '<div id="circle-line-spread" class="circle-line-spread loading-style">' +
        '<div></div>' +
        '<div></div>' +
        '<div></div>' +
        '</div>' +
        '<div id="hoz-load-bar" class="hoz-load-bar loading-style">' +
        '<div class="bar1"></div>' +
        '<div class="bar2"></div>' +
        '<div class="bar3"></div>' +
        '<div class="bar4"></div>' +
        '<div class="bar5"></div>' +
        '<div class="bar6"></div>' +
        '<div class="bar7"></div>' +
        '<div class="bar8"></div>' +
        '</div>' +
        '</div>';
        return {
            restrict: 'E',
            templateUrl: markup,
            replace: true,
            link: function(scope, iElement, iAttrs) {
                iElement.find(iAttrs.loadingType).show();
            }
        };
    }

    function bzCustomScrollbar($timeout) {
        return {
            restrict: 'A',
            link: function(scope, iElement, iAttrs) {
                var o = {
                    selector: iElement[0],
                    theme: iAttrs.scrollbarTheme || 'light',
                    scrollbarPosition: iAttrs.scrollbarPosition || 'inside',
                    mouseWheel: {
                        scrollAmount: 20
                    },
                    scrollButtons: {
                        enable: iAttrs.scrollbarArrow === 'true'
                    }
                };

                scope.$on('bz:CustomScrollbarRender', function(){
                    render();
                });

                $timeout(function() {
                    render();
                }, 500);

                function render(){
                    $(o.selector).mCustomScrollbar(o);
                }
            }
        };
    }

    function bzRepeatCompleted() {
        return {
            restrict: 'A',
            link: function(scope, iElement, iAttrs) {
                var arrEvents = iAttrs.bzRepeatCompleted.split(',');
                if (scope.$last) {
                    for (var i = 0; i < arrEvents.length; i++) {
                        scope.$emit(arrEvents[i]);
                    }
                }
            }
        };
    }

    function bzPager($state) {
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                pageParams: '=',
                pageState: '@'
            },
            template: '<div class="bz-pager">' +
            '<a class="prev" ng-if="pageParams.page > 1" ui-sref="{{pageState}}({page: pageParams.page - 1 < 1 ? 1 : pageParams.page - 1})"><i class="fa fa-chevron-left"></i></a>' +
            '<a class="first" ng-if="pageParams.page > 3" ui-sref="{{pageState}}({page: 1})">1</a>' +
            '<a class="dot" ng-if="pageParams.page > 3">...</a>' +
            '<a class="num" ng-class="{active: page === pageParams.page}" ng-href="{{toHref(page)}}" ng-repeat="page in pageVisible">{{page}}</a>' +
            '<a class="dot" ng-if="pageParams.page < pageParams.pageCount - 2">...</a>' +
            '<a class="last" ng-if="pageParams.page < pageParams.pageCount - 2" ui-sref="{{pageState}}({page: pageParams.pageCount})">{{pageParams.pageCount}}</a>' +
            '<a class="next" ng-if="pageParams.page < pageParams.pageCount" ui-sref="{{pageState}}({page: (pageParams.page > pageParams.pageCount) ? pageParams.pageCount : (pageParams.page + 1)})"><i class="fa fa-chevron-right"></i></a>' +
            '</div>',
            link: function(scope, iElement, iAttrs) {
                scope.pageParams.page = parseInt(scope.pageParams.page);
                scope.toHref = toHref;

                processPage();

                scope.$on('bz:pageRefresh', function(event, data) {
                    scope.pageParams.pageCount = data;
                    processPage();
                });

                function toHref(page){
                    return $state.href(scope.pageState, {page: page});
                };

                function processPage() {
                    scope.pageVisible = [];
                    var pageMin = Math.ceil(Math.min(Math.max(1, scope.pageParams.page - (settingJs.pageVisibleCount / 2)), Math.max(1, scope.pageParams.pageCount - settingJs.pageVisibleCount + 1)));
                    var pageMax = Math.ceil(Math.min(scope.pageParams.pageCount, pageMin + settingJs.pageVisibleCount - 1));
                    for (var i = pageMin; i <= pageMax; i++) {
                        scope.pageVisible.push(i);
                    }
                }
            }
        };
    }

    function bzParallax($timeout) {
        return {
            restrict: 'A',
            link: function(scope, iElement, iAttrs) {
                if (is.desktop()) {
                    scope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
                        $timeout(function() {
                            iElement.find(iAttrs.bzParallax).parallax();
                        }, 1000);
                    });

                    scope.$on('$destroy', function() {
                        iElement.find(iAttrs.bzParallax).parallax('disable');
                    });
                }
            }
        };
    }

    function bzFancybox($rootScope) {
        return {
            restrict: 'A',
            link: function(scope, iElement, iAttrs) {
                if (helperJs.isUndefinedNullEmpty(iAttrs.bzFancybox)) {
                    scope.$on('bz:fancyBox', function() {
                        fancyBox();
                    });
                } else if (iAttrs.bzFancybox === 'static') {
                    fancyBox();
                }

                function fancyBox() {
                    iElement.find('a.fancybox').fancybox({
                        beforeLoad: function() {
                            $rootScope.$broadcast('bz:allowInputControls', false);
                        },
                        beforeClose: function() {
                            $rootScope.$broadcast('bz:allowInputControls', true);
                        }
                    });
                }
            }
        }
    }

    function bzInfinityScroll(){
        return {
            restrict: 'A',
            scope: {
                bzInfinityScroll: '&',
                bzInfinityBottom: '@'
            },
            link: function (scope, iElement, iAttrs) {
                var win = $(window);
                scope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
                    if(fromState.name !== toState.name){
                        win.off('scroll.infinity');
                    }
                });

                win.on('scroll.infinity', helperJs.debounce(function(event) {
                    var offset = isNaN(scope.bzInfinityBottom) ? $(scope.bzInfinityBottom).position().top : parseInt(scope.bzInfinityBottom);
                    if (win.scrollTop() + win.height() >= $(document).height() - offset) {
                        scope.bzInfinityScroll();
                    }
                },500));
            }
        };
    }

    function bzFullframe(){
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var jRes = jRespond([
                    {label: 'handheld',enter: 0,exit: 1023},
                    {label: 'desktop', enter: 1024, exit: 10000}
                    ]);

                jRes.addFunc({
                    breakpoint: 'handheld',
                    enter: function() {
                        $('html').removeClass(iAttrs.bzFullframe);
                    }
                });

                jRes.addFunc({
                    breakpoint: 'desktop',
                    enter: function() {
                        $('html').addClass(iAttrs.bzFullframe);
                    }
                });
            }
        };
    }

    function bzTag(){
        return {
            require: '?ngModel',
            replace:true,
            template: '<div class="bz-tag form-control">' +
            '<ul>' +
            '<li ng-repeat="key in keys track by $index">{{key}}<i class="glyphicon glyphicon-remove" ng-click="remove($index)"></i></li>' +
            '</ul>' +
            '<input type="text" placeholder="Enter để thêm từ khoá" />' +
            '<div class="clearfix"></div>' +
            '</div>',
            link: function (scope, iElement, iAttrs, ngModel) {
                scope.keys = [];
                scope.remove = remove;

                iElement.find('input').on('keypress', function(event) {
                    if(event.keyCode === 13){
                        var text = $.trim($(this).val());
                        if(scope.keys.indexOf(text) === -1 && text.length > 0){
                            scope.keys.push(text);
                            console.log(scope.keys);

                            $(this).val('');
                            ngModel.$setViewValue(scope.keys);
                        }

                        scope.$apply();

                        event.stopPropagation();
                        event.preventDefault();
                        return false;
                    }
                });

                function remove(index){
                    scope.keys.splice(index, 1);
                    ngModel.$setViewValue(scope.keys);
                }
            }
        };
    }

    function bzInputNumber(){
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                iElement.on('keypress', function(event) {
                    if (event.which != 8 && event.which != 0 && (event.which < 48 || event.which > 57)) {
                        return false;
                    }
                });
            }
        };
    }
})();
(function(){
	'use strict';

	angular
	.module('bzApp')
	.filter('bzTrustHtml', bzTrustHtml)						// Cho phép hiển thị dữ liệu là html
	.filter('bzTrustResource', bzTrustResource)
	.filter('bzCurrency', bzCurrency)
	.filter('bzHexToRgb', bzHexToRgb)
	.filter('bzTripHtml', bzTripHtml)
	.filter('bzFormatDate', bzFormatDate)
	.filter('bzFirstPage', bzFirstPage);

	function bzTrustHtml($sce) {
		return function (data) {
			return $sce.trustAsHtml(data);
		};
	}
	function bzTrustResource($sce) {
		return function (data) {
			return $sce.trustAsResourceUrl(data);
		};
	}
	function bzCurrency(){
		return function (data) {
			return helperJs.formatMoney(data);
		};
	}

	function bzHexToRgb(){
		return function (data, alpha) {
			return helperJs.hexToRgb(data, alpha);
		};
	}

	function bzTripHtml(){
		return function (data) {
			return String(data).replace(/<[^>]+>/gm, '');
		};
	}

	function bzFormatDate(){
		return function (data, format) {
			var date = new Date(data);
			var convertedDate = moment(date).format(format);
			return convertedDate;
		};
	}

	function bzFirstPage() {
		return function(data, start) {
			start = +start;
			if(angular.isArray(data)){
				return data.slice(start);
			} else {
				return data;
			}
		};
	}
})();
;(function(){
	'use strict';

	Application.registerRouter({
		state: 'user-sale',
		config: {
			url: '/user-sale?page&limit&sort&role&id&keyword',
			data: {
				title: 'User Sale',
				menuType: 'user'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10'
			},
			templateUrl: 'modules/admin-user/view/client/list-sale/view.html',
			controller: 'usersaleCtrl',
			controllerAs: 'vmUSale',
			resolve: usersaleCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	// Application.registerRouter({
	// 	state: 'user-edit-profile',
	// 	config: {
	// 		url: '/user-edit-profile',
	// 		data: {
	// 			title: 'Sửa Profile',
	// 			menuType: 'user-edit-profile'
	// 		},
	// 		params: {
	// 		},
	// 		templateUrl: 'modules/admin-user/view/client/edit-profile/view.html',
	// 		controller: 'userEditProfileCtrl',
	// 		controllerAs: 'mvUEP',
	// 		resolve: userEditProfileCtrl.resolve
	// 	}
	// });
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'user-edit',
		config: {
			url: '/user-edit?module&page&filter&limit&cateid&sortfield&sortdir&publish&id&keyword',
			data: {
				title: 'Bài viết',
				menuType: 'user'
			},
			params: {
				page: '1',
				sortfield: 'createdAt',
				sortdir: 'desc',
				limit: '10'
			},
			templateUrl: 'modules/admin-user/view/client/edit/view.html',
			controller: 'userEditCtrl',
			controllerAs: 'userEdit',
			resolve: userEditCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'statistic',
		config: {
			url: '/statistic?type&filterDay',
			data: {
				title: 'Thống kê',
				menuType: 'statistic'
			},
			params: {
				limit:100,
				page:1
			},
			templateUrl: 'modules/admin-statistic/view/client/list/view.html',
			controller: 'statisticCtrl',
			controllerAs: 'statistic',
			resolve: statisticCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'salecontact-process',
		config: {
			url: '/salecontact-process?module&page&filter&limit&cateid&sortfield&sortdir&publish&id&keyword',
			data: {
				title: 'Bài viết',
				menuType: 'salecontact'
			},
			params: {
				page: '1',
				sortfield: 'createdAt',
				sortdir: 'desc',
				limit: '10'
			},
			templateUrl: 'modules/admin-salecontact/view/client/process/view.html',
			controller: 'saleContactProcCtrl',
			controllerAs: 'mvSCP',
			resolve: saleContactProcCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'salecontacttmp',
		config: {
			url: '/salecontact-tmp?page&limit&keyword',
			data: {
				title: 'Saleman',
				menuType: 'salecontacttmp'
			},
			params: {
				limit: '20',
				page: '1'
			},
			templateUrl: 'modules/admin-salecontact/view/client/list-tmp/view.html',
			controller: 'saleContactTmpCtrl',
			controllerAs: 'SCTMP',
			resolve: saleContactTmpCtrl.resolve
		}
	});
})();
;(function(){
	'use strict';

	Application.registerRouter({
		state: 'salecontactsearch',
		config: {
			url: '/salecontact-search?page&limit&keyword',
			data: {
				title: 'Saleman Search',
				menuType: 'salecontactsearch'
			},
			params: {
				limit: '10',
				page: '1'
			},
			templateUrl: 'modules/admin-salecontact/view/client/list-search/view.html',
			controller: 'saleContactSearchCtrl',
			controllerAs: 'vmSCT',
			resolve: saleContactSearchCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'contactsalemanevictiondup',
		config: {
			url: '/contact-saleman-evict-dup?dup&uid&page&limit&keyword&type&is_finish&call_status&care_status&call_level&is_recall_schedule&schedule_inteview&filterDay&startDate&endDate&eviction',
			data: {
				title: 'Contact Saleman Eviction Duplicate',
				menuType: 'contactsalemanevictiondup'
			},
			params: {
				limit: '10',
				page: '1',
				dup: 'true',
				eviction: 'true',
			},
			templateUrl: 'modules/admin-salecontact/view/client/list-saleman-eviction-dup/view.html',
			controller: 'contactSalemanEvictDupCtrl',
			controllerAs: 'mvCSMED',
			resolve: contactSalemanEvictDupCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'contactsalemaneviction',
		config: {
			url: '/contact-saleman-evict?dup&uid&page&limit&keyword&type&is_finish&call_status&care_status&call_level&is_recall_schedule&schedule_inteview&filterDay&startDate&endDate&eviction',
			data: {
				title: 'Contact Saleman Eviction',
				menuType: 'contactsalemaneviction'
			},
			params: {
				limit: '10',
				page: '1',
				eviction: 'true',
				dup: 'false',
			},
			templateUrl: 'modules/admin-salecontact/view/client/list-saleman-eviction/view.html',
			controller: 'contactSalemanEvictCtrl',
			controllerAs: 'mvCSME',
			resolve: contactSalemanEvictCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'contactsalemandup',
		config: {
			url: '/contact-saleman-dup?dup&eviction&uid&page&limit&keyword&type&is_finish&call_status&care_status&call_level&is_recall_schedule&schedule_inteview&filterDay&startDate&endDate',
			data: {
				title: 'Contact Saleman Duplicate',
				menuType: 'contactsalemandup'
			},
			params: {
				limit: '10',
				page: '1',
				dup: 'true',
				eviction: 'false'
			},
			templateUrl: 'modules/admin-salecontact/view/client/list-saleman-dup/view.html',
			controller: 'contactSalemanDupCtrl',
			controllerAs: 'vmCSMD',
			resolve: contactSalemanDupCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'contactsaleman',
		config: {
			url: '/contact-saleman?uid&page&limit&keyword&type&is_finish&call_status&care_status&call_level&is_recall_schedule&schedule_inteview&filterDay&startDate&endDate&dup&eviction',
			data: {
				title: 'Contact Saleman',
				menuType: 'contactsaleman'
			},
			params: {
				limit: '10',
				page: '1',
				eviction: 'false',
				dup: 'false'
			},
			templateUrl: 'modules/admin-salecontact/view/client/list-saleman/view.html',
			controller: 'contactSalemanCtrl',
			controllerAs: 'vmCSM',
			resolve: contactSalemanCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'contactregister',
		config: {
			url: '/contactregister?uid&page&limit&keyword&type&is_finish&filterDay&startDate&endDate&newly',
			data: {
				title: 'Saleman',
				menuType: 'contactregister'
			},
			params: {
				limit: '20',
				page: '1',
				newly: 'true'
			},
			templateUrl: 'modules/admin-salecontact/view/client/list/view.html',
			controller: 'contactRegisterCtrl',
			controllerAs: 'CR',
			resolve: contactRegisterCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'salecontact-edit',
		config: {
			url: '/salecontact-edit?_sale_usermember&id',
			data: {
				title: 'Bài viết',
				menuType: 'salecontact'
			},
			params: {
				page: '1',
				sortfield: 'createdAt',
				sortdir: 'desc',
				limit: '10'
			},
			templateUrl: 'modules/admin-salecontact/view/client/edit/view.html',
			controller: 'saleContactEditCtrl',
			controllerAs: 'saleContactEdit',
			resolve: saleContactEditCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'post',
		config: {
			url: '/post?module&page&filter&limit&cateid&sortfield&sortdir&publish&id&keyword',
			data: {
				title: 'Bài viết',
				menuType: 'post'
			},
			params: {
				page: '1',
				sortfield: 'createdAt',
				sortdir: 'desc',
				limit: '10'
			},
			templateUrl: 'modules/admin-post/view/client/list/view.html',
			controller: 'postCtrl',
			controllerAs: 'post',
			resolve: postCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'post-edit',
		config: {
			url: '/post-edit?module&page&filter&limit&cateid&sortfield&sortdir&publish&id&keyword',
			data: {
				title: 'Bài viết',
				menuType: 'post'
			},
			params: {
				page: '1',
				sortfield: 'createdAt',
				sortdir: 'desc',
				limit: '10'
			},
			templateUrl: 'modules/admin-post/view/client/edit/view.html',
			controller: 'postEditCtrl',
			controllerAs: 'postEdit',
			resolve: postEditCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'dashboard',
		config: {
			url: '/',
			data: {
				title: 'Dashboard',
				menuType: 'dashboard'
			},
			params: {
			},
			templateUrl: 'modules/admin-dashboard/view/client/view.html',
			controller: 'dashboardCtrl',
			controllerAs: 'dashboard',
			resolve: dashboardCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'error404',
		config: {
			url: '/error404',
			data: {
				title: 'Error 404',
				menuType: 'error404'
			},
			templateUrl: 'modules/admin-core/view/404.html',
		}
	});

	Application.registerRouter({
		state: 'error403',
		config: {
			url: '/error403',
			data: {
				title: 'Error 403',
				menuType: 'error403'
			},
			templateUrl: 'modules/admin-core/view/403.html',
		}
	});
})();